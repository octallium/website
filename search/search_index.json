{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Updates \u00b6 Modern Python 101 - Workouts \u00b6 This is your playground to practice your basic Python Programming Skills . This course contains carefully selected 20 workouts that cover all basic aspects of Python. If you have taken my earlier course Learn More Enroll Now Modern Python 101 \u00b6 This is your guide to get started with Python Programming Language . This is a simple to understand and free guide to learn Python, we don't expect you to have any programming knowledge and teach everything from scratch. Learn More Enroll Now (Free) Buy Me A Coffee \u00b6","title":"Home"},{"location":"#updates","text":"","title":"Updates"},{"location":"#modern-python-101-workouts","text":"This is your playground to practice your basic Python Programming Skills . This course contains carefully selected 20 workouts that cover all basic aspects of Python. If you have taken my earlier course Learn More Enroll Now","title":"Modern Python 101 - Workouts"},{"location":"#modern-python-101","text":"This is your guide to get started with Python Programming Language . This is a simple to understand and free guide to learn Python, we don't expect you to have any programming knowledge and teach everything from scratch. Learn More Enroll Now (Free)","title":"Modern Python 101"},{"location":"#buy-me-a-coffee","text":"","title":"Buy Me A Coffee"},{"location":"about/","text":"About \u00b6 Today's world is filled with diversity, we all come from different backgrounds and yet some traits remain common amongst all of us. All of us have to learn so many thing since our birth, programming is one such thing and it just happens to be logical extension of your curiosity. If you are on such a journey, you have perhaps come to the right place! Sounds interesting ? Carry on... Introduction \u00b6 Programming languages were made by people for people, but some of the creators got a little creative on the way and came up with strange symbols and syntax, couldn't programming be done in plain English or Marathi or Japanese or in your mother tongue? Perhaps not! It takes a lot more to bring all the diversity and complexity of the real world and pack it in a programming language, however I do agree some programming languages feel weird, sometimes I even thought learning Martian would have been better! But why would anyone choose to learn such cryptic sounding stuff? Answer - To make or break things! Learning \u00b6 Octallium presents easy to understand videos, tutorials and articles to navigate through these cryptic things in the most simplest way possible. Majority of the content starts for beginners and then progressively builds up till you can work on real life scenarios. Every programming language is awesome only till the time it works for you and it's the worst when it doesn't, but it's really up to you which language you prefer, there is no ONE best language. I love to call programming languages as \"demons\" , they offer great power, but you need to learn to handle them well. How to I choose my choice of language? Carry on... Which demon to tame? \u00b6 So which language you should learn? No one can answer that correctly, you need to experiment with different languages and choose your demon \ud83d\udc32. However, depending on the scenario you would have to learn a certain language, e.g - for creating websites, you absolutely need to know HTML, CSS and some Javascript. Its normal for anyone to learn more than half dozen languages in the course of their career. More you expose yourself to different languages, better would be your understanding. Let the force be with you! About Me \u00b6 Hi, my name is Anil Kulkarni and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of coding. When I am not coding you can usually find me watching movies \ud83c\udfac Background \u00b6 I have done my majors in Mechanical Engineering and then completed Masters In Marketing Management , I'm also doing a Post Graduate Certificate in Business Marketing at Seneca College, Toronto. I was always passionate about creating things, in my last venture I was making \"Handmade Soaps\" and while making e-commerce website for it, coding bug caught up with me and I have been learning programming ever since. I try to share whatever I learn. I am also open to any new opportunities, you can checkout my profile at - LinkedIn Github Motivation \u00b6 As a beginner I really struggled to find the right sources for learning and ended up taking a lot of free and paid online courses, which finally ended up in confusion and frustration. So I decided to write a simple to understand, beginner oriented resources for learning how to program.","title":"About"},{"location":"about/#about","text":"Today's world is filled with diversity, we all come from different backgrounds and yet some traits remain common amongst all of us. All of us have to learn so many thing since our birth, programming is one such thing and it just happens to be logical extension of your curiosity. If you are on such a journey, you have perhaps come to the right place! Sounds interesting ? Carry on...","title":"About"},{"location":"about/#introduction","text":"Programming languages were made by people for people, but some of the creators got a little creative on the way and came up with strange symbols and syntax, couldn't programming be done in plain English or Marathi or Japanese or in your mother tongue? Perhaps not! It takes a lot more to bring all the diversity and complexity of the real world and pack it in a programming language, however I do agree some programming languages feel weird, sometimes I even thought learning Martian would have been better! But why would anyone choose to learn such cryptic sounding stuff? Answer - To make or break things!","title":"Introduction"},{"location":"about/#learning","text":"Octallium presents easy to understand videos, tutorials and articles to navigate through these cryptic things in the most simplest way possible. Majority of the content starts for beginners and then progressively builds up till you can work on real life scenarios. Every programming language is awesome only till the time it works for you and it's the worst when it doesn't, but it's really up to you which language you prefer, there is no ONE best language. I love to call programming languages as \"demons\" , they offer great power, but you need to learn to handle them well. How to I choose my choice of language? Carry on...","title":"Learning"},{"location":"about/#which-demon-to-tame","text":"So which language you should learn? No one can answer that correctly, you need to experiment with different languages and choose your demon \ud83d\udc32. However, depending on the scenario you would have to learn a certain language, e.g - for creating websites, you absolutely need to know HTML, CSS and some Javascript. Its normal for anyone to learn more than half dozen languages in the course of their career. More you expose yourself to different languages, better would be your understanding. Let the force be with you!","title":"Which demon to tame?"},{"location":"about/#about-me","text":"Hi, my name is Anil Kulkarni and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of coding. When I am not coding you can usually find me watching movies \ud83c\udfac","title":"About Me"},{"location":"about/#background","text":"I have done my majors in Mechanical Engineering and then completed Masters In Marketing Management , I'm also doing a Post Graduate Certificate in Business Marketing at Seneca College, Toronto. I was always passionate about creating things, in my last venture I was making \"Handmade Soaps\" and while making e-commerce website for it, coding bug caught up with me and I have been learning programming ever since. I try to share whatever I learn. I am also open to any new opportunities, you can checkout my profile at - LinkedIn Github","title":"Background"},{"location":"about/#motivation","text":"As a beginner I really struggled to find the right sources for learning and ended up taking a lot of free and paid online courses, which finally ended up in confusion and frustration. So I decided to write a simple to understand, beginner oriented resources for learning how to program.","title":"Motivation"},{"location":"article/","text":"Articles \u00b6 Nothing yet, check back later for updates","title":"Articles"},{"location":"article/#articles","text":"Nothing yet, check back later for updates","title":"Articles"},{"location":"buy-me-a-coffee/","text":"","title":"Buy Me A Coffee"},{"location":"contact/","text":"Contact Me \u00b6 DM or tag me at @octallium","title":"Contact"},{"location":"contact/#contact-me","text":"DM or tag me at @octallium","title":"Contact Me"},{"location":"subscribe/","text":"!function(c,h,i,m,p){m=c.createElement(h),p=c.getElementsByTagName(h)[0],m.async=1,m.src=i,p.parentNode.insertBefore(m,p)}(document,\"script\",\"https://chimpstatic.com/mcjs-connected/js/users/855c4266d070e1fa933eae8f5/5c022d5a7fcf57cb6545f5fce.js\"); #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; } /* Add your own Mailchimp form style overrides in your site stylesheet or in this style block. We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */ Subscribe * indicates required Email Address * First Name Last Name (function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';fnames[3]='ADDRESS';ftypes[3]='address';fnames[4]='PHONE';ftypes[4]='phone';fnames[5]='BIRTHDAY';ftypes[5]='birthday';}(jQuery));var $mcj = jQuery.noConflict(true); Once a week update about new content and articles, thats it!","title":"Subscribe to Octallium"},{"location":"contact/contact/","text":"Contact \u00b6 Its always nice to hear from the community, please feel free to drop a mail to - connect [at] octallium (dot) com I normally try to get back immediately or within 12 hrs of receiving the mail. Or You can always socially connect - Youtube Twitter LinkedIn Facebook Instagram","title":"Contact Me"},{"location":"contact/contact/#contact","text":"Its always nice to hear from the community, please feel free to drop a mail to - connect [at] octallium (dot) com I normally try to get back immediately or within 12 hrs of receiving the mail. Or You can always socially connect - Youtube Twitter LinkedIn Facebook Instagram","title":"Contact"},{"location":"courses/go/modern-go-101/","text":"Modern Go 101 \u00b6 Welcome to Modern Go 101! \u00b6 Introduction \u00b6 Modern Go 101 is all about teaching the Go Programming Language . This tutorial series comes in two flavours, the free version is published on our Youtube channel and the paid version comes with additional content and solved exercises. The content is first published on the paid version and subsequently videos would be released on Youtube channel on weekly basis. This course is intended for people who have some basic programming knowledge and is aimed at intermediate programmers. Go is in a really sweet spot in the programming world, it is statically typed compiled language and is very fast. In addition to this the concurrency model is what makes it more interesting and perhaps easy to use. In a real world, concurrency is hard! Mutability makes it hard, but Go takes a different approach and shares memory by communicating. Many other programming languages suffer because concurrency was an after thought and provide somewhat awkward concurrency models or are mostly single threaded. But concurrency was built into Go and it provides primitives such as goroutines and channels for handling concurrency. In the battle for concurrency and multi-threaded applications, Go certainly ranks very high, but certainly it isn't the only one. Other programming languages such as Elixir provide far better concurrency model with its Actor Model and are a pure pleasure to work. Go finds wide application from System Programming to Web Applications and lot of developers use it their everyday jobs. So, let's get going and learn one of the most popular programming language out there. Current Status \u00b6 I am currently recording and editing these videos, I expect to complete this course by end of Oct, 2022. The course is available at a discount $25 till I complete it, then it would be available at the regular price $39 . Enroll Now \u00b6 Enroll Now Code \u00b6 Github Repo","title":"Modern Go 101"},{"location":"courses/go/modern-go-101/#modern-go-101","text":"","title":"Modern Go 101"},{"location":"courses/go/modern-go-101/#welcome-to-modern-go-101","text":"","title":"Welcome to Modern Go 101!"},{"location":"courses/go/modern-go-101/#introduction","text":"Modern Go 101 is all about teaching the Go Programming Language . This tutorial series comes in two flavours, the free version is published on our Youtube channel and the paid version comes with additional content and solved exercises. The content is first published on the paid version and subsequently videos would be released on Youtube channel on weekly basis. This course is intended for people who have some basic programming knowledge and is aimed at intermediate programmers. Go is in a really sweet spot in the programming world, it is statically typed compiled language and is very fast. In addition to this the concurrency model is what makes it more interesting and perhaps easy to use. In a real world, concurrency is hard! Mutability makes it hard, but Go takes a different approach and shares memory by communicating. Many other programming languages suffer because concurrency was an after thought and provide somewhat awkward concurrency models or are mostly single threaded. But concurrency was built into Go and it provides primitives such as goroutines and channels for handling concurrency. In the battle for concurrency and multi-threaded applications, Go certainly ranks very high, but certainly it isn't the only one. Other programming languages such as Elixir provide far better concurrency model with its Actor Model and are a pure pleasure to work. Go finds wide application from System Programming to Web Applications and lot of developers use it their everyday jobs. So, let's get going and learn one of the most popular programming language out there.","title":"Introduction"},{"location":"courses/go/modern-go-101/#current-status","text":"I am currently recording and editing these videos, I expect to complete this course by end of Oct, 2022. The course is available at a discount $25 till I complete it, then it would be available at the regular price $39 .","title":"Current Status"},{"location":"courses/go/modern-go-101/#enroll-now","text":"Enroll Now","title":"Enroll Now"},{"location":"courses/go/modern-go-101/#code","text":"Github Repo","title":"Code"},{"location":"courses/python/modern-python-101-workouts/","text":"Modern Python 101 - Workouts \u00b6 Modern Python 101 - Workouts, is your playground to practice your basic python programming skills. This course contains carefully selected 20 workouts that cover all basic aspects of Python. If you have taken my earlier course Modern Python 101 then you know that the content is dense and packed with lots of information! This course is the exact opposite of Modern Python 101 , in this course I am first going to throw a problem at you, may be a little difficult for starting and expect you to attempt it. If you can solve then its awesome, if not then still nothing to worry, the problems are intentionally designed so that you don't get them on first attempt!! And of-course each problem has a detailed explanation and a solution video. I have also selected some problem from Hacker Rank just to give you an idea of how to approach these platforms. It would also help you to carry on solving problems with similar coding challenges platforms in the future. How To Approach Python Workouts \u00b6 Think of it like this - It's your job to solve the problem and it's my job to make it as difficult as possible! So, what really matters for you is to just persist throughout the course and by the end of the course you would have learned so much more than before! As I throw a problem at you, I would expect you to search online for additional concepts, browse articles from websites like stack overflow or official Python documentation and try to come up with a solution. Just solving or not solving the problem doesn't matter or how many step it took to solve the problem doesn't matter, what matters is - How did you approach the problem? How did you decompose the problem? Were you able to conceptually visualize the solution? Remember, a working program is much more important than concise or fast program! I would advise you to not spend more than 45-60 mins on one problem, if you are able to get it partially right them maybe spending some more time could make sense. If you are spending much more time than that, then I would recommend you to watch the solution and try the problem again on your own. At the end of you attempt you can always compare your answer with the solutions, but please remember that my solutions are not the only solutions , you may have a different approach which is completely acceptable, what matters is the outcome. Topic Covered \u00b6 These workouts cover almost every topic we learnt in Modern Python 101 except for error handling and packages and the workouts are mainly designed to test your logic and reasoning. Audience \u00b6 These workouts are designed for Python Beginners or for anyone who want's to practice their fundamental Python Programming skills. Each Workout is specific to a particular Python topic and targets mostly one concept at a time. What To Practice Next - \u00b6 OOP's File & Folder Handling Iterators & Generators Data serialization and de-serialization Decorators Abstract Base Classes Multi-Threading & Multi-Processing Concurrency & Asyncio Testing Web Frameworks - Django, Flask & Fastapi Machine Learning & Deep Learning Github Final Words \u00b6 Just persist in your efforts, solutions will follow! Enroll Now \u00b6 Enroll Now Code \u00b6 Github Repo","title":"Modern Python 101 - Workouts"},{"location":"courses/python/modern-python-101-workouts/#modern-python-101-workouts","text":"Modern Python 101 - Workouts, is your playground to practice your basic python programming skills. This course contains carefully selected 20 workouts that cover all basic aspects of Python. If you have taken my earlier course Modern Python 101 then you know that the content is dense and packed with lots of information! This course is the exact opposite of Modern Python 101 , in this course I am first going to throw a problem at you, may be a little difficult for starting and expect you to attempt it. If you can solve then its awesome, if not then still nothing to worry, the problems are intentionally designed so that you don't get them on first attempt!! And of-course each problem has a detailed explanation and a solution video. I have also selected some problem from Hacker Rank just to give you an idea of how to approach these platforms. It would also help you to carry on solving problems with similar coding challenges platforms in the future.","title":"Modern Python 101 - Workouts"},{"location":"courses/python/modern-python-101-workouts/#how-to-approach-python-workouts","text":"Think of it like this - It's your job to solve the problem and it's my job to make it as difficult as possible! So, what really matters for you is to just persist throughout the course and by the end of the course you would have learned so much more than before! As I throw a problem at you, I would expect you to search online for additional concepts, browse articles from websites like stack overflow or official Python documentation and try to come up with a solution. Just solving or not solving the problem doesn't matter or how many step it took to solve the problem doesn't matter, what matters is - How did you approach the problem? How did you decompose the problem? Were you able to conceptually visualize the solution? Remember, a working program is much more important than concise or fast program! I would advise you to not spend more than 45-60 mins on one problem, if you are able to get it partially right them maybe spending some more time could make sense. If you are spending much more time than that, then I would recommend you to watch the solution and try the problem again on your own. At the end of you attempt you can always compare your answer with the solutions, but please remember that my solutions are not the only solutions , you may have a different approach which is completely acceptable, what matters is the outcome.","title":"How To Approach Python Workouts"},{"location":"courses/python/modern-python-101-workouts/#topic-covered","text":"These workouts cover almost every topic we learnt in Modern Python 101 except for error handling and packages and the workouts are mainly designed to test your logic and reasoning.","title":"Topic Covered"},{"location":"courses/python/modern-python-101-workouts/#audience","text":"These workouts are designed for Python Beginners or for anyone who want's to practice their fundamental Python Programming skills. Each Workout is specific to a particular Python topic and targets mostly one concept at a time.","title":"Audience"},{"location":"courses/python/modern-python-101-workouts/#what-to-practice-next-","text":"OOP's File & Folder Handling Iterators & Generators Data serialization and de-serialization Decorators Abstract Base Classes Multi-Threading & Multi-Processing Concurrency & Asyncio Testing Web Frameworks - Django, Flask & Fastapi Machine Learning & Deep Learning Github","title":"What To Practice Next -"},{"location":"courses/python/modern-python-101-workouts/#final-words","text":"Just persist in your efforts, solutions will follow!","title":"Final Words"},{"location":"courses/python/modern-python-101-workouts/#enroll-now","text":"Enroll Now","title":"Enroll Now"},{"location":"courses/python/modern-python-101-workouts/#code","text":"Github Repo","title":"Code"},{"location":"courses/python/modern-python-101/","text":"Modern Python 101 - Thinking With Types \u00b6 This is your guide to get started with Python Programming Language. This is a simple to understand and free guide to learn Python, we don't expect you to have any programming knowledge and teach everything from scratch. Did you check instagram today or watched YouTube? Well, you just used Python based applications! All fortune 500 companies use Python in some form or another, so fear not, learning Python is always a good decision! Python is the perfect language to learn for beginners. With Python you can do almost anything, create your own web applications, create games, desktop applications, data science projects, AI, etc, the list is endless! Python is well suited for beginners because of its simplicity and you would be writing your own programs in no time! Python is one of the easiest language to learn, while this may be true, but it often takes a lot of time and practice to really master it. People often confuse learning language syntax with learning programming , we make this difference very clear and guide you through the basic principles needed to learn Python in an efficient manner. Remember, this course is just your start and there is no end to learning it! Learning Journey \u00b6 It may take you multiple times to go through any particular Topic/Video/Concept and there is no shame in it. Anyone who says they got the concept in the first try are either really smart or lying, rest of us need repetition and practice to learn anything new. Also remember, as a beginner there is no such thing as silly questions, so be sure to ask whatever you think is a genuine question. Topics Covered \u00b6 Following is the list of topics covered, they are listed in no specific order and are to just give you an idea of topic we would be learning in this tutorial. Introduction - Why you should learn Python? What is Python? How Python Works? Hello World - Your First Python Program Installing Python Setting Up VS Code & Additional Dependencies Type System - Declaring Variables Variable Rules Data Types Control Flow - If / Else Statements With Python And / OR statements in Python For Loops In Python For and In Loops in Python While Loops in Python Data Structures - List Tuple Dictionary Set Functions - What is a Python Function? Python Functions | Take Something -> Give Something Data Transformation Side Effects Arguments Variable Local & Global Scope Unpacking in Python Variable & Keyword Arguments in Python | *args and **kwargs Deeper Dive in Functions - A Look at Higher Order Functions(HOF) & Lambda Object Oriented Programming (OOP) - Introduction to Classes Not Everything Needs To Be a Class Data & Behavior - Attributes, Fields/Members, Methods Create Your First Python Class What Do You Mean By Class Instances? Adding Methods or Behavior to Your Python Class Introduction to Magic Methods Inheritance & Polymorphism Deeper Dive in OOPs - Class methods, Static methods, Property, Getters & Setters Error Handling - Try - Catch - Else - Final blocks Runtime Errors, Syntax Errors, etc. Common Error types - TypeError, AssertionError, ZeroDivisionError, etc. Raising Exceptions Packages - Need for packages Modules vs Packages Local modules Package initialization Package modules Projects - Cash Register -> VOC-DTP Walk through Game - Save Zortan -> Thinking In Layers What To Learn Next - File & Folder Handling Iterators & Generators List Comprehensions Data serialization and de-serialization Decorators Abstract Base Classes OOP's Multi-Threading & Multi-Processing Concurrency & Asyncio Testing Web Frameworks - Django, Flask & Fastapi Machine Learning & Deep Learning Final Words \u00b6 Last But Most Important - Solve More Problems...!!! Enroll Now [Free] \u00b6 Enroll Now Note \u00b6 This is the exact same free course as YouTube channel, but here you can track your progress and I also benefit from more traffic to my website. Code \u00b6 Github Repo","title":"Modern Python 101"},{"location":"courses/python/modern-python-101/#modern-python-101-thinking-with-types","text":"This is your guide to get started with Python Programming Language. This is a simple to understand and free guide to learn Python, we don't expect you to have any programming knowledge and teach everything from scratch. Did you check instagram today or watched YouTube? Well, you just used Python based applications! All fortune 500 companies use Python in some form or another, so fear not, learning Python is always a good decision! Python is the perfect language to learn for beginners. With Python you can do almost anything, create your own web applications, create games, desktop applications, data science projects, AI, etc, the list is endless! Python is well suited for beginners because of its simplicity and you would be writing your own programs in no time! Python is one of the easiest language to learn, while this may be true, but it often takes a lot of time and practice to really master it. People often confuse learning language syntax with learning programming , we make this difference very clear and guide you through the basic principles needed to learn Python in an efficient manner. Remember, this course is just your start and there is no end to learning it!","title":"Modern Python 101 - Thinking With Types"},{"location":"courses/python/modern-python-101/#learning-journey","text":"It may take you multiple times to go through any particular Topic/Video/Concept and there is no shame in it. Anyone who says they got the concept in the first try are either really smart or lying, rest of us need repetition and practice to learn anything new. Also remember, as a beginner there is no such thing as silly questions, so be sure to ask whatever you think is a genuine question.","title":"Learning Journey"},{"location":"courses/python/modern-python-101/#topics-covered","text":"Following is the list of topics covered, they are listed in no specific order and are to just give you an idea of topic we would be learning in this tutorial. Introduction - Why you should learn Python? What is Python? How Python Works? Hello World - Your First Python Program Installing Python Setting Up VS Code & Additional Dependencies Type System - Declaring Variables Variable Rules Data Types Control Flow - If / Else Statements With Python And / OR statements in Python For Loops In Python For and In Loops in Python While Loops in Python Data Structures - List Tuple Dictionary Set Functions - What is a Python Function? Python Functions | Take Something -> Give Something Data Transformation Side Effects Arguments Variable Local & Global Scope Unpacking in Python Variable & Keyword Arguments in Python | *args and **kwargs Deeper Dive in Functions - A Look at Higher Order Functions(HOF) & Lambda Object Oriented Programming (OOP) - Introduction to Classes Not Everything Needs To Be a Class Data & Behavior - Attributes, Fields/Members, Methods Create Your First Python Class What Do You Mean By Class Instances? Adding Methods or Behavior to Your Python Class Introduction to Magic Methods Inheritance & Polymorphism Deeper Dive in OOPs - Class methods, Static methods, Property, Getters & Setters Error Handling - Try - Catch - Else - Final blocks Runtime Errors, Syntax Errors, etc. Common Error types - TypeError, AssertionError, ZeroDivisionError, etc. Raising Exceptions Packages - Need for packages Modules vs Packages Local modules Package initialization Package modules Projects - Cash Register -> VOC-DTP Walk through Game - Save Zortan -> Thinking In Layers What To Learn Next - File & Folder Handling Iterators & Generators List Comprehensions Data serialization and de-serialization Decorators Abstract Base Classes OOP's Multi-Threading & Multi-Processing Concurrency & Asyncio Testing Web Frameworks - Django, Flask & Fastapi Machine Learning & Deep Learning","title":"Topics Covered"},{"location":"courses/python/modern-python-101/#final-words","text":"Last But Most Important - Solve More Problems...!!!","title":"Final Words"},{"location":"courses/python/modern-python-101/#enroll-now-free","text":"Enroll Now","title":"Enroll Now [Free]"},{"location":"courses/python/modern-python-101/#note","text":"This is the exact same free course as YouTube channel, but here you can track your progress and I also benefit from more traffic to my website.","title":"Note"},{"location":"courses/python/modern-python-101/#code","text":"Github Repo","title":"Code"},{"location":"tutorials/elixir/basics/agent/","text":"","title":"Agent"},{"location":"tutorials/elixir/basics/alias-require-import/","text":"","title":"Alias require import"},{"location":"tutorials/elixir/basics/basic-operations/","text":"Basic Operations \u00b6 TODO \u00b6","title":"Basic Operations"},{"location":"tutorials/elixir/basics/basic-operations/#basic-operations","text":"","title":"Basic Operations"},{"location":"tutorials/elixir/basics/basic-operations/#todo","text":"","title":"TODO"},{"location":"tutorials/elixir/basics/case-cond-if/","text":"","title":"Case cond if"},{"location":"tutorials/elixir/basics/comprehensions/","text":"","title":"Comprehensions"},{"location":"tutorials/elixir/basics/data-types/","text":"Data Types \u00b6 TODO \u00b6","title":"Data Types"},{"location":"tutorials/elixir/basics/data-types/#data-types","text":"","title":"Data Types"},{"location":"tutorials/elixir/basics/data-types/#todo","text":"","title":"TODO"},{"location":"tutorials/elixir/basics/doctest/","text":"","title":"Doctest"},{"location":"tutorials/elixir/basics/enum/","text":"","title":"Enum"},{"location":"tutorials/elixir/basics/erlang-lib/","text":"","title":"Erlang lib"},{"location":"tutorials/elixir/basics/ets/","text":"","title":"Ets"},{"location":"tutorials/elixir/basics/file-handling/","text":"","title":"File handling"},{"location":"tutorials/elixir/basics/genserver/","text":"","title":"Genserver"},{"location":"tutorials/elixir/basics/hello_elixir/","text":"Hello Elixir \u00b6 Learn how to make your first Hello World program in Elixir. Using IEx \u00b6 Open your terminal and start IEx - $ iex iex ( 1 ) > Write the following into your IEx - iex ( 1 ) > IO.puts ( \"Hello World\" ) Output - Hello World :ok Using Script File \u00b6 Create a file hello_world.exs and enter the following - IO . puts ( \"Hello World\" ) Elixir files can be created using two extension exs or ex , exs is normally used for creating scripts and ex for creating compiled files. Here we will be working with script file, later we will explore working with ex extensions for compiled files. To run the script, open the terminal and navigate to the folder that contains the hello_world.exs file and run the following - $ elixir hello_world.exs Output $ elixir hello_world.exs \"Hello World\" That's it! You just created your file Elixir program. IO \u00b6 Wondering what is this IO ? It is simply a built-in module provided by Elixir, it is automatically imported and is made available to use, we will cover more about modules later. In addition to IO there are a lot of modules made available, be sure to check out the official documentation for a complete list. puts is simply a function defined in IO module, we invoke the function by passing a argument IO.puts(\"Hello World\") , this in turn prints \"Hello World\" to our terminal. Elixir is pretty flexible about its syntax, you can omit the brackets and it will work just the same - iex ( 1 ) > IO.puts \"Hello World\" Hello World :ok The choice of using brackets or not is upto you, personally I like using brackets, it makes the code easier to read, but it's just my personal preference. Exercises \u00b6 1) Create and run a script file that will print the following. Make sure to make a new file with exs extension and run it from your terminal. \"Elixir Rocks!!!\" 2) And one more script that will print - \"Hi, my name is Octallium and I am learning Elixir\" 3) What is the result of - iex ( 1 ) > IO.puts 7 + 6 4) And iex ( 1 ) > IO.puts \"7 + 6\" 5) For some fun try running this - iex ( 1 ) > IO.puts \"Hello \" <> \"World\" Don't skip the exercises if you really want to learn Elixir! However simple they may seem, its important to try them out yourself! Please Consider a Donation \u2764\ufe0f \u00b6 If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Hello Elixir"},{"location":"tutorials/elixir/basics/hello_elixir/#hello-elixir","text":"Learn how to make your first Hello World program in Elixir.","title":"Hello Elixir"},{"location":"tutorials/elixir/basics/hello_elixir/#using-iex","text":"Open your terminal and start IEx - $ iex iex ( 1 ) > Write the following into your IEx - iex ( 1 ) > IO.puts ( \"Hello World\" ) Output - Hello World :ok","title":"Using IEx"},{"location":"tutorials/elixir/basics/hello_elixir/#using-script-file","text":"Create a file hello_world.exs and enter the following - IO . puts ( \"Hello World\" ) Elixir files can be created using two extension exs or ex , exs is normally used for creating scripts and ex for creating compiled files. Here we will be working with script file, later we will explore working with ex extensions for compiled files. To run the script, open the terminal and navigate to the folder that contains the hello_world.exs file and run the following - $ elixir hello_world.exs Output $ elixir hello_world.exs \"Hello World\" That's it! You just created your file Elixir program.","title":"Using Script File"},{"location":"tutorials/elixir/basics/hello_elixir/#io","text":"Wondering what is this IO ? It is simply a built-in module provided by Elixir, it is automatically imported and is made available to use, we will cover more about modules later. In addition to IO there are a lot of modules made available, be sure to check out the official documentation for a complete list. puts is simply a function defined in IO module, we invoke the function by passing a argument IO.puts(\"Hello World\") , this in turn prints \"Hello World\" to our terminal. Elixir is pretty flexible about its syntax, you can omit the brackets and it will work just the same - iex ( 1 ) > IO.puts \"Hello World\" Hello World :ok The choice of using brackets or not is upto you, personally I like using brackets, it makes the code easier to read, but it's just my personal preference.","title":"IO"},{"location":"tutorials/elixir/basics/hello_elixir/#exercises","text":"1) Create and run a script file that will print the following. Make sure to make a new file with exs extension and run it from your terminal. \"Elixir Rocks!!!\" 2) And one more script that will print - \"Hi, my name is Octallium and I am learning Elixir\" 3) What is the result of - iex ( 1 ) > IO.puts 7 + 6 4) And iex ( 1 ) > IO.puts \"7 + 6\" 5) For some fun try running this - iex ( 1 ) > IO.puts \"Hello \" <> \"World\" Don't skip the exercises if you really want to learn Elixir! However simple they may seem, its important to try them out yourself!","title":"Exercises"},{"location":"tutorials/elixir/basics/hello_elixir/#please-consider-a-donation","text":"If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"tutorials/elixir/basics/iex/","text":"Interactive Elixir Shell \u00b6 Learn how to interact with the interactive shell and get started. IEx \u00b6 To enter the interactive shell open your terminal and type the following For mac, freeBSD or linux - $ iex iex ( 1 ) > For windows - c: \\> iex.bat iex ( 1 ) > Interactive shell provides a convenience method for using elixir. Let's try to explore it. iex ( 1 ) > IO.puts ( \"Hello, World\" ) You get back a response - Hello, World :ok Don't worry about :ok , its called as an atom and we will come back to it later. To exit the IEx press ctrl-c twice. Helper Functions \u00b6 IEx provides all sorts of helper function, we will see them as required in future tutorials, for now again open the IEx and type the following - iex ( 1 ) >i 43 What output do you see? Term 43 Data type Integer Reference modules Integer Implemented protocols IEx.Info, Inspect, List.Chars, String.Chars Using the flag i the interactive shell provided you with a lot of data, lets try putting something else this time. iex ( 2 ) > i \"Hello, World\" Output Term \"Hello, World\" Data type BitString Byte size 12 Description This is a string: a UTF-8 encoded binary. It ' s printed surrounded by \"double quotes\" because all UTF-8 encoded code points in it are printable. Raw representation <<72, 101, 108, 108, 111, 44, 32, 87 , 111 , 114 , 108 , 100 >> Reference modules String, :binary Implemented protocols Collectable, IEx.Info, Inspect, List.Chars, String.Chars Notice the Data type is showing BitString this time, earlier for 43 the data type was Integer , IEx is trying to help by providing all the information that it available. Exercises \u00b6 Now, its time for some fun exercises, type the following and see what output do you get iex ( 1 ) > i 'a' iex ( 2 ) > i 2 .56 iex ( 3 ) > i :hello iex ( 4 ) > i true Just read all the outputs, you are not required to understand everything just yet, but try to read and make sense of the output. Don't skip the exercises if you really want to learn Elixir! However simple they may seem, its important to try them out yourself! Please Consider a Donation \u2764\ufe0f \u00b6 If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Interactive Elixir Shell"},{"location":"tutorials/elixir/basics/iex/#interactive-elixir-shell","text":"Learn how to interact with the interactive shell and get started.","title":"Interactive Elixir Shell"},{"location":"tutorials/elixir/basics/iex/#iex","text":"To enter the interactive shell open your terminal and type the following For mac, freeBSD or linux - $ iex iex ( 1 ) > For windows - c: \\> iex.bat iex ( 1 ) > Interactive shell provides a convenience method for using elixir. Let's try to explore it. iex ( 1 ) > IO.puts ( \"Hello, World\" ) You get back a response - Hello, World :ok Don't worry about :ok , its called as an atom and we will come back to it later. To exit the IEx press ctrl-c twice.","title":"IEx"},{"location":"tutorials/elixir/basics/iex/#helper-functions","text":"IEx provides all sorts of helper function, we will see them as required in future tutorials, for now again open the IEx and type the following - iex ( 1 ) >i 43 What output do you see? Term 43 Data type Integer Reference modules Integer Implemented protocols IEx.Info, Inspect, List.Chars, String.Chars Using the flag i the interactive shell provided you with a lot of data, lets try putting something else this time. iex ( 2 ) > i \"Hello, World\" Output Term \"Hello, World\" Data type BitString Byte size 12 Description This is a string: a UTF-8 encoded binary. It ' s printed surrounded by \"double quotes\" because all UTF-8 encoded code points in it are printable. Raw representation <<72, 101, 108, 108, 111, 44, 32, 87 , 111 , 114 , 108 , 100 >> Reference modules String, :binary Implemented protocols Collectable, IEx.Info, Inspect, List.Chars, String.Chars Notice the Data type is showing BitString this time, earlier for 43 the data type was Integer , IEx is trying to help by providing all the information that it available.","title":"Helper Functions"},{"location":"tutorials/elixir/basics/iex/#exercises","text":"Now, its time for some fun exercises, type the following and see what output do you get iex ( 1 ) > i 'a' iex ( 2 ) > i 2 .56 iex ( 3 ) > i :hello iex ( 4 ) > i true Just read all the outputs, you are not required to understand everything just yet, but try to read and make sense of the output. Don't skip the exercises if you really want to learn Elixir! However simple they may seem, its important to try them out yourself!","title":"Exercises"},{"location":"tutorials/elixir/basics/iex/#please-consider-a-donation","text":"If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"tutorials/elixir/basics/installation/","text":"Installation \u00b6 Learn how to install Elixir and how to setup your machine for development. At the time of writing, the latest stable version is Elixir 1.10.0, you may have a different version depending when you are reading this tutorial. Mac OS \u00b6 Installing Elixir couldn't be any easy, just make sure you have Brew installed and then type the following in the terminal - 1 brew install elixir Windows \u00b6 On windows you can install Elixir as you would install just about any program, all you need to do is to download the installer and press next till it is installed. Other Platforms \u00b6 Elixir offers excellent support for all other platforms including FreeBSD and other unix derived languages, check out this page for documentation. Checking Installation \u00b6 You can check the installation, by typing the following in your terminal or powershell - 1 elixir -v Output - Erlang/OTP 22 [ erts-10.6.4 ] [ source ] [ 64 -bit ] [ smp:4:4 ] [ ds:4:4:10 ] [ async-threads:1 ] [ hipe ] [ dtrace ] Elixir 1 .10.2 ( compiled with Erlang/OTP 22 ) Line 3 indicates that Elixir 1.10.2 has been installed and Elixir has been compiled with Erlang 22.0 Setting up your editor \u00b6 Elixir is supported in all the leading editors and IDE's, two of the most commonly used editors are - VS Code \u00b6 You only need to install this plugin. Optionally you can also install this plugin for code formatting. Atom \u00b6 You need to install this plugin. Further, I have read nice reviews for Spacemacs , however I have not tested it personally. Please Consider a Donation \u2764\ufe0f \u00b6 If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Installing Elixir"},{"location":"tutorials/elixir/basics/installation/#installation","text":"Learn how to install Elixir and how to setup your machine for development. At the time of writing, the latest stable version is Elixir 1.10.0, you may have a different version depending when you are reading this tutorial.","title":"Installation"},{"location":"tutorials/elixir/basics/installation/#mac-os","text":"Installing Elixir couldn't be any easy, just make sure you have Brew installed and then type the following in the terminal - 1 brew install elixir","title":"Mac OS"},{"location":"tutorials/elixir/basics/installation/#windows","text":"On windows you can install Elixir as you would install just about any program, all you need to do is to download the installer and press next till it is installed.","title":"Windows"},{"location":"tutorials/elixir/basics/installation/#other-platforms","text":"Elixir offers excellent support for all other platforms including FreeBSD and other unix derived languages, check out this page for documentation.","title":"Other Platforms"},{"location":"tutorials/elixir/basics/installation/#checking-installation","text":"You can check the installation, by typing the following in your terminal or powershell - 1 elixir -v Output - Erlang/OTP 22 [ erts-10.6.4 ] [ source ] [ 64 -bit ] [ smp:4:4 ] [ ds:4:4:10 ] [ async-threads:1 ] [ hipe ] [ dtrace ] Elixir 1 .10.2 ( compiled with Erlang/OTP 22 ) Line 3 indicates that Elixir 1.10.2 has been installed and Elixir has been compiled with Erlang 22.0","title":"Checking Installation"},{"location":"tutorials/elixir/basics/installation/#setting-up-your-editor","text":"Elixir is supported in all the leading editors and IDE's, two of the most commonly used editors are -","title":"Setting up your editor"},{"location":"tutorials/elixir/basics/installation/#vs-code","text":"You only need to install this plugin. Optionally you can also install this plugin for code formatting.","title":"VS Code"},{"location":"tutorials/elixir/basics/installation/#atom","text":"You need to install this plugin. Further, I have read nice reviews for Spacemacs , however I have not tested it personally.","title":"Atom"},{"location":"tutorials/elixir/basics/installation/#please-consider-a-donation","text":"If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"tutorials/elixir/basics/introduction/","text":"Learn Elixir The Only Elixir Tutorials On The Planet For Complete Beginners Exclusively On Octallium ! Introduction \u00b6 Considering Elixir ? Or maybe just curious ? Chances are you already have some experience with programming or if you are a complete beginner, I couldn't be any more happy! Before getting along with actual coding, let's get a couple of things straight, Elixir is not a silver bullet to all your problems, ever heard of Hammer Syndrome ? It implies that, \"If you only have a hammer, then every problem looks like a nail!\" , but in the practical world things are very different, problems are various and in different domains. Then where would you use Elixir? Scenario \u00b6 Let's consider this, the world basically works by communication , communication is required in every aspects of life, products communicate their utility, services communicate their usability, consumer communicate their requirements, etc, and in this world of communication data is constantly being passed from one point to another. Elixir is extremely well suited for these applications, it really shines when data has to be transformed and transferred in a highly concurrent, distributed and fault tolerant manner. Often, data has to be transformed to suit the end users, Elixir with all its eco-system is a perfectly capable system for it. Perhaps, that's why products like WhatsApp, Discord & Telecom sector rely so highly on it. Understanding Elixir \u00b6 Elixir is a functional programming language, the word functional is important as it does not have the concept of Objects or Classes and has immutable data types , if you come from a Object Orientated Language then you need to unlearn a lot of concepts in order to understand the functional paradigm. Programming need not only be object oriented, functional programming is a beautiful way of thinking, also it takes away a lot of pain as you don't need to keep a track of the state of objects. About Erlang/Elixir \u00b6 Erlang/Elixir looks as if it has a cryptic syntax and functional programming makes them look difficult on the surface, but its really not the case, they are really great to work with and specially Elixir is designed to make developers feel happy . We need to give it, other languages did a fantastic job of presenting themself in a much better way, also the amount of marketing, conferences, sponsorships, etc have really shaped them to be much popular and widely used. But being popular does not necessarily mean better , Erlang and Elixir really shines in what they do, perhaps they just need better marketing efforts. What is Erlang, Elixir And Phoenix \u00b6 Erlang/OTP is a concurrent functional programming language that forms the basic foundation, it was developed by Ericsson in 1986 and made open source in 1998. Erlang runs on its virtual machine called as the BEAM . OTP simply stands for Open Telecom Platform . Elixir builds on top of Erlang and provides a nice and easy way of interacting with the underlying system. It provides abstraction over Erlang, so that its easier for developers to code and finally it compiles and runs on BEAM. Phoenix Framework is a great set of tooling to create mature and blazing fast web applications, its based on Elixir and offers excellent framework to create highly scalable and concurrent distributed applications. We would be more focused on Elixir & Phoenix , but keep it mind that finally everything is compiled and runs on the BEAM. Elixir & Phoenix also has very good set of online documentation and the communities are also generally warm and helpful. Let the magic begin! Getting Help \u00b6 Elixir has a set of very nice online documentation and guides . Elixir Forum is an excellent place to post queries and interact with the community. Please Consider a Donation \u2764\ufe0f \u00b6 If you would like to see videos and articles coming up much faster then please consider a small donation. It needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Introduction to Elixir"},{"location":"tutorials/elixir/basics/introduction/#introduction","text":"Considering Elixir ? Or maybe just curious ? Chances are you already have some experience with programming or if you are a complete beginner, I couldn't be any more happy! Before getting along with actual coding, let's get a couple of things straight, Elixir is not a silver bullet to all your problems, ever heard of Hammer Syndrome ? It implies that, \"If you only have a hammer, then every problem looks like a nail!\" , but in the practical world things are very different, problems are various and in different domains. Then where would you use Elixir?","title":"Introduction"},{"location":"tutorials/elixir/basics/introduction/#scenario","text":"Let's consider this, the world basically works by communication , communication is required in every aspects of life, products communicate their utility, services communicate their usability, consumer communicate their requirements, etc, and in this world of communication data is constantly being passed from one point to another. Elixir is extremely well suited for these applications, it really shines when data has to be transformed and transferred in a highly concurrent, distributed and fault tolerant manner. Often, data has to be transformed to suit the end users, Elixir with all its eco-system is a perfectly capable system for it. Perhaps, that's why products like WhatsApp, Discord & Telecom sector rely so highly on it.","title":"Scenario"},{"location":"tutorials/elixir/basics/introduction/#understanding-elixir","text":"Elixir is a functional programming language, the word functional is important as it does not have the concept of Objects or Classes and has immutable data types , if you come from a Object Orientated Language then you need to unlearn a lot of concepts in order to understand the functional paradigm. Programming need not only be object oriented, functional programming is a beautiful way of thinking, also it takes away a lot of pain as you don't need to keep a track of the state of objects.","title":"Understanding Elixir"},{"location":"tutorials/elixir/basics/introduction/#about-erlangelixir","text":"Erlang/Elixir looks as if it has a cryptic syntax and functional programming makes them look difficult on the surface, but its really not the case, they are really great to work with and specially Elixir is designed to make developers feel happy . We need to give it, other languages did a fantastic job of presenting themself in a much better way, also the amount of marketing, conferences, sponsorships, etc have really shaped them to be much popular and widely used. But being popular does not necessarily mean better , Erlang and Elixir really shines in what they do, perhaps they just need better marketing efforts.","title":"About Erlang/Elixir"},{"location":"tutorials/elixir/basics/introduction/#what-is-erlang-elixir-and-phoenix","text":"Erlang/OTP is a concurrent functional programming language that forms the basic foundation, it was developed by Ericsson in 1986 and made open source in 1998. Erlang runs on its virtual machine called as the BEAM . OTP simply stands for Open Telecom Platform . Elixir builds on top of Erlang and provides a nice and easy way of interacting with the underlying system. It provides abstraction over Erlang, so that its easier for developers to code and finally it compiles and runs on BEAM. Phoenix Framework is a great set of tooling to create mature and blazing fast web applications, its based on Elixir and offers excellent framework to create highly scalable and concurrent distributed applications. We would be more focused on Elixir & Phoenix , but keep it mind that finally everything is compiled and runs on the BEAM. Elixir & Phoenix also has very good set of online documentation and the communities are also generally warm and helpful. Let the magic begin!","title":"What is Erlang, Elixir And Phoenix"},{"location":"tutorials/elixir/basics/introduction/#getting-help","text":"Elixir has a set of very nice online documentation and guides . Elixir Forum is an excellent place to post queries and interact with the community.","title":"Getting Help"},{"location":"tutorials/elixir/basics/introduction/#please-consider-a-donation","text":"If you would like to see videos and articles coming up much faster then please consider a small donation. It needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"tutorials/elixir/basics/iterable/","text":"","title":"Iterable"},{"location":"tutorials/elixir/basics/lists/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/elixir/basics/lists/#todo","text":"","title":"TODO"},{"location":"tutorials/elixir/basics/map/","text":"","title":"Map"},{"location":"tutorials/elixir/basics/mix/","text":"","title":"Mix"},{"location":"tutorials/elixir/basics/modules-functions/","text":"","title":"Modules functions"},{"location":"tutorials/elixir/basics/otp/","text":"","title":"Otp"},{"location":"tutorials/elixir/basics/pattern-matching/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/elixir/basics/pattern-matching/#todo","text":"","title":"TODO"},{"location":"tutorials/elixir/basics/pipe/","text":"","title":"Pipe"},{"location":"tutorials/elixir/basics/processes/","text":"","title":"Processes"},{"location":"tutorials/elixir/basics/protocols/","text":"","title":"Protocols"},{"location":"tutorials/elixir/basics/sigil/","text":"","title":"Sigil"},{"location":"tutorials/elixir/basics/spawn/","text":"","title":"Spawn"},{"location":"tutorials/elixir/basics/stream/","text":"","title":"Stream"},{"location":"tutorials/elixir/basics/strings/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/elixir/basics/strings/#todo","text":"","title":"TODO"},{"location":"tutorials/elixir/basics/struct/","text":"","title":"Struct"},{"location":"tutorials/elixir/basics/supervisor/","text":"","title":"Supervisor"},{"location":"tutorials/elixir/basics/task/","text":"","title":"Task"},{"location":"tutorials/elixir/basics/testing/","text":"","title":"Testing"},{"location":"tutorials/python/basics/data-types/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/python/basics/data-types/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/dictionary/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/python/basics/dictionary/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/error-handling/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/python/basics/error-handling/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/file-handling/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/python/basics/file-handling/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/functions/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/python/basics/functions/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/if-else/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/python/basics/if-else/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/installation/","text":"Installation \u00b6 Learn how to install Python 3 on your machine. But, before actually installing there are some points that I would like you to note. Python actually comes pre-installed on most operating system these days, but its the old and legacy version Python 2. Python 2 will officially be retiring on Jan 1 st , 2020, so its ideal to straight away get working with Python 3. Check out the installation instructions as per your operating system. Installing on Windows \u00b6 Installing Python 3 on Windows is just as easy as installing any other program, in addition to Python 3, I would highly recommend installing Git Bash , so that you can work with the exact same commands in the tutorial as mine and we need not keeping on switching between operating systems. Ofcouse, I will let you know whenever there are differences. Navigate to following link and download the setup file 1 https://www.python.org/downloads/windows/ Under Stable Releases check out your system and download the setup file accordingly, in most cases your system should be 64 bit, if that's the case you can download the following setup file 1 Windows x86-64 executable installer After downloading you can install it as you would install any other program. The installer will install everything and also setup environment variables. Installing on Mac \u00b6 Navigate to following link and download the setup file 1 https://www.python.org/downloads/mac-osx/ Under Stable Releases you can download the following file 1 macOS 64-bit installer And then install it as any other program, it will automatically setup environment variables for you. Alternatively If you are using brew, then installing Python is very simple, open your terminal and type 1 brew install python By default brew will install python 3 to the following directory - 1 /usr/local/bin/python3 You can check it by typing the following on your terminal 1 which python3 Installing on Linux \u00b6 Installing Python 3.7 on Ubuntu. If you are using Ubuntu 19.04 Disco Dingo then you already have Python 3.7.3 pre-installed, just sit back and you can directly skip to \"Setting Up Alias\" For others, start by updating ubuntu, open your terminal and type the following - 1 2 sudo apt update sudo apt install software-properties-common Add the repository 1 sudo add-apt-repository ppa:deadsnakes/ppa Install Python 3.7 1 sudo apt install python3.7 Checking Version \u00b6 You can check the installed python version. 1 python3 --version Python 3 also installs \"pip3\" by default, it is the package manager for python, you can check its version by 1 pip3 --version Setting Up Alias (Optional) \u00b6 Since Python 2 comes pre-installed on almost all the operating systems, the default python keyword points to Python 2, for using Python 3 we need to type python3 , which for me gets a little boring and unintuitive since Python 2 will be reaching its end of life soon. So, I just setup a alias, which simply means that, I say to my computer, \"Whenever I type python it has to refer to Python 3 and not to Python 2\". To setup a alias open your terminal and navigate to your home directory 1 cd If you are using bash, open the bash_profile, since I am using Visual Studio Code, I can directly open the file by typing 1 code .bash_profile If you are using atom, you can open by 1 atom .bash_profile Or if you are using PyCharm 1 charm .bash_profile Instead of bash if you are using zsh, you can open .zshrc 1 code .zshrc Add the following 2 lines at the end of the file 1 2 alias python='python3' alias pip='pip3' Now close and restart your terminal, to check if its working properly type the following 1 python --version It should show the current Python 3 installed version. Setting up your development environment and code editor \u00b6 (External Links) Excellent environment setup videos by Corey Schafer - For Windows For MacOS Please Consider a Donation \u2764\ufe0f \u00b6 If you would like to see videos and articles coming up much faster then please consider a small donation. It needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Installing Python"},{"location":"tutorials/python/basics/installation/#installation","text":"Learn how to install Python 3 on your machine. But, before actually installing there are some points that I would like you to note. Python actually comes pre-installed on most operating system these days, but its the old and legacy version Python 2. Python 2 will officially be retiring on Jan 1 st , 2020, so its ideal to straight away get working with Python 3. Check out the installation instructions as per your operating system.","title":"Installation"},{"location":"tutorials/python/basics/installation/#installing-on-windows","text":"Installing Python 3 on Windows is just as easy as installing any other program, in addition to Python 3, I would highly recommend installing Git Bash , so that you can work with the exact same commands in the tutorial as mine and we need not keeping on switching between operating systems. Ofcouse, I will let you know whenever there are differences. Navigate to following link and download the setup file 1 https://www.python.org/downloads/windows/ Under Stable Releases check out your system and download the setup file accordingly, in most cases your system should be 64 bit, if that's the case you can download the following setup file 1 Windows x86-64 executable installer After downloading you can install it as you would install any other program. The installer will install everything and also setup environment variables.","title":"Installing on Windows"},{"location":"tutorials/python/basics/installation/#installing-on-mac","text":"Navigate to following link and download the setup file 1 https://www.python.org/downloads/mac-osx/ Under Stable Releases you can download the following file 1 macOS 64-bit installer And then install it as any other program, it will automatically setup environment variables for you. Alternatively If you are using brew, then installing Python is very simple, open your terminal and type 1 brew install python By default brew will install python 3 to the following directory - 1 /usr/local/bin/python3 You can check it by typing the following on your terminal 1 which python3","title":"Installing on Mac"},{"location":"tutorials/python/basics/installation/#installing-on-linux","text":"Installing Python 3.7 on Ubuntu. If you are using Ubuntu 19.04 Disco Dingo then you already have Python 3.7.3 pre-installed, just sit back and you can directly skip to \"Setting Up Alias\" For others, start by updating ubuntu, open your terminal and type the following - 1 2 sudo apt update sudo apt install software-properties-common Add the repository 1 sudo add-apt-repository ppa:deadsnakes/ppa Install Python 3.7 1 sudo apt install python3.7","title":"Installing on Linux"},{"location":"tutorials/python/basics/installation/#checking-version","text":"You can check the installed python version. 1 python3 --version Python 3 also installs \"pip3\" by default, it is the package manager for python, you can check its version by 1 pip3 --version","title":"Checking Version"},{"location":"tutorials/python/basics/installation/#setting-up-alias-optional","text":"Since Python 2 comes pre-installed on almost all the operating systems, the default python keyword points to Python 2, for using Python 3 we need to type python3 , which for me gets a little boring and unintuitive since Python 2 will be reaching its end of life soon. So, I just setup a alias, which simply means that, I say to my computer, \"Whenever I type python it has to refer to Python 3 and not to Python 2\". To setup a alias open your terminal and navigate to your home directory 1 cd If you are using bash, open the bash_profile, since I am using Visual Studio Code, I can directly open the file by typing 1 code .bash_profile If you are using atom, you can open by 1 atom .bash_profile Or if you are using PyCharm 1 charm .bash_profile Instead of bash if you are using zsh, you can open .zshrc 1 code .zshrc Add the following 2 lines at the end of the file 1 2 alias python='python3' alias pip='pip3' Now close and restart your terminal, to check if its working properly type the following 1 python --version It should show the current Python 3 installed version.","title":"Setting Up Alias (Optional)"},{"location":"tutorials/python/basics/installation/#setting-up-your-development-environment-and-code-editor","text":"(External Links) Excellent environment setup videos by Corey Schafer - For Windows For MacOS","title":"Setting up your development environment and code editor"},{"location":"tutorials/python/basics/installation/#please-consider-a-donation","text":"If you would like to see videos and articles coming up much faster then please consider a small donation. It needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"tutorials/python/basics/introduction/","text":"Introduction to Python 3 \u00b6 What the hell...python ? Isn't it supposed to be a reptile! Well, it also happens to be a really great programming language. If you are just starting your programming journey, Python is the right place to start, it offers nice and clean syntax, vast library, online available content, huge community, etc. Today's software industry has a huge collection of programming languages like C, C++, Java, Javascript, Go, Rust, etc. Each of the language has its own pros and cons, there is no 'One Size Fits All' concept and one has to really consider the project requirements in order to select a language. So, that brings us to the next question, WHY Choose PYTHON ? Why Python? \ud83d\udc0d \u00b6 Simple answer is, because its Amazing! Surely python also has its share of pros and cons, but offers a lot more in return, such as follows - Are you a beginner ? Python is the perfect place to start, it will help you to understand a lot of the basic programming concepts and then you can move on to other languages if required. Python really helps you to be productive, you can achieve a lot more in few lines of code. In addition to it, Python is very robust, performant and provides high scalability. Python offers a simple and clean syntax, no semicolons! Python has a vast library support, you can find a library for almost any functionality you can think off! Web development no problem! Python has robust web frameworks like Django, Flask, Pyramid, etc. Creating command line applications, again no problem! Python is great fit for Machine Learning, Artificial Intelligence, Business Analytics, etc. Need to work with files such as csv, xls, pdf, zip, etc, ...aah just a piece of cake. Python is great for rapid development, you can easily bootstrap a project with the vast eco-system that python provides. Sounds exciting! Let's dive more into it. What is Python? \u00b6 As you already know that python is a programming language, for now just remmember its an interpreted language, i.e the python interpreter acts like an interface between you and the machine. You write in English and python converts it into a language that the machine can understand, simple isn't it? Who's using Python? \u00b6 Almost everyone uses python, from big companies like Google, Facebook, Dropbox, Microsoft, etc to research institutes like CERN, NASA, etc, everyone uses python! What will I learn here? \u00b6 Octallium aims to teach Python 3 right from basics to advanced. Ofcouse, its not possible to cover everything that python has to offer, but it will surely teach you enough to get started on your own. Please Consider a Donation \u2764\ufe0f \u00b6 If you would like to see videos and articles coming up much faster then please consider a small donation. It needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Introduction to Python 3"},{"location":"tutorials/python/basics/introduction/#introduction-to-python-3","text":"What the hell...python ? Isn't it supposed to be a reptile! Well, it also happens to be a really great programming language. If you are just starting your programming journey, Python is the right place to start, it offers nice and clean syntax, vast library, online available content, huge community, etc. Today's software industry has a huge collection of programming languages like C, C++, Java, Javascript, Go, Rust, etc. Each of the language has its own pros and cons, there is no 'One Size Fits All' concept and one has to really consider the project requirements in order to select a language. So, that brings us to the next question, WHY Choose PYTHON ?","title":"Introduction to Python 3"},{"location":"tutorials/python/basics/introduction/#why-python","text":"Simple answer is, because its Amazing! Surely python also has its share of pros and cons, but offers a lot more in return, such as follows - Are you a beginner ? Python is the perfect place to start, it will help you to understand a lot of the basic programming concepts and then you can move on to other languages if required. Python really helps you to be productive, you can achieve a lot more in few lines of code. In addition to it, Python is very robust, performant and provides high scalability. Python offers a simple and clean syntax, no semicolons! Python has a vast library support, you can find a library for almost any functionality you can think off! Web development no problem! Python has robust web frameworks like Django, Flask, Pyramid, etc. Creating command line applications, again no problem! Python is great fit for Machine Learning, Artificial Intelligence, Business Analytics, etc. Need to work with files such as csv, xls, pdf, zip, etc, ...aah just a piece of cake. Python is great for rapid development, you can easily bootstrap a project with the vast eco-system that python provides. Sounds exciting! Let's dive more into it.","title":"Why Python? \ud83d\udc0d"},{"location":"tutorials/python/basics/introduction/#what-is-python","text":"As you already know that python is a programming language, for now just remmember its an interpreted language, i.e the python interpreter acts like an interface between you and the machine. You write in English and python converts it into a language that the machine can understand, simple isn't it?","title":"What is Python?"},{"location":"tutorials/python/basics/introduction/#whos-using-python","text":"Almost everyone uses python, from big companies like Google, Facebook, Dropbox, Microsoft, etc to research institutes like CERN, NASA, etc, everyone uses python!","title":"Who's using Python?"},{"location":"tutorials/python/basics/introduction/#what-will-i-learn-here","text":"Octallium aims to teach Python 3 right from basics to advanced. Ofcouse, its not possible to cover everything that python has to offer, but it will surely teach you enough to get started on your own.","title":"What will I learn here?"},{"location":"tutorials/python/basics/introduction/#please-consider-a-donation","text":"If you would like to see videos and articles coming up much faster then please consider a small donation. It needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"tutorials/python/basics/list/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/python/basics/list/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/loops/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/python/basics/loops/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/oop/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/python/basics/oop/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/packages/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/python/basics/packages/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/set/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/python/basics/set/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/static-typing/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/python/basics/static-typing/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/strings/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/python/basics/strings/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/tuple/","text":"TODO \u00b6","title":"TODO"},{"location":"tutorials/python/basics/tuple/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/variables/","text":"Variables \u00b6 Introduction \u00b6 Let us see how to create variables in Python. In order to understand variables, I'd like you to meet Billy , he is a friendly dinosaur and is currently planning for his birthday party. Billy is very excited about the party and is busy thinking about packaging all the return gifts. Billy has three type of return gifts - Balloons Party Hats Crackers Declaring Variables \u00b6 Let's start by creating a file called as 'variables.py' anywhere on your computer and open it in your code editor and type the following - box = 'Baloons' print ( box ) In order to run the file, open the terminal and navigate to the directory which contains the file. Suppose I have created that file on my desktop, then the path on my terminal will be - $ cd /Users/ { your username } /Desktop In order to run the file, type the following in your terminal - $ python3 variables.py Output will be as follows - 1 Baloons Congratulation! You just created a variable and printed its value. Understanding Variables \u00b6 Let us again have a look at the code we wrote above box = 'Baloons' print ( box ) You are declaring a variable called box and assigning it a value of Baloons , note the single quote around it, you can also use double quotes as follows and it will give you the same output. box = \"Baloons\" print ( box ) Single and double quotes can be used interchangeably, but be sure to use a consistent style all across your code. Printing Values \u00b6 box = 'Baloons' print ( box ) Line 2 prints the value of the variable 'box' to the terminal, which in our case is 'Baloons'. 1 Baloons print() is a builtin python function which we can easily use to print values. Re-assigning Values \u00b6 Suppose, now Billy wants to pack 'Party Hats' instead of 'Baloons', then we can re-assign a new value to the same variable 'box' box = 'Party Hats' print ( box ) You can again check the value by running the file 1 python3 variables.py Output 1 Party Hats Notice that our value has now changed from 'Baloons' to 'Party Hats'. And now finally Billy wants to pack 'Crackers', so we can once again re-assign 'box' to a new value of 'Crackers' box = 'Crackers' print ( box ) If you run the file again, this time output will be 1 Crackers Full Code \u00b6 # variables.py box = 'Baloons' print ( box ) # prints -> Baloons box = 'Party Hats' print ( box ) # prints -> Party Hats box = 'Crackers' print ( box ) # prints -> Crackers Conclusion \u00b6 As you must have noticed box is just a placeholder, we can assign different values to it from time to time, thus it is know as a variable, i.e values can change but the placeholder remains the same. Please Consider a Donation \u2764\ufe0f \u00b6 If you would like to see videos and articles coming up much faster then please consider a small donation. It needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Variables"},{"location":"tutorials/python/basics/variables/#variables","text":"","title":"Variables"},{"location":"tutorials/python/basics/variables/#introduction","text":"Let us see how to create variables in Python. In order to understand variables, I'd like you to meet Billy , he is a friendly dinosaur and is currently planning for his birthday party. Billy is very excited about the party and is busy thinking about packaging all the return gifts. Billy has three type of return gifts - Balloons Party Hats Crackers","title":"Introduction"},{"location":"tutorials/python/basics/variables/#declaring-variables","text":"Let's start by creating a file called as 'variables.py' anywhere on your computer and open it in your code editor and type the following - box = 'Baloons' print ( box ) In order to run the file, open the terminal and navigate to the directory which contains the file. Suppose I have created that file on my desktop, then the path on my terminal will be - $ cd /Users/ { your username } /Desktop In order to run the file, type the following in your terminal - $ python3 variables.py Output will be as follows - 1 Baloons Congratulation! You just created a variable and printed its value.","title":"Declaring Variables"},{"location":"tutorials/python/basics/variables/#understanding-variables","text":"Let us again have a look at the code we wrote above box = 'Baloons' print ( box ) You are declaring a variable called box and assigning it a value of Baloons , note the single quote around it, you can also use double quotes as follows and it will give you the same output. box = \"Baloons\" print ( box ) Single and double quotes can be used interchangeably, but be sure to use a consistent style all across your code.","title":"Understanding Variables"},{"location":"tutorials/python/basics/variables/#printing-values","text":"box = 'Baloons' print ( box ) Line 2 prints the value of the variable 'box' to the terminal, which in our case is 'Baloons'. 1 Baloons print() is a builtin python function which we can easily use to print values.","title":"Printing Values"},{"location":"tutorials/python/basics/variables/#re-assigning-values","text":"Suppose, now Billy wants to pack 'Party Hats' instead of 'Baloons', then we can re-assign a new value to the same variable 'box' box = 'Party Hats' print ( box ) You can again check the value by running the file 1 python3 variables.py Output 1 Party Hats Notice that our value has now changed from 'Baloons' to 'Party Hats'. And now finally Billy wants to pack 'Crackers', so we can once again re-assign 'box' to a new value of 'Crackers' box = 'Crackers' print ( box ) If you run the file again, this time output will be 1 Crackers","title":"Re-assigning Values"},{"location":"tutorials/python/basics/variables/#full-code","text":"# variables.py box = 'Baloons' print ( box ) # prints -> Baloons box = 'Party Hats' print ( box ) # prints -> Party Hats box = 'Crackers' print ( box ) # prints -> Crackers","title":"Full Code"},{"location":"tutorials/python/basics/variables/#conclusion","text":"As you must have noticed box is just a placeholder, we can assign different values to it from time to time, thus it is know as a variable, i.e values can change but the placeholder remains the same.","title":"Conclusion"},{"location":"tutorials/python/basics/variables/#please-consider-a-donation","text":"If you would like to see videos and articles coming up much faster then please consider a small donation. It needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"tutorials/python/intermediate/abc-class/","text":"","title":"Abc class"},{"location":"tutorials/python/intermediate/async-await/","text":"","title":"Async await"},{"location":"tutorials/python/intermediate/cli/","text":"","title":"Cli"},{"location":"tutorials/python/intermediate/database/","text":"","title":"Database"},{"location":"tutorials/python/intermediate/functional-programming/","text":"","title":"Functional programming"},{"location":"tutorials/python/intermediate/generators-iterators/","text":"","title":"Generators iterators"},{"location":"tutorials/python/intermediate/intro-http/","text":"","title":"Intro http"},{"location":"tutorials/python/intermediate/lambda/","text":"","title":"Lambda"},{"location":"tutorials/python/intermediate/list-comprehensions/","text":"","title":"List comprehensions"},{"location":"tutorials/python/intermediate/logging/","text":"","title":"Logging"},{"location":"tutorials/python/intermediate/magic-methods/","text":"","title":"Magic methods"},{"location":"tutorials/python/intermediate/multi-threading/","text":"","title":"Multi threading"},{"location":"tutorials/python/intermediate/named-tuple/","text":"","title":"Named tuple"},{"location":"tutorials/python/intermediate/regular-expression/","text":"","title":"Regular expression"},{"location":"tutorials/python/intermediate/testing/","text":"","title":"Testing"}]}