{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"!function(c,h,i,m,p){m=c.createElement(h),p=c.getElementsByTagName(h)[0],m.async=1,m.src=i,p.parentNode.insertBefore(m,p)}(document,\"script\",\"https://chimpstatic.com/mcjs-connected/js/users/855c4266d070e1fa933eae8f5/5c022d5a7fcf57cb6545f5fce.js\"); Octallium Learn to code with free tutorials in HTML/CSS, Javascript, Python, Go, Dart, Rust, Angular, React, Vue, Mongo DB, PostgreSQL, Flutter, etc. Introduction Octallium is an online ninja training school \u2694\ufe0f for the Coding Enthusiast and dedicated to the programming toddlers. Start by learning how to hold basic programming chopsticks \ud83e\udd62, then take the journey all the way to becoming a Programming Zen Master \ud83d\udc32 I don't make any assumption about your prior programming knowledge and try to teach everything from scratch. Let the force be with you! Audience The resources are intended for the beginners, toddlers, hobbyist coders, dedicated but not yet learnt and new programmers. It can also be used as a reference by more experienced developers. Code Sample All code will be in the form of following block 1 2 3 # python code def hello (): print ( Hello World ) Please Consider a Donation \u2764\ufe0f If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link: Contact connect [at] octallium dot com Sponsorship Please contact for sponsoring the project. Links / Social Connect You can also help by sharing any of the website content or by following/liking/sharing social media handles. Youtube Twitter Facebook Instagram LinkedIn Get Updates #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; } /* Add your own Mailchimp form style overrides in your site stylesheet or in this style block. We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. <em>/ Subscribe indicates required Email Address * First Name Last Name (function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';fnames[3]='ADDRESS';ftypes[3]='address';fnames[4]='PHONE';ftypes[4]='phone';fnames[5]='BIRTHDAY';ftypes[5]='birthday';}(jQuery));var $mcj = jQuery.noConflict(true); Once a week updates about new content and articles, thats it!","title":"Home"},{"location":"#octallium","text":"Learn to code with free tutorials in HTML/CSS, Javascript, Python, Go, Dart, Rust, Angular, React, Vue, Mongo DB, PostgreSQL, Flutter, etc.","title":"Octallium"},{"location":"#introduction","text":"Octallium is an online ninja training school \u2694\ufe0f for the Coding Enthusiast and dedicated to the programming toddlers. Start by learning how to hold basic programming chopsticks \ud83e\udd62, then take the journey all the way to becoming a Programming Zen Master \ud83d\udc32 I don't make any assumption about your prior programming knowledge and try to teach everything from scratch. Let the force be with you!","title":"Introduction"},{"location":"#audience","text":"The resources are intended for the beginners, toddlers, hobbyist coders, dedicated but not yet learnt and new programmers. It can also be used as a reference by more experienced developers.","title":"Audience"},{"location":"#code-sample","text":"All code will be in the form of following block 1 2 3 # python code def hello (): print ( Hello World )","title":"Code Sample"},{"location":"#please-consider-a-donation","text":"If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"#contact","text":"connect [at] octallium dot com","title":"Contact"},{"location":"#sponsorship","text":"Please contact for sponsoring the project.","title":"Sponsorship"},{"location":"#links-social-connect","text":"You can also help by sharing any of the website content or by following/liking/sharing social media handles. Youtube Twitter Facebook Instagram LinkedIn","title":"Links / Social Connect"},{"location":"#get-updates","text":"#mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; } /* Add your own Mailchimp form style overrides in your site stylesheet or in this style block. We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. <em>/","title":"Get Updates"},{"location":"subscribe/","text":"!function(c,h,i,m,p){m=c.createElement(h),p=c.getElementsByTagName(h)[0],m.async=1,m.src=i,p.parentNode.insertBefore(m,p)}(document,\"script\",\"https://chimpstatic.com/mcjs-connected/js/users/855c4266d070e1fa933eae8f5/5c022d5a7fcf57cb6545f5fce.js\"); #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; } /* Add your own Mailchimp form style overrides in your site stylesheet or in this style block. We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. <em>/ Subscribe indicates required Email Address * First Name Last Name (function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';fnames[3]='ADDRESS';ftypes[3]='address';fnames[4]='PHONE';ftypes[4]='phone';fnames[5]='BIRTHDAY';ftypes[5]='birthday';}(jQuery));var $mcj = jQuery.noConflict(true); Once a week update about new content and articles, thats it!","title":"Subscribe"},{"location":"about/about-me/","text":"About Hi, my name is Anil Kulkarni and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of coding. When I am not coding you can usually find me watching movies \ud83c\udfac Post Schedule I would be posting updates twice a week, on Tuesday Thursday (IST). Currently, there is no deadline for creating new articles, whatever I manage to finish will be pushed online. Motivation As a beginner I really struggled to find the right sources for learning and ended up taking a lot of free and paid online courses, which finally ended up in confusion and frustration. So I decided to write a simple to understand, beginner oriented resources for learning how to program.","title":"About Me"},{"location":"about/about-me/#about","text":"Hi, my name is Anil Kulkarni and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of coding. When I am not coding you can usually find me watching movies \ud83c\udfac","title":"About"},{"location":"about/about-me/#post-schedule","text":"I would be posting updates twice a week, on Tuesday Thursday (IST). Currently, there is no deadline for creating new articles, whatever I manage to finish will be pushed online.","title":"Post Schedule"},{"location":"about/about-me/#motivation","text":"As a beginner I really struggled to find the right sources for learning and ended up taking a lot of free and paid online courses, which finally ended up in confusion and frustration. So I decided to write a simple to understand, beginner oriented resources for learning how to program.","title":"Motivation"},{"location":"about/contribution/","text":"Contributing Content The entire project is open source and available on Github, including this website which is using Github Pages. You can star, fork or even better send a pull request, all of the updates would be reviewed and merged as per the schedule. Currently the project is using Mkdocs to generate content, but aims to use custom web framework sometime in the future. No technical skills ? No Problem, you can still contribute by - Generating creative/graphic content. Check for any grammar/spelling mistakes. Letting us know for any broken links, bugs or incorrect content. Sponsoring custom swag like T-Shirts, caps, stickers, etc. Writing social media posts.","title":"Contributing Content"},{"location":"about/contribution/#contributing-content","text":"The entire project is open source and available on Github, including this website which is using Github Pages. You can star, fork or even better send a pull request, all of the updates would be reviewed and merged as per the schedule. Currently the project is using Mkdocs to generate content, but aims to use custom web framework sometime in the future. No technical skills ? No Problem, you can still contribute by - Generating creative/graphic content. Check for any grammar/spelling mistakes. Letting us know for any broken links, bugs or incorrect content. Sponsoring custom swag like T-Shirts, caps, stickers, etc. Writing social media posts.","title":"Contributing Content"},{"location":"about/donate/","text":"Donate Project like this require funding to maintain and generate content. Currently this is my side project and I try to dedicate as much time and efforts possible, but with your help, I could create a lot more content for the community. You can donate by clicking on the link below:","title":"Donate"},{"location":"about/donate/#donate","text":"Project like this require funding to maintain and generate content. Currently this is my side project and I try to dedicate as much time and efforts possible, but with your help, I could create a lot more content for the community. You can donate by clicking on the link below:","title":"Donate"},{"location":"about/sponsorship/","text":"Sponsorship Want to showcase you brand on Octallium or sponsor any specific activities? Sponsorship Tiers (Annual) Platinum - $25,000 Full size color logo in landing, contributors, contact and about page. Full size color logo with custom link in weekly newsletter. One custom article or promo code or product display in weekly newsletter. Full size logo with custom link on 30 selected articles. Gold - $22,500 Medium size color logo in landing, contributors, contact and about page. Medium size color logo with custom link in weekly newsletter. One custom article or promo code or product display in weekly newsletter. Medium size logo with custom link on 25 selected articles. Silver - $20,000 Small size color logo in landing, contributors, contact and about page. Small size color logo with custom link in weekly newsletter. Small size logo with custom link on 20 selected articles. Bronze - $17,500 Small size black and white logo in landing, contributors, contact and about page. Small size black and white logo with custom link in weekly newsletter. Small size logo with custom link on 15 selected articles. Contact Please contact at the below email - connect [at] octallium dot com","title":"Sponsorship"},{"location":"about/sponsorship/#sponsorship","text":"Want to showcase you brand on Octallium or sponsor any specific activities?","title":"Sponsorship"},{"location":"about/sponsorship/#sponsorship-tiers-annual","text":"","title":"Sponsorship Tiers (Annual)"},{"location":"about/sponsorship/#platinum-25000","text":"Full size color logo in landing, contributors, contact and about page. Full size color logo with custom link in weekly newsletter. One custom article or promo code or product display in weekly newsletter. Full size logo with custom link on 30 selected articles.","title":"Platinum - $25,000"},{"location":"about/sponsorship/#gold-22500","text":"Medium size color logo in landing, contributors, contact and about page. Medium size color logo with custom link in weekly newsletter. One custom article or promo code or product display in weekly newsletter. Medium size logo with custom link on 25 selected articles.","title":"Gold - $22,500"},{"location":"about/sponsorship/#silver-20000","text":"Small size color logo in landing, contributors, contact and about page. Small size color logo with custom link in weekly newsletter. Small size logo with custom link on 20 selected articles.","title":"Silver - $20,000"},{"location":"about/sponsorship/#bronze-17500","text":"Small size black and white logo in landing, contributors, contact and about page. Small size black and white logo with custom link in weekly newsletter. Small size logo with custom link on 15 selected articles.","title":"Bronze - $17,500"},{"location":"about/sponsorship/#contact","text":"Please contact at the below email - connect [at] octallium dot com","title":"Contact"},{"location":"contact/contact/","text":"Contact Its always nice to hear from the community, please feel free to drop a mail to - connect [at] octallium (dot) com I normally try to get back immediately or within 12 hrs of receiving the mail. Or You can always socially connect - Github Youtube Twitter LinkedIn Facebook Instagram","title":"Connect"},{"location":"contact/contact/#contact","text":"Its always nice to hear from the community, please feel free to drop a mail to - connect [at] octallium (dot) com I normally try to get back immediately or within 12 hrs of receiving the mail. Or You can always socially connect - Github Youtube Twitter LinkedIn Facebook Instagram","title":"Contact"},{"location":"go/basics/add-comment/","text":"How To Add A Comment . Objective Learn how to add a comment in the code. Requirement Adding comments is a very handy way of adding documentation to your code, it serves as a tool to let others know what you have written and makes navigating your code an easy task. Go has a specific format for adding comments and recommends adding comments wherever it makes sense. Code Adding a comment is pretty easy 1 // This is a comment The compiler ignores the comment and runs your code, however as humans for us to remmember what we have written and for others to understand writing comments would make sense. Hello World With Comment 1 2 3 4 5 6 7 8 9 10 11 12 13 // Declaring that the file belongs to the main package package main // Importing the package fmt import fmt // Declaring the main function func main () { // Printing Hello World to the standard output fmt . Println ( Hello, World! ) } // main function ends Golang Playground Hello World With Comment Click on the below link: Hello World With Comments Next Now that you know how to write comments, lets start with writing code with beautiful comments, but before we actually start writing more code there is one small step, we need to understand Data Types Click on the next section to understand basic data types in Go. Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"03 Adding a Comment"},{"location":"go/basics/add-comment/#how-to-add-a-czjqqkd0-commentczjqqkd1","text":"","title":"How To Add A  Comment."},{"location":"go/basics/add-comment/#objective","text":"Learn how to add a comment in the code.","title":"Objective"},{"location":"go/basics/add-comment/#requirement","text":"Adding comments is a very handy way of adding documentation to your code, it serves as a tool to let others know what you have written and makes navigating your code an easy task. Go has a specific format for adding comments and recommends adding comments wherever it makes sense.","title":"Requirement"},{"location":"go/basics/add-comment/#code","text":"Adding a comment is pretty easy 1 // This is a comment The compiler ignores the comment and runs your code, however as humans for us to remmember what we have written and for others to understand writing comments would make sense.","title":"Code"},{"location":"go/basics/add-comment/#hello-world-with-comment","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 // Declaring that the file belongs to the main package package main // Importing the package fmt import fmt // Declaring the main function func main () { // Printing Hello World to the standard output fmt . Println ( Hello, World! ) } // main function ends","title":"Hello World With Comment"},{"location":"go/basics/add-comment/#golang-playground","text":"Hello World With Comment Click on the below link: Hello World With Comments","title":"Golang Playground"},{"location":"go/basics/add-comment/#next","text":"Now that you know how to write comments, lets start with writing code with beautiful comments, but before we actually start writing more code there is one small step, we need to understand Data Types Click on the next section to understand basic data types in Go.","title":"Next"},{"location":"go/basics/add-comment/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/basics/array/","text":"Understanding Data Structure of Type Array . Objective Understanding Array's in Go. Imagine walking into an ice-cream store, you see all different flavor displayed nicely side-by-side, tempting isn't it ? You can easily see all the flavors and make your choice easily. This display of various ice-cream flavors is nothing but an \"array\" with the common item type of \"ice-cream\" ! Go offers a couple of in-build data structures and one of them is an \"array\", you can imagine array as a collection of similar items, i.e you can group together common items. The advantage of array is that it gives you easy access to data, also data can be organized properly by using arrays, however arrays are fixed in size, to overcome this Go offers \"slice\" which we will cover in the next chapter. Structure Navigate to our code folder 1 code/basic/ For our program create a new folder '11_array' 1 code/basic/11_array/ And lets create a file 'array.go' in it, finally the structure would look like this: 1 code/basic/11_array/array.go Declaration Syntax 1 var arrayName [ size ] type Or declaration initialization method 1 arrayName := [ size ] type { value1 , value2 , ... } Code We will write the code in 2 parts: 1) Part-1 array.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import fmt func main () { // declaring an array of type int var array1 [ 5 ] int fmt . Println ( The values of array1 are: , array1 ) fmt . Println ( The length of array1 is: , len ( array1 )) fmt . Println () // adding values into the array fmt . Println ( Adding values to array1 ) array1 [ 0 ] = 29 array1 [ 1 ] = 17 array1 [ 2 ] = 42 array1 [ 3 ] = 13 array1 [ 4 ] = 56 fmt . Println ( Now the values of array1 are: , array1 ) fmt . Println () // Reading all values from array1 using for-range loop fmt . Println ( Reading all the values from array1 using for-range loop... ) for index , value := range array1 { fmt . Printf ( Index: %d Value: %d\\n , index , value ) } fmt . Println () Review On line 7 we declare an array of type int with a length of 5 and print out the empty array. 1 var array1 [ 5 ] int On line 9 we print out the length of the array using a built-in function \"len\". 1 fmt . Println ( The length of array1 is: , len ( array1 )) From line 14 to 18 we initialize values to the array and then finally print out the filled array. The final array will look like the below image. Did you notice that the index position starts from \"0\" and not from \"1\" ! So an array of length 5 will have index positions of 0, 1, 2, 3 4. On line 24 we are using a \"for-range\" loop to print out the values, notice that we declare two variables \"index\" and \"position\" and then range over the array. 1 for index , value := range array1 What this does is, it iterates over each element one by one and prints out the value index, we don't have to declare variables and iterate, remember we used to write: 1 2 3 for i := 0 ; i n ; i ++ { do something } Instead we can write it with much cleaner syntax using for-range loop, for-range loops are extensively used in Go. If you don't want to use any value, you can simply discard it using \"_\" , for example if you do not want index position, you can declare for-range as: 1 2 3 for _ , value : range array1 { do something } The underscore \"_\" simply tells the Go compiler to ignore the value. 2) Part-2 array.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // declaring an array of type string with shorthand method cities := [ 5 ] string { New York , Seattle , Mumbai , Sydney , Montreal } fmt . Println ( The values of cities array are: , cities ) fmt . Println () // Reading specific values fmt . Println ( Reading values from cities array using index position... ) fmt . Println ( The first city is: , cities [ 0 ]) fmt . Println ( The 3rd city is: , cities [ 2 ]) fmt . Println ( The last city is: , cities [ 4 ]) fmt . Println ( The last city can also be found by: , cities [ len ( cities ) - 1 ]) fmt . Println () // changing values fmt . Println ( Changing the value at cities[0] to Paris... ) cities [ 0 ] = Paris fmt . Println ( The value at cities[0] is: , cities [ 0 ]) } Review On line 2 we declare and initialize the array at the same time 1 cities := [ 5 ] string { New York , Seattle , Mumbai , Sydney , Montreal } We can access values at select index, checkout the lines from 8 to 11. 1 2 3 4 fmt . Println ( The first city is: , cities [ 0 ]) fmt . Println ( The 3rd city is: , cities [ 2 ]) fmt . Println ( The last city is: , cities [ 4 ]) fmt . Println ( The last city can also be found by: , cities [ len ( cities ) - 1 ]) We can also change the values in an array, on line 44 we change the value of cities[0] from New York to Paris. 1 cities [ 0 ] = Paris Full Code array.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package main import fmt func main () { // declaring an array of type int var array1 [ 5 ] int fmt . Println ( The values of array1 are: , array1 ) fmt . Println ( The length of array1 is: , len ( array1 )) fmt . Println () // adding values into the array fmt . Println ( Adding values to array1 ) array1 [ 0 ] = 29 array1 [ 1 ] = 17 array1 [ 2 ] = 42 array1 [ 3 ] = 13 array1 [ 4 ] = 56 fmt . Println ( Now the values of array1 are: , array1 ) fmt . Println () // Reading all values from array1 using for-range loop fmt . Println ( Reading all the values from array1 using for-range loop... ) for index , value := range array1 { fmt . Printf ( Index: %d Value: %d\\n , index , value ) } fmt . Println () // declaring an array of type string with shorthand method cities := [ 5 ] string { New York , Seattle , Mumbai , Sydney , Montreal } fmt . Println ( The values of cities array are: , cities ) fmt . Println () // Reading specific values fmt . Println ( Reading values from cities array using index position... ) fmt . Println ( The first city is: , cities [ 0 ]) fmt . Println ( The 3rd city is: , cities [ 2 ]) fmt . Println ( The last city is: , cities [ 4 ]) fmt . Println ( The last city can also be found by: , cities [ len ( cities ) - 1 ]) fmt . Println () // changing values fmt . Println ( Changing the value at cities[0] to Paris... ) cities [ 0 ] = Paris fmt . Println ( The value at cities[0] is: , cities [ 0 ]) } Running your code Open your terminal and navigate to our folder 1 code/basic/11_array/ Once in the folder type the following command 1 go run array.go Output If there are no errors, you should get the output as: Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 The values of array1 are: [0 0 0 0 0] The length of array1 is: 5 Adding values to array1 Now the values of array1 are: [29 17 42 13 56] Reading all the values from array1 using for-range loop... Index: 0 Value: 29 Index: 1 Value: 17 Index: 2 Value: 42 Index: 3 Value: 13 Index: 4 Value: 56 The values of cities array are: [New York Seattle Mumbai Sydney Montreal] Reading values from cities array using index position... The first city is: New York The 3rd city is: Mumbai The last city is: Montreal The last city can also be found by: Montreal Changing the value at cities[0] to Paris... The value at cities[0] is: Paris If for some reason your code isn't working, checkout the github repo. Github Github Repo Golang Playground Golang Playground Limitation Imagine you data is increasing and now you have 100 cities instead of 5, but the array can only hold 5 values, to overcome this limitation Go ships with a flexible type called as \"Slice\". Next We will study slices in depth in the next chapter. Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"11 Array"},{"location":"go/basics/array/#understanding-data-structure-of-type-czjqqkd0-arrayczjqqkd1","text":"","title":"Understanding Data Structure of Type  Array."},{"location":"go/basics/array/#objective","text":"Understanding Array's in Go. Imagine walking into an ice-cream store, you see all different flavor displayed nicely side-by-side, tempting isn't it ? You can easily see all the flavors and make your choice easily. This display of various ice-cream flavors is nothing but an \"array\" with the common item type of \"ice-cream\" ! Go offers a couple of in-build data structures and one of them is an \"array\", you can imagine array as a collection of similar items, i.e you can group together common items. The advantage of array is that it gives you easy access to data, also data can be organized properly by using arrays, however arrays are fixed in size, to overcome this Go offers \"slice\" which we will cover in the next chapter.","title":"Objective"},{"location":"go/basics/array/#structure","text":"Navigate to our code folder 1 code/basic/ For our program create a new folder '11_array' 1 code/basic/11_array/ And lets create a file 'array.go' in it, finally the structure would look like this: 1 code/basic/11_array/array.go","title":"Structure"},{"location":"go/basics/array/#declaration","text":"Syntax 1 var arrayName [ size ] type Or declaration initialization method 1 arrayName := [ size ] type { value1 , value2 , ... }","title":"Declaration"},{"location":"go/basics/array/#code","text":"We will write the code in 2 parts:","title":"Code"},{"location":"go/basics/array/#1-part-1-arraygo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import fmt func main () { // declaring an array of type int var array1 [ 5 ] int fmt . Println ( The values of array1 are: , array1 ) fmt . Println ( The length of array1 is: , len ( array1 )) fmt . Println () // adding values into the array fmt . Println ( Adding values to array1 ) array1 [ 0 ] = 29 array1 [ 1 ] = 17 array1 [ 2 ] = 42 array1 [ 3 ] = 13 array1 [ 4 ] = 56 fmt . Println ( Now the values of array1 are: , array1 ) fmt . Println () // Reading all values from array1 using for-range loop fmt . Println ( Reading all the values from array1 using for-range loop... ) for index , value := range array1 { fmt . Printf ( Index: %d Value: %d\\n , index , value ) } fmt . Println () Review On line 7 we declare an array of type int with a length of 5 and print out the empty array. 1 var array1 [ 5 ] int On line 9 we print out the length of the array using a built-in function \"len\". 1 fmt . Println ( The length of array1 is: , len ( array1 )) From line 14 to 18 we initialize values to the array and then finally print out the filled array. The final array will look like the below image. Did you notice that the index position starts from \"0\" and not from \"1\" ! So an array of length 5 will have index positions of 0, 1, 2, 3 4. On line 24 we are using a \"for-range\" loop to print out the values, notice that we declare two variables \"index\" and \"position\" and then range over the array. 1 for index , value := range array1 What this does is, it iterates over each element one by one and prints out the value index, we don't have to declare variables and iterate, remember we used to write: 1 2 3 for i := 0 ; i n ; i ++ { do something } Instead we can write it with much cleaner syntax using for-range loop, for-range loops are extensively used in Go. If you don't want to use any value, you can simply discard it using \"_\" , for example if you do not want index position, you can declare for-range as: 1 2 3 for _ , value : range array1 { do something } The underscore \"_\" simply tells the Go compiler to ignore the value.","title":"1) Part-1 array.go"},{"location":"go/basics/array/#2-part-2-arraygo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // declaring an array of type string with shorthand method cities := [ 5 ] string { New York , Seattle , Mumbai , Sydney , Montreal } fmt . Println ( The values of cities array are: , cities ) fmt . Println () // Reading specific values fmt . Println ( Reading values from cities array using index position... ) fmt . Println ( The first city is: , cities [ 0 ]) fmt . Println ( The 3rd city is: , cities [ 2 ]) fmt . Println ( The last city is: , cities [ 4 ]) fmt . Println ( The last city can also be found by: , cities [ len ( cities ) - 1 ]) fmt . Println () // changing values fmt . Println ( Changing the value at cities[0] to Paris... ) cities [ 0 ] = Paris fmt . Println ( The value at cities[0] is: , cities [ 0 ]) } Review On line 2 we declare and initialize the array at the same time 1 cities := [ 5 ] string { New York , Seattle , Mumbai , Sydney , Montreal } We can access values at select index, checkout the lines from 8 to 11. 1 2 3 4 fmt . Println ( The first city is: , cities [ 0 ]) fmt . Println ( The 3rd city is: , cities [ 2 ]) fmt . Println ( The last city is: , cities [ 4 ]) fmt . Println ( The last city can also be found by: , cities [ len ( cities ) - 1 ]) We can also change the values in an array, on line 44 we change the value of cities[0] from New York to Paris. 1 cities [ 0 ] = Paris","title":"2) Part-2 array.go"},{"location":"go/basics/array/#full-code","text":"array.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package main import fmt func main () { // declaring an array of type int var array1 [ 5 ] int fmt . Println ( The values of array1 are: , array1 ) fmt . Println ( The length of array1 is: , len ( array1 )) fmt . Println () // adding values into the array fmt . Println ( Adding values to array1 ) array1 [ 0 ] = 29 array1 [ 1 ] = 17 array1 [ 2 ] = 42 array1 [ 3 ] = 13 array1 [ 4 ] = 56 fmt . Println ( Now the values of array1 are: , array1 ) fmt . Println () // Reading all values from array1 using for-range loop fmt . Println ( Reading all the values from array1 using for-range loop... ) for index , value := range array1 { fmt . Printf ( Index: %d Value: %d\\n , index , value ) } fmt . Println () // declaring an array of type string with shorthand method cities := [ 5 ] string { New York , Seattle , Mumbai , Sydney , Montreal } fmt . Println ( The values of cities array are: , cities ) fmt . Println () // Reading specific values fmt . Println ( Reading values from cities array using index position... ) fmt . Println ( The first city is: , cities [ 0 ]) fmt . Println ( The 3rd city is: , cities [ 2 ]) fmt . Println ( The last city is: , cities [ 4 ]) fmt . Println ( The last city can also be found by: , cities [ len ( cities ) - 1 ]) fmt . Println () // changing values fmt . Println ( Changing the value at cities[0] to Paris... ) cities [ 0 ] = Paris fmt . Println ( The value at cities[0] is: , cities [ 0 ]) }","title":"Full Code"},{"location":"go/basics/array/#running-your-code","text":"Open your terminal and navigate to our folder 1 code/basic/11_array/ Once in the folder type the following command 1 go run array.go","title":"Running your code"},{"location":"go/basics/array/#output","text":"If there are no errors, you should get the output as: Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 The values of array1 are: [0 0 0 0 0] The length of array1 is: 5 Adding values to array1 Now the values of array1 are: [29 17 42 13 56] Reading all the values from array1 using for-range loop... Index: 0 Value: 29 Index: 1 Value: 17 Index: 2 Value: 42 Index: 3 Value: 13 Index: 4 Value: 56 The values of cities array are: [New York Seattle Mumbai Sydney Montreal] Reading values from cities array using index position... The first city is: New York The 3rd city is: Mumbai The last city is: Montreal The last city can also be found by: Montreal Changing the value at cities[0] to Paris... The value at cities[0] is: Paris If for some reason your code isn't working, checkout the github repo.","title":"Output"},{"location":"go/basics/array/#github","text":"Github Repo","title":"Github"},{"location":"go/basics/array/#golang-playground","text":"Golang Playground","title":"Golang Playground"},{"location":"go/basics/array/#limitation","text":"Imagine you data is increasing and now you have 100 cities instead of 5, but the array can only hold 5 values, to overcome this limitation Go ships with a flexible type called as \"Slice\".","title":"Limitation"},{"location":"go/basics/array/#next","text":"We will study slices in depth in the next chapter.","title":"Next"},{"location":"go/basics/array/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/basics/basic-data-types/","text":"Understanding The Basic Data Types In Go Objective Learn the basic data types in Go Data Types For a new programmer, data types sounds geeky enough, but really there isn't much to it, lets see below how it works out. If I ask you, what's your name ? Yours answer would be something like this: 1 My name is Bond, James Bond This is nothing but data type of string , in plain english string is nothing but a collection of characters. Now, if I ask you, how old are you ? You would say something like: 1 28 Since age is a number or a digit, it belongs to the data type of int , int stands for integer which means whole numbers without decimals. Let's get more curious and ask James Bond, you have a nice watch, how much did it cost ? He would say: 1 $ 105.23 Now you see nice it has a decimal value, it is called as a data type of float , float is just another fancy way of saying, its a digit with decimal values. James Bond is getting irritated with our question, so lets ask a final question and wrap it up, lets ask, is it true that you are licensed to kill ? He would say 1 True True is neither a digit or a string, its a condition, so it belongs to the data type of boolean , boolean values can be only True or False. In reality the above data types are of very basic types, Go has much more to it, also Go has different varieties of int, float, etc. But for now lets take it easy, we will see different data types as we progress with our code. Next So now you know what are the basic data types in Go, in the next section we will start using them by declaring something called as variables and constants . Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"04 Understanding Data Types"},{"location":"go/basics/basic-data-types/#understanding-the-basic-czjqqkd0-data-typesczjqqkd1-in-go","text":"","title":"Understanding The Basic  Data Types In Go"},{"location":"go/basics/basic-data-types/#objective","text":"Learn the basic data types in Go","title":"Objective"},{"location":"go/basics/basic-data-types/#data-types","text":"For a new programmer, data types sounds geeky enough, but really there isn't much to it, lets see below how it works out. If I ask you, what's your name ? Yours answer would be something like this: 1 My name is Bond, James Bond This is nothing but data type of string , in plain english string is nothing but a collection of characters. Now, if I ask you, how old are you ? You would say something like: 1 28 Since age is a number or a digit, it belongs to the data type of int , int stands for integer which means whole numbers without decimals. Let's get more curious and ask James Bond, you have a nice watch, how much did it cost ? He would say: 1 $ 105.23 Now you see nice it has a decimal value, it is called as a data type of float , float is just another fancy way of saying, its a digit with decimal values. James Bond is getting irritated with our question, so lets ask a final question and wrap it up, lets ask, is it true that you are licensed to kill ? He would say 1 True True is neither a digit or a string, its a condition, so it belongs to the data type of boolean , boolean values can be only True or False. In reality the above data types are of very basic types, Go has much more to it, also Go has different varieties of int, float, etc. But for now lets take it easy, we will see different data types as we progress with our code.","title":"Data Types"},{"location":"go/basics/basic-data-types/#next","text":"So now you know what are the basic data types in Go, in the next section we will start using them by declaring something called as variables and constants .","title":"Next"},{"location":"go/basics/basic-data-types/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/basics/for_loops/","text":"Understanding For Loops . Objective To understand for loops. Go offers only \"for\" loops for doing repetitive tasks, if you come from some other languages there are no \"while\" or \"do-while\" loops in Go, instead \"for\" loops have a flexible syntax and offers all the looping functions. General syntax is: 1 2 3 for condition { do something } Structure Navigate to our code folder 1 code/basic/ For our program create a new folder '08_for_loops' 1 code/basic/08_for_loops And lets create a file 'for_loops.go' in it, finally the structure would look like this: 1 code/basic/08_for_loops/for_loops.go Code The code will be divided into four parts: 1.) for loops 1 2 3 4 5 6 7 8 9 10 11 12 13 1 package main 2 3 import fmt 4 5 func main () { 6 // Variation 1 - conditional loop 7 num1 := 0 8 fmt . Println ( Starting for loop... ) 9 for i := 0 ; i 11 ; i ++ { 10 fmt . Println ( Num = , num1 ) 11 num1 ++ 12 } 13 fmt . Println () Review Line 9 declared a for loop along with condition 1 for i := 0; i 11; i++ { We initial the variable \"i\" and set it to \"0\", then we say loop till \"i is less than 11\" and after each pass do \"i++\", i.e increment the value of \"i\" by 1. Line 10 prints the value after each pass and on line 11 we increment the value of num 1 2 fmt.Println( Num = , num1) num1++ 2.) for loops 1 2 3 4 5 6 7 8 9 10 11 12 14 // Variation 2 - Infinite loop 15 num2 := 20 16 fmt . Println ( Entering infinite loop... ) 17 for { 18 // break condition 19 if num2 10 { 20 break 21 } 22 fmt . Println ( Num = , num2 ) 23 num2 -- 24 } 25 fmt . Println () Review On line 17 we start a infinite loop, the for loop will keep on executing till it encounters a break condition or runs out of memory 1 for { On line 19 we check for a break condition 1 if num2 10 3.) for loops 1 2 3 4 5 6 7 8 26 // Variation 3 - Optional statements 27 num3 := 20 28 fmt . Println ( Loop with optional statements... ) 29 for num3 = 30 { 30 fmt . Println ( Num = , num3 ) 31 num3 ++ 32 } 33 fmt . Println () Review On line 29 we start a loop with operational statements, the loop will break when it fulfills the condition. 1 for num3 = 30 Note we have declared and initialized \"num3\" on line 27 1 num3 := 20 4.) for loops 1 2 3 4 5 6 7 8 9 10 11 12 34 // Variation 4 - Boolean operators 35 cond := true 36 num4 := 30 37 fmt . Println ( Loops with boolean operator... ) 38 for cond { 39 if num4 = 40 { 40 cond = false 41 } 42 fmt . Println ( Num = , num4 ) 43 num4 ++ 44 } 45 } Review We declare a boolean condition on line 35, and start the loop on line 38 1 for cond In order to break the loop we set the condition on line 39 1 2 3 if num4 = 40 { cond = false } Full Code Complete For-Loop Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 package main import fmt func main () { // Variation 1 - conditional loop num1 := 0 fmt . Println ( Starting for loop... ) for i := 0 ; i 11 ; i ++ { fmt . Println ( Num = , num1 ) num1 ++ } fmt . Println () // Variation 2 - Infinite loop num2 := 20 fmt . Println ( Entering infinite loop... ) for { // break condition if num2 10 { break } fmt . Println ( Num = , num2 ) num2 -- } fmt . Println () // Variation 3 - Optional statements num3 := 20 fmt . Println ( Loop with optional statements... ) for num3 = 30 { fmt . Println ( Num = , num3 ) num3 ++ } fmt . Println () // Variation 4 - Boolean operators cond := true num4 := 30 fmt . Println ( Loops with boolean operator... ) for cond { if num4 = 40 { cond = false } fmt . Println ( Num = , num4 ) num4 ++ } } Run Code Open your terminal and navigate to our folder 1 code/basic/08_for_loops Once in the folder type the following command 1 go run for_loops.go Output Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 Starting for loop... Num = 0 Num = 1 Num = 2 Num = 3 Num = 4 Num = 5 Num = 6 Num = 7 Num = 8 Num = 9 Num = 10 Entering infinite loop... Num = 20 Num = 19 Num = 18 Num = 17 Num = 16 Num = 15 Num = 14 Num = 13 Num = 12 Num = 11 Num = 10 Loop with optional statements... Num = 20 Num = 21 Num = 22 Num = 23 Num = 24 Num = 25 Num = 26 Num = 27 Num = 28 Num = 29 Num = 30 Loops with boolean operator... Num = 30 Num = 31 Num = 32 Num = 33 Num = 34 Num = 35 Num = 36 Num = 37 Num = 38 Num = 39 Num = 40 Note Go ships with one more variant know as \"for - range\", we will study it in the coming chapters. Github Just in case you have some errors with your code, you can check out the code at github repo Github Repo Golang Playground You can also run the code at playground Golang Playground Next In the next chapter we will learn about function declaration. Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"08 For Loops"},{"location":"go/basics/for_loops/#understanding-czjqqkd0-for-loopsczjqqkd1","text":"","title":"Understanding  For Loops."},{"location":"go/basics/for_loops/#objective","text":"To understand for loops. Go offers only \"for\" loops for doing repetitive tasks, if you come from some other languages there are no \"while\" or \"do-while\" loops in Go, instead \"for\" loops have a flexible syntax and offers all the looping functions. General syntax is: 1 2 3 for condition { do something }","title":"Objective"},{"location":"go/basics/for_loops/#structure","text":"Navigate to our code folder 1 code/basic/ For our program create a new folder '08_for_loops' 1 code/basic/08_for_loops And lets create a file 'for_loops.go' in it, finally the structure would look like this: 1 code/basic/08_for_loops/for_loops.go","title":"Structure"},{"location":"go/basics/for_loops/#code","text":"The code will be divided into four parts: 1.) for loops 1 2 3 4 5 6 7 8 9 10 11 12 13 1 package main 2 3 import fmt 4 5 func main () { 6 // Variation 1 - conditional loop 7 num1 := 0 8 fmt . Println ( Starting for loop... ) 9 for i := 0 ; i 11 ; i ++ { 10 fmt . Println ( Num = , num1 ) 11 num1 ++ 12 } 13 fmt . Println () Review Line 9 declared a for loop along with condition 1 for i := 0; i 11; i++ { We initial the variable \"i\" and set it to \"0\", then we say loop till \"i is less than 11\" and after each pass do \"i++\", i.e increment the value of \"i\" by 1. Line 10 prints the value after each pass and on line 11 we increment the value of num 1 2 fmt.Println( Num = , num1) num1++ 2.) for loops 1 2 3 4 5 6 7 8 9 10 11 12 14 // Variation 2 - Infinite loop 15 num2 := 20 16 fmt . Println ( Entering infinite loop... ) 17 for { 18 // break condition 19 if num2 10 { 20 break 21 } 22 fmt . Println ( Num = , num2 ) 23 num2 -- 24 } 25 fmt . Println () Review On line 17 we start a infinite loop, the for loop will keep on executing till it encounters a break condition or runs out of memory 1 for { On line 19 we check for a break condition 1 if num2 10 3.) for loops 1 2 3 4 5 6 7 8 26 // Variation 3 - Optional statements 27 num3 := 20 28 fmt . Println ( Loop with optional statements... ) 29 for num3 = 30 { 30 fmt . Println ( Num = , num3 ) 31 num3 ++ 32 } 33 fmt . Println () Review On line 29 we start a loop with operational statements, the loop will break when it fulfills the condition. 1 for num3 = 30 Note we have declared and initialized \"num3\" on line 27 1 num3 := 20 4.) for loops 1 2 3 4 5 6 7 8 9 10 11 12 34 // Variation 4 - Boolean operators 35 cond := true 36 num4 := 30 37 fmt . Println ( Loops with boolean operator... ) 38 for cond { 39 if num4 = 40 { 40 cond = false 41 } 42 fmt . Println ( Num = , num4 ) 43 num4 ++ 44 } 45 } Review We declare a boolean condition on line 35, and start the loop on line 38 1 for cond In order to break the loop we set the condition on line 39 1 2 3 if num4 = 40 { cond = false }","title":"Code"},{"location":"go/basics/for_loops/#full-code","text":"Complete For-Loop Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 package main import fmt func main () { // Variation 1 - conditional loop num1 := 0 fmt . Println ( Starting for loop... ) for i := 0 ; i 11 ; i ++ { fmt . Println ( Num = , num1 ) num1 ++ } fmt . Println () // Variation 2 - Infinite loop num2 := 20 fmt . Println ( Entering infinite loop... ) for { // break condition if num2 10 { break } fmt . Println ( Num = , num2 ) num2 -- } fmt . Println () // Variation 3 - Optional statements num3 := 20 fmt . Println ( Loop with optional statements... ) for num3 = 30 { fmt . Println ( Num = , num3 ) num3 ++ } fmt . Println () // Variation 4 - Boolean operators cond := true num4 := 30 fmt . Println ( Loops with boolean operator... ) for cond { if num4 = 40 { cond = false } fmt . Println ( Num = , num4 ) num4 ++ } }","title":"Full Code"},{"location":"go/basics/for_loops/#run-code","text":"Open your terminal and navigate to our folder 1 code/basic/08_for_loops Once in the folder type the following command 1 go run for_loops.go","title":"Run Code"},{"location":"go/basics/for_loops/#output","text":"Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 Starting for loop... Num = 0 Num = 1 Num = 2 Num = 3 Num = 4 Num = 5 Num = 6 Num = 7 Num = 8 Num = 9 Num = 10 Entering infinite loop... Num = 20 Num = 19 Num = 18 Num = 17 Num = 16 Num = 15 Num = 14 Num = 13 Num = 12 Num = 11 Num = 10 Loop with optional statements... Num = 20 Num = 21 Num = 22 Num = 23 Num = 24 Num = 25 Num = 26 Num = 27 Num = 28 Num = 29 Num = 30 Loops with boolean operator... Num = 30 Num = 31 Num = 32 Num = 33 Num = 34 Num = 35 Num = 36 Num = 37 Num = 38 Num = 39 Num = 40","title":"Output"},{"location":"go/basics/for_loops/#note","text":"Go ships with one more variant know as \"for - range\", we will study it in the coming chapters.","title":"Note"},{"location":"go/basics/for_loops/#github","text":"Just in case you have some errors with your code, you can check out the code at github repo Github Repo","title":"Github"},{"location":"go/basics/for_loops/#golang-playground","text":"You can also run the code at playground Golang Playground","title":"Golang Playground"},{"location":"go/basics/for_loops/#next","text":"In the next chapter we will learn about function declaration.","title":"Next"},{"location":"go/basics/for_loops/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/basics/functions/","text":"Understanding Functions . Objective To understand functions in Go. Functions are first class citizens in Go, in fact you have already been using functions, we have been declaring \"main\" function and using it from our first program. General syntax is: 1 2 3 func funcName(optional parameters) return parameters { do something } Structure Navigate to our code folder 1 code/basic/ For our program create a new folder '09_functions' 1 code/basic/09_functions/ And lets create a file 'functions.go' in it, finally the structure would look like this: 1 code/basic/09_functions/functions.go Code The code will be divided into four parts: 1.) Functions 1 2 3 4 5 6 7 8 9 10 11 1 package main 2 3 import fmt 4 5 // sayHello prints Hello, Octy! 6 func sayHello () { 7 fmt . Println ( In func sayHello()... ) 8 fmt . Println ( Hello, Octy! ) 9 fmt . Println () 10 } 11 Review Line 6 defines a function \"sayHello\" which prints \"Hello, Octy!\" on screen 1 func sayHello() 2.) Functions 1 2 3 4 5 6 7 12 // function with passing values 13 func sayHelloTo ( name string ) { 14 fmt . Println ( In func sayHelloTo()... ) 15 fmt . Println ( Hello, , name ) 16 fmt . Println () 17 } 18 Review On line 13 we declare a function \"sayHelloTo\" with accepts a parameter. 1 func sayHelloTo(name string) sayHelloTo accepts a string \"name\" as a parameter and then print it on line 15. 3.) Functions 1 2 3 4 5 6 7 8 9 10 19 // function with return values 20 func printNums ( n int ) error { 21 fmt . Println ( In func printNums()... ) 22 var err error 23 for i := 0 ; i = n ; i ++ { 24 _ , err = fmt . Println ( i ) 25 } 26 return err 27 } 28 Review Line 20 we define a function \"printNums\" with accepts a parameter and returns a parameter of type \"error\". 1 func printNums(n int) error On line 22 we define a variable \"err\" of type \"error\", till now we have seen data types of integer, float, boolean, string, similarly Go offers a custom type \"error\". 1 var err error Line 24 is a little special, Println() returns two values, \"number of bytes written\" and an \"error\", as we don't want number of bytes written we use a underscore \"_\", Go compiler ignores underscore and throws away its value. 1 _, err = fmt.Println(i) We catch the error value in the variable \"err\" and return it on line 26. 1 return err 4.) Functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 29 // main function 30 func main () { 31 fmt . Println ( In func main() ) 32 fmt . Println ( Now calling func sayHello()... ) 33 fmt . Println () 34 // calling function sayHello() 35 sayHello () 36 // calling a function with passing values 37 name := Gopher 38 sayHelloTo ( name ) 39 // calling a function with return parameters 40 err := printNums ( 10 ) 41 if err == nil { 42 fmt . Println ( There are no errors! ) 43 } else { 44 fmt . Println ( Error with printing: , err ) 45 } 46 } Review We call individual functions on lines 35, 38 40. 1 2 3 sayHello() sayHelloTo(name) We pass a value \"name\" along with the function. 1 err := printNums(10) We call printNums along with a value \"10\" and assign it to the variable \"err\", the return error gets stored in the variable \"err\" Full Code Complete Functions Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package main import fmt // sayHello prints Hello, Octy! func sayHello () { fmt . Println ( In func sayHello()... ) fmt . Println ( Hello, Octy! ) fmt . Println () } // function with passing values func sayHelloTo ( name string ) { fmt . Println ( In func sayHelloTo()... ) fmt . Println ( Hello, , name ) fmt . Println () } // function with return values func printNums ( n int ) error { fmt . Println ( In func printNums()... ) var err error for i := 0 ; i = n ; i ++ { _ , err = fmt . Println ( i ) } return err } // main function func main () { fmt . Println ( In func main() ) fmt . Println ( Now calling func sayHello()... ) fmt . Println () // calling function sayHello() sayHello () // calling a function with passing values name := Gopher sayHelloTo ( name ) // calling a function with return parameters err := printNums ( 10 ) if err == nil { fmt . Println ( There are no errors! ) } else { fmt . Println ( Error with printing: , err ) } } Running your code Open your terminal and navigate to our folder 1 code/basic/09_functions/ Once in the folder type the following command 1 go run main.go Output Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 In func main() Now calling func sayHello()... In func sayHello()... Hello, Octy! In func sayHelloTo()... Hello, Gopher In func printNums()... 0 1 2 3 4 5 6 7 8 9 10 There are no errors! Github Just in case you have some errors with your code, you can check out the code at github repo Github Repo Golang Playground You can also run the code at playground Golang Playground Next In the next chapter we will learn about packages in Go. Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"09 Function"},{"location":"go/basics/functions/#understanding-czjqqkd0-functionsczjqqkd1","text":"","title":"Understanding  Functions."},{"location":"go/basics/functions/#objective","text":"To understand functions in Go. Functions are first class citizens in Go, in fact you have already been using functions, we have been declaring \"main\" function and using it from our first program. General syntax is: 1 2 3 func funcName(optional parameters) return parameters { do something }","title":"Objective"},{"location":"go/basics/functions/#structure","text":"Navigate to our code folder 1 code/basic/ For our program create a new folder '09_functions' 1 code/basic/09_functions/ And lets create a file 'functions.go' in it, finally the structure would look like this: 1 code/basic/09_functions/functions.go","title":"Structure"},{"location":"go/basics/functions/#code","text":"The code will be divided into four parts: 1.) Functions 1 2 3 4 5 6 7 8 9 10 11 1 package main 2 3 import fmt 4 5 // sayHello prints Hello, Octy! 6 func sayHello () { 7 fmt . Println ( In func sayHello()... ) 8 fmt . Println ( Hello, Octy! ) 9 fmt . Println () 10 } 11 Review Line 6 defines a function \"sayHello\" which prints \"Hello, Octy!\" on screen 1 func sayHello() 2.) Functions 1 2 3 4 5 6 7 12 // function with passing values 13 func sayHelloTo ( name string ) { 14 fmt . Println ( In func sayHelloTo()... ) 15 fmt . Println ( Hello, , name ) 16 fmt . Println () 17 } 18 Review On line 13 we declare a function \"sayHelloTo\" with accepts a parameter. 1 func sayHelloTo(name string) sayHelloTo accepts a string \"name\" as a parameter and then print it on line 15. 3.) Functions 1 2 3 4 5 6 7 8 9 10 19 // function with return values 20 func printNums ( n int ) error { 21 fmt . Println ( In func printNums()... ) 22 var err error 23 for i := 0 ; i = n ; i ++ { 24 _ , err = fmt . Println ( i ) 25 } 26 return err 27 } 28 Review Line 20 we define a function \"printNums\" with accepts a parameter and returns a parameter of type \"error\". 1 func printNums(n int) error On line 22 we define a variable \"err\" of type \"error\", till now we have seen data types of integer, float, boolean, string, similarly Go offers a custom type \"error\". 1 var err error Line 24 is a little special, Println() returns two values, \"number of bytes written\" and an \"error\", as we don't want number of bytes written we use a underscore \"_\", Go compiler ignores underscore and throws away its value. 1 _, err = fmt.Println(i) We catch the error value in the variable \"err\" and return it on line 26. 1 return err 4.) Functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 29 // main function 30 func main () { 31 fmt . Println ( In func main() ) 32 fmt . Println ( Now calling func sayHello()... ) 33 fmt . Println () 34 // calling function sayHello() 35 sayHello () 36 // calling a function with passing values 37 name := Gopher 38 sayHelloTo ( name ) 39 // calling a function with return parameters 40 err := printNums ( 10 ) 41 if err == nil { 42 fmt . Println ( There are no errors! ) 43 } else { 44 fmt . Println ( Error with printing: , err ) 45 } 46 } Review We call individual functions on lines 35, 38 40. 1 2 3 sayHello() sayHelloTo(name) We pass a value \"name\" along with the function. 1 err := printNums(10) We call printNums along with a value \"10\" and assign it to the variable \"err\", the return error gets stored in the variable \"err\"","title":"Code"},{"location":"go/basics/functions/#full-code","text":"Complete Functions Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package main import fmt // sayHello prints Hello, Octy! func sayHello () { fmt . Println ( In func sayHello()... ) fmt . Println ( Hello, Octy! ) fmt . Println () } // function with passing values func sayHelloTo ( name string ) { fmt . Println ( In func sayHelloTo()... ) fmt . Println ( Hello, , name ) fmt . Println () } // function with return values func printNums ( n int ) error { fmt . Println ( In func printNums()... ) var err error for i := 0 ; i = n ; i ++ { _ , err = fmt . Println ( i ) } return err } // main function func main () { fmt . Println ( In func main() ) fmt . Println ( Now calling func sayHello()... ) fmt . Println () // calling function sayHello() sayHello () // calling a function with passing values name := Gopher sayHelloTo ( name ) // calling a function with return parameters err := printNums ( 10 ) if err == nil { fmt . Println ( There are no errors! ) } else { fmt . Println ( Error with printing: , err ) } }","title":"Full Code"},{"location":"go/basics/functions/#running-your-code","text":"Open your terminal and navigate to our folder 1 code/basic/09_functions/ Once in the folder type the following command 1 go run main.go","title":"Running your code"},{"location":"go/basics/functions/#output","text":"Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 In func main() Now calling func sayHello()... In func sayHello()... Hello, Octy! In func sayHelloTo()... Hello, Gopher In func printNums()... 0 1 2 3 4 5 6 7 8 9 10 There are no errors!","title":"Output"},{"location":"go/basics/functions/#github","text":"Just in case you have some errors with your code, you can check out the code at github repo Github Repo","title":"Github"},{"location":"go/basics/functions/#golang-playground","text":"You can also run the code at playground Golang Playground","title":"Golang Playground"},{"location":"go/basics/functions/#next","text":"In the next chapter we will learn about packages in Go.","title":"Next"},{"location":"go/basics/functions/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/basics/hello-world-understand/","text":"Understanding \"Hello, World!\" Program. Objective Understanding the Hello World program line-by-line Code Hello World 1 2 3 4 5 6 7 1 package main 2 3 import fmt 4 5 func main () { 6 fmt . Println ( Hello, World! ) 7 } Code Review Now its time to dive in and understand the code Line 1 - 1 package main Declares that this file belongs to the main package, in golang all the files are arranged in packages, we have a entire chapter dedicated to Packages in future, for now remmember all files at your project directory level belong to package main. Line 3 - 1 import fmt Here we say, they golang I want to import a package called as \"fmt\", \"fmt\" stands for \"format\". \"fmt\" belongs to the golang standard library, means that the Go authors have already written it for you. You can simply import then and use all the code written by experts. Documentation for \"fmt\" can be found here \"fmt\" exposes a lot of functionality to us which we use in the line 6. Line 5 - 1 func main () { This is the start or entry point for your code, the compiler will automatically check if func main() is present or not and start the program from there, it is generally mentioned as 1 2 main.main [package].[function] means \"main\" function in \"main\" package Line 6 - 1 fmt.Println( Hello, World!) Here we use Println function defined in the package \"fmt\" for printing out \"Hello, World!\" on the screen. Now, you can see how we can use functionality written in packages and use it for our ease. Line 7 - 1 } Closes the main function, this symbolizes that main function ends here. Aside Wow.. you have now learned your first Go program, even if all of the above doesn't make sense to you right now, don't worry ! You will soon be comfortable with all of that as we progress and write more code. As a beginner, you would want to quit when you don't understand anything, my advise, don't quit just move along and later come back to topics which you didn't understand. Learning code takes patience and persistence, fasten your seat belts and keep learning. Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"02 Understanding Hello World"},{"location":"go/basics/hello-world-understand/#understanding-czjqqkd0-hello-worldczjqqkd1-program","text":"","title":"Understanding  \"Hello, World!\" Program."},{"location":"go/basics/hello-world-understand/#objective","text":"Understanding the Hello World program line-by-line","title":"Objective"},{"location":"go/basics/hello-world-understand/#code","text":"Hello World 1 2 3 4 5 6 7 1 package main 2 3 import fmt 4 5 func main () { 6 fmt . Println ( Hello, World! ) 7 }","title":"Code"},{"location":"go/basics/hello-world-understand/#code-review","text":"Now its time to dive in and understand the code Line 1 - 1 package main Declares that this file belongs to the main package, in golang all the files are arranged in packages, we have a entire chapter dedicated to Packages in future, for now remmember all files at your project directory level belong to package main. Line 3 - 1 import fmt Here we say, they golang I want to import a package called as \"fmt\", \"fmt\" stands for \"format\". \"fmt\" belongs to the golang standard library, means that the Go authors have already written it for you. You can simply import then and use all the code written by experts. Documentation for \"fmt\" can be found here \"fmt\" exposes a lot of functionality to us which we use in the line 6. Line 5 - 1 func main () { This is the start or entry point for your code, the compiler will automatically check if func main() is present or not and start the program from there, it is generally mentioned as 1 2 main.main [package].[function] means \"main\" function in \"main\" package Line 6 - 1 fmt.Println( Hello, World!) Here we use Println function defined in the package \"fmt\" for printing out \"Hello, World!\" on the screen. Now, you can see how we can use functionality written in packages and use it for our ease. Line 7 - 1 } Closes the main function, this symbolizes that main function ends here.","title":"Code Review"},{"location":"go/basics/hello-world-understand/#aside","text":"Wow.. you have now learned your first Go program, even if all of the above doesn't make sense to you right now, don't worry ! You will soon be comfortable with all of that as we progress and write more code. As a beginner, you would want to quit when you don't understand anything, my advise, don't quit just move along and later come back to topics which you didn't understand. Learning code takes patience and persistence, fasten your seat belts and keep learning.","title":"Aside"},{"location":"go/basics/hello-world-understand/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/basics/hello-world/","text":"Writing a \"Hello, World!\" program. Objective Write a program which prints \"Hello, World!\" on the screen. Structure Let's create a folder called 'code' anywhere on your machine and we will put all our Go code in it. Inside the 'code' folder lets create one more folder for basic tutorials 1 code/basic/ For our first program create a new folder '01_hello_world' 1 code/basic/01_hello_world And lets create a file 'hello_world.go' in it, finally the structure would look like this: 1 code/basic/01_hello_world/hello_world.go Code Write the code as shown below, while you can simply copy and paste, its better if you write everything on your own. Don't worry if you code won't work, only then copy and paste the code Hello World 1 2 3 4 5 6 7 1 package main 2 3 import fmt 4 5 func main () { 6 fmt . Println ( Hello, World! ) 7 } Running your code Open your terminal and navigate to our folder 1 code/01_hello_world/hello_world.go Once in the folder type the following command 1 go run hello_world.go Build Instead of just running let's try to build our code by compiling it to binary. Instead of \"go run\" type the following command 1 go build hello_world.go If you are running on a unix based system including mac OSx, you can run the binary by typing 1 ./hello_world Output If there are no errors, you should get the output as: Output 1 Hello, World! If for some reason your code isn't working, checkout the golang playground or github links in the following section. Github Github Repo That's it, Congratulations ! You just wrote your first Go program. Golang Playground Golang has a online sandbox environment for running your Go programs, which can be accessed on Golang Playground I will be posting all the playground links for all the code we write, this way you can run them online and compare with your code. Hello World On Playground Click on the below link: Hello World Next If you haven't understood anything what you wrote, no worries, you aren't expected to understand it just yet ! In the next section we will understand everything line-by-line. Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"01 Hello World"},{"location":"go/basics/hello-world/#writing-a-czjqqkd0-hello-worldczjqqkd1-program","text":"","title":"Writing a  \"Hello, World!\" program."},{"location":"go/basics/hello-world/#objective","text":"Write a program which prints \"Hello, World!\" on the screen.","title":"Objective"},{"location":"go/basics/hello-world/#structure","text":"Let's create a folder called 'code' anywhere on your machine and we will put all our Go code in it. Inside the 'code' folder lets create one more folder for basic tutorials 1 code/basic/ For our first program create a new folder '01_hello_world' 1 code/basic/01_hello_world And lets create a file 'hello_world.go' in it, finally the structure would look like this: 1 code/basic/01_hello_world/hello_world.go","title":"Structure"},{"location":"go/basics/hello-world/#code","text":"Write the code as shown below, while you can simply copy and paste, its better if you write everything on your own. Don't worry if you code won't work, only then copy and paste the code Hello World 1 2 3 4 5 6 7 1 package main 2 3 import fmt 4 5 func main () { 6 fmt . Println ( Hello, World! ) 7 }","title":"Code"},{"location":"go/basics/hello-world/#running-your-code","text":"Open your terminal and navigate to our folder 1 code/01_hello_world/hello_world.go Once in the folder type the following command 1 go run hello_world.go","title":"Running your code"},{"location":"go/basics/hello-world/#build","text":"Instead of just running let's try to build our code by compiling it to binary. Instead of \"go run\" type the following command 1 go build hello_world.go If you are running on a unix based system including mac OSx, you can run the binary by typing 1 ./hello_world","title":"Build"},{"location":"go/basics/hello-world/#output","text":"If there are no errors, you should get the output as: Output 1 Hello, World! If for some reason your code isn't working, checkout the golang playground or github links in the following section.","title":"Output"},{"location":"go/basics/hello-world/#github","text":"Github Repo That's it, Congratulations ! You just wrote your first Go program.","title":"Github"},{"location":"go/basics/hello-world/#golang-playground","text":"Golang has a online sandbox environment for running your Go programs, which can be accessed on Golang Playground I will be posting all the playground links for all the code we write, this way you can run them online and compare with your code. Hello World On Playground Click on the below link: Hello World","title":"Golang Playground"},{"location":"go/basics/hello-world/#next","text":"If you haven't understood anything what you wrote, no worries, you aren't expected to understand it just yet ! In the next section we will understand everything line-by-line.","title":"Next"},{"location":"go/basics/hello-world/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/basics/if-else/","text":"Conditions if/else . Objective To understand if/else conditions. If/else conditions are of very fundamental importance to programming and are present in all the programming languages. The intent of condition is very simple 1 2 3 4 5 if condition { do something } else { do another thing } Structure Navigate to our code folder 1 code/basic/ For our program create a new folder '07_if_else' 1 code/basic/07_if_else And lets create a file 'if_else.go' in it, finally the structure would look like this: 1 code/basic/07_if_else/if_else.go Code The code will be divided into two parts 1.) if/else condition go 1 package main 2 3 import \"fmt\" 4 5 func main() { 6 d := \"Dog\" 7 c := \"Cat\" 8 9 // checking the value of variables 10 if d == \"Dog\" { 11 fmt.Println(\"Woff\") 12 } else { 13 fmt.Println(\"I don't know which animal!\") 14 } 15 Review on line 10 we check if the value of the variable \"d\" is equal to \"Dog\" 1 if d == Dog If the condition is true then we print out \"Woff\" 1 fmt.Println( Woff ) If the condition is false, we print \"I don't know which animal\" 1 fmt.Println( I don t know which animal! ) 2.) If/else statements can also be chained if you have multiple conditions if/else condition 1 2 3 4 5 6 7 8 9 16 // You can also chain if / else conditions 17 if c == monkey { 18 fmt . Println ( I am a monkey. ) 19 } else if c == Dog { 20 fmt . Println ( I am a dog. ) 21 } else if c == Cat { 22 fmt . Println ( Meoww ) 23 } 24 } Review On line 17 we check if value of the variable \"c\" is \"monkey\", if the conditions evaluates to true then we print \"I am a monkey\" 1 if c == monkey If it evaluates to false then we check it once again if it contains the value of \"Dog\" 1 if c == Dog Since, this also evaluates to false, we check for the next condition 1 if c == Cat As it evaluates to true, we print out \"Meoww\" on the screen 1 fmt.Println( Meoww ) In case if \"c\" does not evaluate to true in any of the case, nothing will be printed. Running your code Open your terminal and navigate to our folder 1 ccode/basic/07_if_else Once in the folder type the following command 1 go run if_else.go Output Output 1 2 Woff Meoww Note Strings in Go are case sensitive, \"monkey\" and \"Monkey\" are evaluated differently, so be sure of using the right case when checking for evaluation. Github Just in case you have some errors with your code, you can check out the code at github repo Github Repo Golang Playground You can also run the code at playground Golang Playground Next We will see for loops. Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"07 Condition - if/else"},{"location":"go/basics/if-else/#conditions-czjqqkd0-ifelseczjqqkd1","text":"","title":"Conditions  if/else."},{"location":"go/basics/if-else/#objective","text":"To understand if/else conditions. If/else conditions are of very fundamental importance to programming and are present in all the programming languages. The intent of condition is very simple 1 2 3 4 5 if condition { do something } else { do another thing }","title":"Objective"},{"location":"go/basics/if-else/#structure","text":"Navigate to our code folder 1 code/basic/ For our program create a new folder '07_if_else' 1 code/basic/07_if_else And lets create a file 'if_else.go' in it, finally the structure would look like this: 1 code/basic/07_if_else/if_else.go","title":"Structure"},{"location":"go/basics/if-else/#code","text":"The code will be divided into two parts 1.) if/else condition go 1 package main 2 3 import \"fmt\" 4 5 func main() { 6 d := \"Dog\" 7 c := \"Cat\" 8 9 // checking the value of variables 10 if d == \"Dog\" { 11 fmt.Println(\"Woff\") 12 } else { 13 fmt.Println(\"I don't know which animal!\") 14 } 15 Review on line 10 we check if the value of the variable \"d\" is equal to \"Dog\" 1 if d == Dog If the condition is true then we print out \"Woff\" 1 fmt.Println( Woff ) If the condition is false, we print \"I don't know which animal\" 1 fmt.Println( I don t know which animal! ) 2.) If/else statements can also be chained if you have multiple conditions if/else condition 1 2 3 4 5 6 7 8 9 16 // You can also chain if / else conditions 17 if c == monkey { 18 fmt . Println ( I am a monkey. ) 19 } else if c == Dog { 20 fmt . Println ( I am a dog. ) 21 } else if c == Cat { 22 fmt . Println ( Meoww ) 23 } 24 } Review On line 17 we check if value of the variable \"c\" is \"monkey\", if the conditions evaluates to true then we print \"I am a monkey\" 1 if c == monkey If it evaluates to false then we check it once again if it contains the value of \"Dog\" 1 if c == Dog Since, this also evaluates to false, we check for the next condition 1 if c == Cat As it evaluates to true, we print out \"Meoww\" on the screen 1 fmt.Println( Meoww ) In case if \"c\" does not evaluate to true in any of the case, nothing will be printed.","title":"Code"},{"location":"go/basics/if-else/#running-your-code","text":"Open your terminal and navigate to our folder 1 ccode/basic/07_if_else Once in the folder type the following command 1 go run if_else.go","title":"Running your code"},{"location":"go/basics/if-else/#output","text":"Output 1 2 Woff Meoww","title":"Output"},{"location":"go/basics/if-else/#note","text":"Strings in Go are case sensitive, \"monkey\" and \"Monkey\" are evaluated differently, so be sure of using the right case when checking for evaluation.","title":"Note"},{"location":"go/basics/if-else/#github","text":"Just in case you have some errors with your code, you can check out the code at github repo Github Repo","title":"Github"},{"location":"go/basics/if-else/#golang-playground","text":"You can also run the code at playground Golang Playground","title":"Golang Playground"},{"location":"go/basics/if-else/#next","text":"We will see for loops.","title":"Next"},{"location":"go/basics/if-else/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/basics/introduction/","text":"Introduction In this section we will understand language syntax, instead of just reading theory, lets dive into code and I will explain everything as we start writing our programs. Start with the next section to write a \"Hello, World!\" program in Go.","title":"Introduction"},{"location":"go/basics/introduction/#introduction","text":"In this section we will understand language syntax, instead of just reading theory, lets dive into code and I will explain everything as we start writing our programs. Start with the next section to write a \"Hello, World!\" program in Go.","title":"Introduction"},{"location":"go/basics/map/","text":"Understanding Data Structure of Type Map . Objective Understanding Map's in Go. Imagine yourself creating a team of Avengers and need to add contact details of all your Super Hero's, you essentially would require a phone number be associated with only one Super Hero, this can be easily done using 'Maps' in Go. It is also known as 'Hash Table' in other programming languages and these offer faster lookups, adds and deletes. Structure Navigate to our code folder 1 code/basic/ For our program create a new folder '13_map' 1 code/basic/13_map/ And lets create a file 'maps.go' in it, finally the structure would look like this: 1 code/basic/13_map/maps.go Declaration Syntax Declaration initialization method 1 mapName := map[KeyType]ValueType With built-in function make() 1 map := make(map[KeyType]ValueType) Code We will write the code in 2 parts: 1.) part-1 maps.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 1 package main 2 3 import fmt 4 5 func main () { 6 // Let s make contact list with names phone numbers 7 // Initialize a map contactList 8 contactList := make ( map [ string ] int ) 9 // Adding values to map 10 contactList [ Iron Man ] = 878111222 11 contactList [ Thor ] = 121131141 12 contactList [ Batman ] = 483910138 13 contactList [ Spider Man ] = 478282929 14 15 // print out the map 16 for key , value := range contactList { 17 fmt . Printf ( Key = %s\\tValue = %d\\n , key , value ) 18 } 19 fmt . Println ( ) 20 // Iron man decides to change his number 21 contactList [ Iron Man ] = 333333333 22 fmt . Printf ( The new contact no of Iron Man is: %d\\n , contactList [ Iron Man ]) 23 fmt . Println ( ) 24 // Now Hulk wants to join the team 25 contactList [ Hulk ] = 911831925 26 27 // New team is 28 for key , value := range contactList { 29 fmt . Printf ( Key = %s\\tValue = %d\\n , key , value ) 30 } 31 Review On line 8 we declare a 'map' and initialize using 'make' 1 contactList := make(map[string]int) We create a map with 'key' of type 'string' and 'value' of type 'int', we want to map the name of the super hero along with their contact number. We can add values to map as done from line 10 to 14. 1 2 3 4 contactList[ Iron Man ] = 878111222 contactList[ Thor ] = 121131141 contactList[ Batman ] = 483910138 contactList[ Spider Man ] = 478282929 Map can also be declared and initialized using the following syntax 1 2 3 4 5 6 contactList := map[string]int { Iron Man : 878111222, Thor : 121131141, Batman : 483910138, Spider Man : 478282929, } On line 16 we print out the map. We can also change the values of the key, on line 21 we change the number of Iron Man. 1 contactList[ Iron Man ] = 333333333 We can also add new super hero on line 25 1 contactList[ Hulk ] = 911831925 2.) part-2 maps.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 32 /* 33 Operators in maps 34 */ 35 // Length of our super hero team 36 fmt . Println ( Length: , len ( contactList )) 37 38 // Spider man is not performing well and we need to delete him 39 delete ( contactList , Spider Man ) 40 fmt . Println ( Length: , len ( contactList )) 41 42 // Checking if Spider Man is deleted or not 43 _ , ok := contactList [ Spider Man ] 44 if ! ok { 45 fmt . Println ( Spider Man is deleted ) 46 } 47 } Review On line 36 we check the length of map. 1 fmt.Println( Length: , len(contactList)) We can delete values from our map using 'delete' as on line 39. 1 delete(contactList, Spider Man ) On line 43 we check if the key is present in the map or not, it returns a boolean value, 'true' if the key is present and 'false' if not found. 1 _, ok := contactList[ Spider Man ] Full Code slice.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 package main import fmt func main () { // Let s make contact list with names phone numbers // Initialize a map contactList contactList := make ( map [ string ] int ) // Adding values to map contactList [ Iron Man ] = 878111222 contactList [ Thor ] = 121131141 contactList [ Batman ] = 483910138 contactList [ Spider Man ] = 478282929 // print out the map for key , value := range contactList { fmt . Printf ( Key = %s\\tValue = %d\\n , key , value ) } fmt . Println ( ) // Iron man decides to change his number contactList [ Iron Man ] = 333333333 fmt . Printf ( The new contact no of Iron Man is: %d\\n , contactList [ Iron Man ]) fmt . Println ( ) // Now Hulk wants to join the team contactList [ Hulk ] = 911831925 // New team is for key , value := range contactList { fmt . Printf ( Key = %s\\tValue = %d\\n , key , value ) } /* Operators in maps */ // Length of our super hero team fmt . Println ( Length: , len ( contactList )) // Siper man is not performing well and we need to delete him delete ( contactList , Spider Man ) fmt . Println ( Length: , len ( contactList )) // Checking if Siper Man is deleted or not _ , ok := contactList [ Spider Man ] if ! ok { fmt . Println ( Spider Man is deleted ) } } Running your code Open your terminal and navigate to our folder 1 code/basic/13_map/ Once in the folder type the following command 1 go run maps.go Output If there are no errors, you should get the output as: Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Key = Iron Man Value = 878111222 Key = Thor Value = 121131141 Key = Batman Value = 483910138 Key = Spider Man Value = 478282929 The new contact no of Iron Man is: 333333333 Key = Iron Man Value = 333333333 Key = Thor Value = 121131141 Key = Batman Value = 483910138 Key = Spider Man Value = 478282929 Key = Hulk Value = 911831925 Length: 5 Length: 4 Spider Man is deleted If for some reason your code isn't working, checkout the github repo or playground. Github Github Repo Golang Playground Golang Playground Next In the next chapter we will study Struct . Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"13 Map"},{"location":"go/basics/map/#understanding-data-structure-of-type-czjqqkd0-mapczjqqkd1","text":"","title":"Understanding Data Structure of Type  Map."},{"location":"go/basics/map/#objective","text":"Understanding Map's in Go. Imagine yourself creating a team of Avengers and need to add contact details of all your Super Hero's, you essentially would require a phone number be associated with only one Super Hero, this can be easily done using 'Maps' in Go. It is also known as 'Hash Table' in other programming languages and these offer faster lookups, adds and deletes.","title":"Objective"},{"location":"go/basics/map/#structure","text":"Navigate to our code folder 1 code/basic/ For our program create a new folder '13_map' 1 code/basic/13_map/ And lets create a file 'maps.go' in it, finally the structure would look like this: 1 code/basic/13_map/maps.go","title":"Structure"},{"location":"go/basics/map/#declaration","text":"Syntax Declaration initialization method 1 mapName := map[KeyType]ValueType With built-in function make() 1 map := make(map[KeyType]ValueType)","title":"Declaration"},{"location":"go/basics/map/#code","text":"We will write the code in 2 parts: 1.) part-1 maps.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 1 package main 2 3 import fmt 4 5 func main () { 6 // Let s make contact list with names phone numbers 7 // Initialize a map contactList 8 contactList := make ( map [ string ] int ) 9 // Adding values to map 10 contactList [ Iron Man ] = 878111222 11 contactList [ Thor ] = 121131141 12 contactList [ Batman ] = 483910138 13 contactList [ Spider Man ] = 478282929 14 15 // print out the map 16 for key , value := range contactList { 17 fmt . Printf ( Key = %s\\tValue = %d\\n , key , value ) 18 } 19 fmt . Println ( ) 20 // Iron man decides to change his number 21 contactList [ Iron Man ] = 333333333 22 fmt . Printf ( The new contact no of Iron Man is: %d\\n , contactList [ Iron Man ]) 23 fmt . Println ( ) 24 // Now Hulk wants to join the team 25 contactList [ Hulk ] = 911831925 26 27 // New team is 28 for key , value := range contactList { 29 fmt . Printf ( Key = %s\\tValue = %d\\n , key , value ) 30 } 31 Review On line 8 we declare a 'map' and initialize using 'make' 1 contactList := make(map[string]int) We create a map with 'key' of type 'string' and 'value' of type 'int', we want to map the name of the super hero along with their contact number. We can add values to map as done from line 10 to 14. 1 2 3 4 contactList[ Iron Man ] = 878111222 contactList[ Thor ] = 121131141 contactList[ Batman ] = 483910138 contactList[ Spider Man ] = 478282929 Map can also be declared and initialized using the following syntax 1 2 3 4 5 6 contactList := map[string]int { Iron Man : 878111222, Thor : 121131141, Batman : 483910138, Spider Man : 478282929, } On line 16 we print out the map. We can also change the values of the key, on line 21 we change the number of Iron Man. 1 contactList[ Iron Man ] = 333333333 We can also add new super hero on line 25 1 contactList[ Hulk ] = 911831925 2.) part-2 maps.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 32 /* 33 Operators in maps 34 */ 35 // Length of our super hero team 36 fmt . Println ( Length: , len ( contactList )) 37 38 // Spider man is not performing well and we need to delete him 39 delete ( contactList , Spider Man ) 40 fmt . Println ( Length: , len ( contactList )) 41 42 // Checking if Spider Man is deleted or not 43 _ , ok := contactList [ Spider Man ] 44 if ! ok { 45 fmt . Println ( Spider Man is deleted ) 46 } 47 } Review On line 36 we check the length of map. 1 fmt.Println( Length: , len(contactList)) We can delete values from our map using 'delete' as on line 39. 1 delete(contactList, Spider Man ) On line 43 we check if the key is present in the map or not, it returns a boolean value, 'true' if the key is present and 'false' if not found. 1 _, ok := contactList[ Spider Man ]","title":"Code"},{"location":"go/basics/map/#full-code","text":"slice.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 package main import fmt func main () { // Let s make contact list with names phone numbers // Initialize a map contactList contactList := make ( map [ string ] int ) // Adding values to map contactList [ Iron Man ] = 878111222 contactList [ Thor ] = 121131141 contactList [ Batman ] = 483910138 contactList [ Spider Man ] = 478282929 // print out the map for key , value := range contactList { fmt . Printf ( Key = %s\\tValue = %d\\n , key , value ) } fmt . Println ( ) // Iron man decides to change his number contactList [ Iron Man ] = 333333333 fmt . Printf ( The new contact no of Iron Man is: %d\\n , contactList [ Iron Man ]) fmt . Println ( ) // Now Hulk wants to join the team contactList [ Hulk ] = 911831925 // New team is for key , value := range contactList { fmt . Printf ( Key = %s\\tValue = %d\\n , key , value ) } /* Operators in maps */ // Length of our super hero team fmt . Println ( Length: , len ( contactList )) // Siper man is not performing well and we need to delete him delete ( contactList , Spider Man ) fmt . Println ( Length: , len ( contactList )) // Checking if Siper Man is deleted or not _ , ok := contactList [ Spider Man ] if ! ok { fmt . Println ( Spider Man is deleted ) } }","title":"Full Code"},{"location":"go/basics/map/#running-your-code","text":"Open your terminal and navigate to our folder 1 code/basic/13_map/ Once in the folder type the following command 1 go run maps.go","title":"Running your code"},{"location":"go/basics/map/#output","text":"If there are no errors, you should get the output as: Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Key = Iron Man Value = 878111222 Key = Thor Value = 121131141 Key = Batman Value = 483910138 Key = Spider Man Value = 478282929 The new contact no of Iron Man is: 333333333 Key = Iron Man Value = 333333333 Key = Thor Value = 121131141 Key = Batman Value = 483910138 Key = Spider Man Value = 478282929 Key = Hulk Value = 911831925 Length: 5 Length: 4 Spider Man is deleted If for some reason your code isn't working, checkout the github repo or playground.","title":"Output"},{"location":"go/basics/map/#github","text":"Github Repo","title":"Github"},{"location":"go/basics/map/#golang-playground","text":"Golang Playground","title":"Golang Playground"},{"location":"go/basics/map/#next","text":"In the next chapter we will study Struct .","title":"Next"},{"location":"go/basics/map/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/basics/packages/","text":"Understanding Packages . Objective To understand packages in Go. You have already used packages, remember we imported \"fmt\" package and used Println() function in it. Packages help us in organizing our code, we can group together related functions in a package. You can create multiple functions and files inside a package. Note, that there can be only one func main() throughout your project, as main() is the starting point in any standalone application. Structure Navigate to our code folder 1 code/basic/ For our program create a new folder '10_packages' 1 code/basic/10_packages/ And lets create a file 'main.go' in it, finally the structure would look like this: 1 code/basic/10_packages/main.go Declaring Packages We will be creating a custom package called as \"greeting\" and have a couple of functions in it, but we first need to declare a package. Navigate to our directory 1 code/basic/10_packages/ For declaring a package create a folder named \"greeting\", now the structure would be 1 code/basic/10_packages/greeting Inside the \"greeting\" folder create a file \"greet.go\", we will write our functions inside \"greet.go\" and call it from main() as required. 1 code/basic/10_packages/greeting/greet.go Now our structure would look like Code A) First let us write the code for our custom package \"greeting\" Open greet.go from: 1 code/basic/10_packages/greeting/greet.go We will write the code in 4 parts: 1.) Part-1 greet.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 package greeting 2 3 // The above statement declares that this file belong to 4 // the package greeting 5 6 // import other packages 7 import fmt 8 9 // GoodMorning - Note that the name of our function starts with a capital alphabet, 10 // capital alphabet denotes that the function is exported or visible outside 11 // the package. 12 // Now you can understand why Println() has a capital letter in the beginning ! 13 func GoodMorning () { 14 fmt . Println ( Good Morning, Octallium! ) 15 fmt . Println () 16 } 17 Review On line 1 we declare that this file belongs to the package \"greeting\", note that the package name and the parent directory name has to be the same. 1 package greeting On line 13 we declare a function \"GoodMorning\" which prints out \"Good Morning, Octallium!\" on the screen 1 func GoodMorning() Note that the first alphabet is capital, it symbolizes that the function is exported or visible to other packages, we will call it from our main(). 2.) Part-2 greet.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 18 // goodAfterNoon starts with a lowercase alphabet, means that this function is not 19 // exported, and can only be accessed within the package. 20 // Calling goodAfterNoon from another package will result in an error 21 func goodAfterNoon () { 22 fmt . Println ( Good Afternoon, Octallium! ) 23 fmt . Println () 24 } 25 26 // CallGoodAfterNoon has access to goodAfterNoon as it belongs to the same file, 27 // and hence it can call it. 28 func CallGoodAfterNoon () { 29 goodAfterNoon () 30 } 31 Review On line 21 we declare a function \"goodAfterNoon\", but since the first alphabet is lowercase, the function is not exported, i.e it is not visible from other packages and can be accessed only within the file. 1 func goodAfterNoon() In order to access it, on line 28 we create another function \"CallGoodAfterNoon\", it can access goodAfterNoon as it belongs to the same file and we can call goodAfterNoon() by calling CallGoodAfterNoon(). 1 func CallGoodAfterNoon() 3.) Part-3 greet.go 1 2 3 4 5 6 32 // GoodNight accepts a string parameter and prints the result to the screen 33 func GoodNight ( name string ) { 34 fmt . Println ( Good Night, , name ) 35 fmt . Println () 36 } 37 Review On line 33 we declare a function \"GoodNight\" which accepts a string and prints out a message. Note that the function doesn't return anything. 1 func GoodNight(name string) 4.) Part-4 greet.go 1 2 3 4 5 6 7 8 9 10 11 38 // Factorial accepts an int parameter and also returns an int, 39 // it calculates the factorial of the input int and returns 40 // the factorial. 41 // At this point ignore how the function works, just concentrate 42 // on the declaration and syntax. 43 func Factorial ( n int ) int { 44 if n == 0 { 45 return 1 46 } 47 return n * Factorial ( n - 1 ) 48 } Review On line 43 we declare a function \"Factorial\" which accepts an int and also returns an int. 1 func Factorial(n int) int At this point don't think how the function is working, let's concentrate on the declaration and syntax. Complete greet.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package greeting // The above statement declares that this file belong to // the package greeting // import other packages import fmt // GoodMorning - Note that the name of our function starts with a capital alphabet, // capital alphabet denotes that the function is exported or visible outside // the package. // Now you can understand why Println() has a capital letter in the beginning ! func GoodMorning () { fmt . Println ( Good Morning, Octallium! ) fmt . Println () } // goodAfterNoon starts with a lowercase alphabet, means that this function is not // exported, and can only be accessed within the package. // Calling goodAfterNoon from another package will result in an error func goodAfterNoon () { fmt . Println ( Good Afternoon, Octallium! ) fmt . Println () } // CallGoodAfterNoon has access to goodAfterNoon as it belongs to the same file, // and hence it can call it. func CallGoodAfterNoon () { goodAfterNoon () } // GoodNight accepts a string parameter and prints the result to the screen func GoodNight ( name string ) { fmt . Println ( Good Night, , name ) fmt . Println () } // Factorial accepts an int parameter and also returns an int, // it calculates the factorial of the input int and returns // the factorial. // At this point ignore how the function works, just concentrate // on the declaration and syntax. func Factorial ( n int ) int { if n == 0 { return 1 } return n * Factorial ( n - 1 ) } B) Let's write the main.go Navigate and open main.go from: 1 code/basic/10_packages/main.go main.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 1 package main 2 3 // The above declaration says that this file belongs to the main package 4 5 // importing our packages 6 import ( 7 // package fmt comes in-built as a part of Go standard library 8 fmt 9 // importing our custom package 10 ./greeting 11 // the ./ denotes that from the current directory go to the greeting directory 12 ) 13 14 func main () { 15 // Calling the GoodMorning() from greeting package 16 fmt . Println ( Calling function GoodMorning() from package greeting ... ) 17 greeting . GoodMorning () 18 // Calling the goodAfterNoon() from greeting package 19 fmt . Println ( Calling function goodAfterNoon() from package greeting ... ) 20 // as goodAfterNoon is not directly accessible, we call CallGoodAfterNoon() 21 // which in turn calls goodAfterNoon() 22 greeting . CallGoodAfterNoon () 23 // Calling the GoodNight() from greeting package 24 fmt . Println ( Calling function GoodNight() from package greeting ... ) 25 greeting . GoodNight ( Gopher! ) 26 // Calling the Factorial function with passing an int 27 num := 10 28 // As Factorial() returns an int, we save it in a new variable result 29 result := greeting . Factorial ( num ) 30 // Printing the result on screen, note we are using Printf() 31 fmt . Printf ( Factorial of %d is: %d.\\n , num , result ) 32 } On line 1 we declare that the file belongs to the package \"main\" 1 package main On line 10 we import our custom package \"greeting\" 1 ./greeting The \"./\" denotes that from the current directory go to the \"greeting\" directory. On line 17 we call the GoodMorning function 1 greeting.GoodMorning() Note the syntax 1 packageName.funcName If we try to directly call goodAfterNoon() we will get an error 1 Error: greeting.goodAfterNoon() So, we call it by calling the CallGoodAfterNoon() function on line 22. 1 greeting.CallGoodAfterNoon() On line 25 we call the GoodNight() function and pass a string \"Gopher\" along with it. 1 greeting.GoodNight( Gopher! ) On line 29 we call the Factorial() function and pass an int, since it also returns an int, we save it in a variable \"result\" and print the output on line 31 1 result := greeting.Factorial(num) Running your code Open your terminal and navigate to our folder 1 code/basic/10_packages/ Once in the folder type the following command 1 go run main.go Build Till, now we have been running our code, let's try to build our code by compiling it to binary. Instead of \"go run\" type the following command 1 go build main.go If you are running on a unix based system including mac OSx, you can run the binary by typing 1 ./main If there are no errors, you should get the output as: Output 1 2 3 4 5 6 7 8 9 10 Calling function GoodMorning() from package greeting ... Good Morning, Octallium! Calling function goodAfterNoon() from package greeting ... Good Afternoon, Octallium! Calling function GoodNight() from package greeting ... Good Night, Gopher! Factorial of 10 is: 3628800. If for some reason your code isn't working, checkout the github repo. Github Github Repo That's it, Congratulations ! You just wrote your first custom package in Go. Golang Playground Since golang playground does not allow to declare and use custom packages, it is not possible to post it there, please refer the github repo for any errors. Next We will start the basic data structures of type array . Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"10 Packages"},{"location":"go/basics/packages/#understanding-czjqqkd0-packagesczjqqkd1","text":"","title":"Understanding  Packages."},{"location":"go/basics/packages/#objective","text":"To understand packages in Go. You have already used packages, remember we imported \"fmt\" package and used Println() function in it. Packages help us in organizing our code, we can group together related functions in a package. You can create multiple functions and files inside a package. Note, that there can be only one func main() throughout your project, as main() is the starting point in any standalone application.","title":"Objective"},{"location":"go/basics/packages/#structure","text":"Navigate to our code folder 1 code/basic/ For our program create a new folder '10_packages' 1 code/basic/10_packages/ And lets create a file 'main.go' in it, finally the structure would look like this: 1 code/basic/10_packages/main.go","title":"Structure"},{"location":"go/basics/packages/#declaring-packages","text":"We will be creating a custom package called as \"greeting\" and have a couple of functions in it, but we first need to declare a package. Navigate to our directory 1 code/basic/10_packages/ For declaring a package create a folder named \"greeting\", now the structure would be 1 code/basic/10_packages/greeting Inside the \"greeting\" folder create a file \"greet.go\", we will write our functions inside \"greet.go\" and call it from main() as required. 1 code/basic/10_packages/greeting/greet.go Now our structure would look like","title":"Declaring Packages"},{"location":"go/basics/packages/#code","text":"A) First let us write the code for our custom package \"greeting\" Open greet.go from: 1 code/basic/10_packages/greeting/greet.go We will write the code in 4 parts: 1.) Part-1 greet.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 package greeting 2 3 // The above statement declares that this file belong to 4 // the package greeting 5 6 // import other packages 7 import fmt 8 9 // GoodMorning - Note that the name of our function starts with a capital alphabet, 10 // capital alphabet denotes that the function is exported or visible outside 11 // the package. 12 // Now you can understand why Println() has a capital letter in the beginning ! 13 func GoodMorning () { 14 fmt . Println ( Good Morning, Octallium! ) 15 fmt . Println () 16 } 17 Review On line 1 we declare that this file belongs to the package \"greeting\", note that the package name and the parent directory name has to be the same. 1 package greeting On line 13 we declare a function \"GoodMorning\" which prints out \"Good Morning, Octallium!\" on the screen 1 func GoodMorning() Note that the first alphabet is capital, it symbolizes that the function is exported or visible to other packages, we will call it from our main(). 2.) Part-2 greet.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 18 // goodAfterNoon starts with a lowercase alphabet, means that this function is not 19 // exported, and can only be accessed within the package. 20 // Calling goodAfterNoon from another package will result in an error 21 func goodAfterNoon () { 22 fmt . Println ( Good Afternoon, Octallium! ) 23 fmt . Println () 24 } 25 26 // CallGoodAfterNoon has access to goodAfterNoon as it belongs to the same file, 27 // and hence it can call it. 28 func CallGoodAfterNoon () { 29 goodAfterNoon () 30 } 31 Review On line 21 we declare a function \"goodAfterNoon\", but since the first alphabet is lowercase, the function is not exported, i.e it is not visible from other packages and can be accessed only within the file. 1 func goodAfterNoon() In order to access it, on line 28 we create another function \"CallGoodAfterNoon\", it can access goodAfterNoon as it belongs to the same file and we can call goodAfterNoon() by calling CallGoodAfterNoon(). 1 func CallGoodAfterNoon() 3.) Part-3 greet.go 1 2 3 4 5 6 32 // GoodNight accepts a string parameter and prints the result to the screen 33 func GoodNight ( name string ) { 34 fmt . Println ( Good Night, , name ) 35 fmt . Println () 36 } 37 Review On line 33 we declare a function \"GoodNight\" which accepts a string and prints out a message. Note that the function doesn't return anything. 1 func GoodNight(name string) 4.) Part-4 greet.go 1 2 3 4 5 6 7 8 9 10 11 38 // Factorial accepts an int parameter and also returns an int, 39 // it calculates the factorial of the input int and returns 40 // the factorial. 41 // At this point ignore how the function works, just concentrate 42 // on the declaration and syntax. 43 func Factorial ( n int ) int { 44 if n == 0 { 45 return 1 46 } 47 return n * Factorial ( n - 1 ) 48 } Review On line 43 we declare a function \"Factorial\" which accepts an int and also returns an int. 1 func Factorial(n int) int At this point don't think how the function is working, let's concentrate on the declaration and syntax. Complete greet.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package greeting // The above statement declares that this file belong to // the package greeting // import other packages import fmt // GoodMorning - Note that the name of our function starts with a capital alphabet, // capital alphabet denotes that the function is exported or visible outside // the package. // Now you can understand why Println() has a capital letter in the beginning ! func GoodMorning () { fmt . Println ( Good Morning, Octallium! ) fmt . Println () } // goodAfterNoon starts with a lowercase alphabet, means that this function is not // exported, and can only be accessed within the package. // Calling goodAfterNoon from another package will result in an error func goodAfterNoon () { fmt . Println ( Good Afternoon, Octallium! ) fmt . Println () } // CallGoodAfterNoon has access to goodAfterNoon as it belongs to the same file, // and hence it can call it. func CallGoodAfterNoon () { goodAfterNoon () } // GoodNight accepts a string parameter and prints the result to the screen func GoodNight ( name string ) { fmt . Println ( Good Night, , name ) fmt . Println () } // Factorial accepts an int parameter and also returns an int, // it calculates the factorial of the input int and returns // the factorial. // At this point ignore how the function works, just concentrate // on the declaration and syntax. func Factorial ( n int ) int { if n == 0 { return 1 } return n * Factorial ( n - 1 ) } B) Let's write the main.go Navigate and open main.go from: 1 code/basic/10_packages/main.go main.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 1 package main 2 3 // The above declaration says that this file belongs to the main package 4 5 // importing our packages 6 import ( 7 // package fmt comes in-built as a part of Go standard library 8 fmt 9 // importing our custom package 10 ./greeting 11 // the ./ denotes that from the current directory go to the greeting directory 12 ) 13 14 func main () { 15 // Calling the GoodMorning() from greeting package 16 fmt . Println ( Calling function GoodMorning() from package greeting ... ) 17 greeting . GoodMorning () 18 // Calling the goodAfterNoon() from greeting package 19 fmt . Println ( Calling function goodAfterNoon() from package greeting ... ) 20 // as goodAfterNoon is not directly accessible, we call CallGoodAfterNoon() 21 // which in turn calls goodAfterNoon() 22 greeting . CallGoodAfterNoon () 23 // Calling the GoodNight() from greeting package 24 fmt . Println ( Calling function GoodNight() from package greeting ... ) 25 greeting . GoodNight ( Gopher! ) 26 // Calling the Factorial function with passing an int 27 num := 10 28 // As Factorial() returns an int, we save it in a new variable result 29 result := greeting . Factorial ( num ) 30 // Printing the result on screen, note we are using Printf() 31 fmt . Printf ( Factorial of %d is: %d.\\n , num , result ) 32 } On line 1 we declare that the file belongs to the package \"main\" 1 package main On line 10 we import our custom package \"greeting\" 1 ./greeting The \"./\" denotes that from the current directory go to the \"greeting\" directory. On line 17 we call the GoodMorning function 1 greeting.GoodMorning() Note the syntax 1 packageName.funcName If we try to directly call goodAfterNoon() we will get an error 1 Error: greeting.goodAfterNoon() So, we call it by calling the CallGoodAfterNoon() function on line 22. 1 greeting.CallGoodAfterNoon() On line 25 we call the GoodNight() function and pass a string \"Gopher\" along with it. 1 greeting.GoodNight( Gopher! ) On line 29 we call the Factorial() function and pass an int, since it also returns an int, we save it in a variable \"result\" and print the output on line 31 1 result := greeting.Factorial(num)","title":"Code"},{"location":"go/basics/packages/#running-your-code","text":"Open your terminal and navigate to our folder 1 code/basic/10_packages/ Once in the folder type the following command 1 go run main.go","title":"Running your code"},{"location":"go/basics/packages/#build","text":"Till, now we have been running our code, let's try to build our code by compiling it to binary. Instead of \"go run\" type the following command 1 go build main.go If you are running on a unix based system including mac OSx, you can run the binary by typing 1 ./main If there are no errors, you should get the output as: Output 1 2 3 4 5 6 7 8 9 10 Calling function GoodMorning() from package greeting ... Good Morning, Octallium! Calling function goodAfterNoon() from package greeting ... Good Afternoon, Octallium! Calling function GoodNight() from package greeting ... Good Night, Gopher! Factorial of 10 is: 3628800. If for some reason your code isn't working, checkout the github repo.","title":"Build"},{"location":"go/basics/packages/#github","text":"Github Repo That's it, Congratulations ! You just wrote your first custom package in Go.","title":"Github"},{"location":"go/basics/packages/#golang-playground","text":"Since golang playground does not allow to declare and use custom packages, it is not possible to post it there, please refer the github repo for any errors.","title":"Golang Playground"},{"location":"go/basics/packages/#next","text":"We will start the basic data structures of type array .","title":"Next"},{"location":"go/basics/packages/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/basics/shorthand-declaration/","text":"Shorthand Declaration Of Variables. Objective Learn how to declare variables using the shorthand method. Declaration Go ships with a smart compiler, it can detect the data type and automatically assign it to variables, using short declaration is very widely used in Go, with this method you can create variables on the fly, no need for prior declaration. General syntax 1 variableName := value It is also called as inference type declaration, meaning that the variable type is \"inferred\" from the value. This method offers various benefits such as compiler can choose the right data type and much more which we will explore as we write more code. Structure Navigate to our code folder 1 code/basic/ For our program create a new folder '06_shorthand_declaration' 1 code/basic/06_shorthand_declaration And lets create a file 'shorthand_declaration.go' in it, finally the structure would look like this: 1 code/basic/06_shorthand_declaration/shorthand_declaration.go Code Shorthand Declaration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 package main 2 3 import fmt 4 func main () { 5 // declaring integer 6 num := 12 7 fmt . Printf ( The type of variable num is: %T.\\n , num ) 8 9 // declaring float 10 decimal := 15.45 11 fmt . Printf ( The type of variable decimal is: %T.\\n , decimal ) 12 13 // declaring string 14 name := Octallium 15 fmt . Printf ( The type of variable name is : %T.\\n , name ) 16 } Code Review On line 6, 10 14 we declare a new variable 1 2 3 num := 12 decimal := 15.45 name := Octallium To check the data type we use a special format output function 1 fmt.Printf() Note, in the earlier examples we had used 1 fmt.Println() On line 7, 11 15, we print out the data type, to check the data type we use a special character \"%T\", which acts as a placeholder and represent the data \"Type\", it is followed by the variable name. 1 2 3 fmt.Printf( The type of variable num is: %T.\\n , num) fmt.Printf( The type of variable decimal is: %T.\\n , decimal) fmt.Printf( The type of variable name is : %T.\\n , name) If you don't understand the print statements, no worries, we will be having a dedicated section on formatting output, for now type everything as in the code above and make sure it runs. Run Code Open your terminal and navigate to our folder 1 code/basic/06_shorthand_declaration Once in the folder type the following command 1 go run shorthand_declaration.go Output Output 1 2 3 The type of variable num is: int. The type of variable decimal is: float64. The type of variable name is : string. Github Just in case you have some errors with your code, you can check out the code at github repo Github Repo Golang Playground You can also run the code at playground Golang Playground Next In the next chapter we will see about if/else condition, don't worry if its becoming too geeky, keep up with the code and in no time you will get the hang of it. Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"06 Shorthand Declaration"},{"location":"go/basics/shorthand-declaration/#czjqqkd0-shorthandczjqqkd1-declaration-of-variables","text":"","title":" Shorthand Declaration Of Variables."},{"location":"go/basics/shorthand-declaration/#objective","text":"Learn how to declare variables using the shorthand method.","title":"Objective"},{"location":"go/basics/shorthand-declaration/#declaration","text":"Go ships with a smart compiler, it can detect the data type and automatically assign it to variables, using short declaration is very widely used in Go, with this method you can create variables on the fly, no need for prior declaration. General syntax 1 variableName := value It is also called as inference type declaration, meaning that the variable type is \"inferred\" from the value. This method offers various benefits such as compiler can choose the right data type and much more which we will explore as we write more code.","title":"Declaration"},{"location":"go/basics/shorthand-declaration/#structure","text":"Navigate to our code folder 1 code/basic/ For our program create a new folder '06_shorthand_declaration' 1 code/basic/06_shorthand_declaration And lets create a file 'shorthand_declaration.go' in it, finally the structure would look like this: 1 code/basic/06_shorthand_declaration/shorthand_declaration.go","title":"Structure"},{"location":"go/basics/shorthand-declaration/#code","text":"Shorthand Declaration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 package main 2 3 import fmt 4 func main () { 5 // declaring integer 6 num := 12 7 fmt . Printf ( The type of variable num is: %T.\\n , num ) 8 9 // declaring float 10 decimal := 15.45 11 fmt . Printf ( The type of variable decimal is: %T.\\n , decimal ) 12 13 // declaring string 14 name := Octallium 15 fmt . Printf ( The type of variable name is : %T.\\n , name ) 16 }","title":"Code"},{"location":"go/basics/shorthand-declaration/#code-review","text":"On line 6, 10 14 we declare a new variable 1 2 3 num := 12 decimal := 15.45 name := Octallium To check the data type we use a special format output function 1 fmt.Printf() Note, in the earlier examples we had used 1 fmt.Println() On line 7, 11 15, we print out the data type, to check the data type we use a special character \"%T\", which acts as a placeholder and represent the data \"Type\", it is followed by the variable name. 1 2 3 fmt.Printf( The type of variable num is: %T.\\n , num) fmt.Printf( The type of variable decimal is: %T.\\n , decimal) fmt.Printf( The type of variable name is : %T.\\n , name) If you don't understand the print statements, no worries, we will be having a dedicated section on formatting output, for now type everything as in the code above and make sure it runs.","title":"Code Review"},{"location":"go/basics/shorthand-declaration/#run-code","text":"Open your terminal and navigate to our folder 1 code/basic/06_shorthand_declaration Once in the folder type the following command 1 go run shorthand_declaration.go","title":"Run Code"},{"location":"go/basics/shorthand-declaration/#output","text":"Output 1 2 3 The type of variable num is: int. The type of variable decimal is: float64. The type of variable name is : string.","title":"Output"},{"location":"go/basics/shorthand-declaration/#github","text":"Just in case you have some errors with your code, you can check out the code at github repo Github Repo","title":"Github"},{"location":"go/basics/shorthand-declaration/#golang-playground","text":"You can also run the code at playground Golang Playground","title":"Golang Playground"},{"location":"go/basics/shorthand-declaration/#next","text":"In the next chapter we will see about if/else condition, don't worry if its becoming too geeky, keep up with the code and in no time you will get the hang of it.","title":"Next"},{"location":"go/basics/shorthand-declaration/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/basics/slice/","text":"Understanding Data Structure of Type Slice . Objective Understanding Slice's in Go. Slice are dynamic versions of array, slices can grow shrink in length as required. Underlying the slice is an array and a pointer to it, exactly how the Go compiler stores the slice is a little complex, we will cover it in the \"Intermediate\" section of the tutorial. Structure Navigate to our code folder 1 code/basic/ For our program create a new folder '12_slice' 1 code/basic/12_slice/ And lets create a file 'slice.go' in it, finally the structure would look like this: 1 code/basic/12_slice/slice.go Declaration Syntax Declaration initialization method 1 sliceName := []type{value1, value2, ...} With built-in function make() 1 slice := make([]type, length, capacity) Make initializes the underlying array with zero value and returns a slice that refers to that array. Make is used extensively to initialize slices. Code We will write the code in 4 parts: 1.) part-1 slice.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 1 package main 2 3 import fmt 4 5 func main () { 6 // declaring a nil slice 7 var slice1 [] int 8 fmt . Println ( slice1: , slice1 ) 9 fmt . Println ( The length of slice1 is: , len ( slice1 )) 10 fmt . Println ( The capacity of slice1 is: , cap ( slice1 )) 11 fmt . Println () 12 // declaring a slice with initialization 13 slice2 := [] int { 1 , 2 , 3 , 4 , 5 } 14 fmt . Println ( slice2: , slice2 ) 15 fmt . Println ( The length of slice2 is: , len ( slice2 )) 16 fmt . Println ( The capacity of slice2 is: , cap ( slice2 )) 17 fmt . Println () 18 19 // declaring a slice of length 5 with make 20 slice3 := make ([] string , 5 ) 21 fmt . Println ( slice3: , slice3 ) 22 fmt . Println ( The length of slice3 is: , len ( slice3 )) 23 fmt . Println ( The capacity of slice3 is: , cap ( slice3 )) 24 fmt . Println () 25 Review On line 7, 13 20 we declare slice using different syntax 1 var slice1 []int This declares a nil slice, the length capacity are zero. As you will see in forth coming examples, slices can have variable length and capacity. Slices can dynamically resize till it reaches its capacity, we will shortly see how this is done. 1 slice2 := []int{1, 2, 3, 4, 5} Above line declares a slice and initializes its value, in this case length capacity are equal. 1 slice3 := make([]string, 5) This initializes a zero value slice with the length capacity of 5. Note the difference in length capacity of slice3 as compared to slice1. 2.) part-2 slice.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 26 // declaring a slice of length 5 and capacity 10 with make 27 slice4 := make ([] int , 5 , 10 ) 28 fmt . Println ( slice4: , slice4 ) 29 fmt . Println ( The length of slice4 is: , len ( slice4 )) 30 fmt . Println ( The capacity of slice4 is: , cap ( slice4 )) 31 fmt . Println () 32 33 // inserting values, note i 6 will give an error as we have 34 // set the length to 5 35 for i := 0 ; i 5 ; i ++ { 36 slice4 [ i ] = i 37 } 38 fmt . Println ( slice4: , slice4 ) 39 fmt . Println () 40 41 // increasing the length of slice 42 fmt . Println ( Increasing the length of slice... ) 43 44 // slice4 = slice4[:11] will give an error as capacity is 10 45 slice4 = slice4 [: 10 ] 46 fmt . Println ( The length of slice4 is: , len ( slice4 )) 47 fmt . Println ( The capacity of slice4 is: , cap ( slice4 )) 48 for i := 5 ; i 10 ; i ++ { 49 slice4 [ i ] = i 50 } 51 fmt . Println () 52 53 // printing slice4 54 fmt . Println ( slice4: , slice4 ) 55 fmt . Println () 56 Review On line 27 we declare a new slice with length = 5 and capacity = 10. 1 slice4 := make([]int, 5, 10) Then on line 35 we insert values into the slice, note we insert values only till index = 4 or length = 5 (remember our index starts from 0 and not 1!) If we exceed length of 5, it will throw an error as we have declared our length as 5. On line 45 we dynamically increase the length to 10. 1 slice4 = slice4[:10] Now we can insert values upto length = 10 or index = 9. On line 54 we print out our new slice. 1 fmt.Println( slice4: , slice4) 3.) part-3 slice.go 1 2 3 4 5 57 // creating a new slice 58 slice5 := slice4 [ 2 : 8 ] 59 fmt . Println ( slice5: , slice5 ) 60 fmt . Println () 61 Review We can create new slice from an existing one, on line 58 we create a new slice5 which has values from slice4 but only from index 2 to 8. 1 slice5 := slice4[2:8] Then we print out the slice on line 59. 1 fmt.Println( slice5: , slice5) 4.) part-4 slice.go 1 2 3 4 5 6 7 8 9 10 11 62 // two-D slice 63 twoD := [][] int {{ 3 , 4 }, { 1 , 5 }, { 9 , 2 }, { 7 , 8 }} 64 fmt . Println ( Print out values of twoD slice... ) 65 for i , subSlice := range twoD { 66 fmt . Printf ( At index: %d of twoD, Value: %v\\n , i , subSlice ) 67 for index , value := range subSlice { 68 fmt . Printf ( Index: %d Value: %d\\n , index , value ) 69 } 70 fmt . Println () 71 } 72 } Review Slice can have slices inside it, above we create a two-D slice, i.e a slice inside a slice, you can create multiple dimension slices, e.g three-D or four-D or even larger. On line 63 we declare a two-D slice of type int 1 twoD := [][]int{{3, 4}, {1, 5}, {9, 2}, {7, 8}} Note the syntax, it contains a slice within a slice, all separated by curly brackets and comma. On line 65 we start a for-range loop to print all the values inside two-D 1 for i, slice := range twoD This takes the first slice inside twoD and assigns it to the variable \"subSlice\", then we again loop over subSlice to print all the values. 1 for index, value := range subSlice Creating multi-dimension slices also increases the complexity, Go offers multiply other data types to tackle this as we will study then in forth coming chapters. Full Code slice.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 package main import fmt func main () { // declaring a nil slice var slice1 [] int fmt . Println ( slice1: , slice1 ) fmt . Println ( The length of slice1 is: , len ( slice1 )) fmt . Println ( The capacity of slice1 is: , cap ( slice1 )) fmt . Println () // declaring a slice with initialization slice2 := [] int { 1 , 2 , 3 , 4 , 5 } fmt . Println ( slice2: , slice2 ) fmt . Println ( The length of slice2 is: , len ( slice2 )) fmt . Println ( The capacity of slice2 is: , cap ( slice2 )) fmt . Println () // declaring a slice of length 5 with make slice3 := make ([] string , 5 ) fmt . Println ( slice3: , slice3 ) fmt . Println ( The length of slice3 is: , len ( slice3 )) fmt . Println ( The capacity of slice3 is: , cap ( slice3 )) fmt . Println () // declaring a slice of length 5 and capacity 10 with make slice4 := make ([] int , 5 , 10 ) fmt . Println ( slice4: , slice4 ) fmt . Println ( The length of slice4 is: , len ( slice4 )) fmt . Println ( The capacity of slice4 is: , cap ( slice4 )) fmt . Println () // inserting values, note i 6 will give an error as we have // set the length to 5 for i := 0 ; i 5 ; i ++ { slice4 [ i ] = i } fmt . Println ( slice4: , slice4 ) fmt . Println () // increasing the length of slice fmt . Println ( Increasing the length of slice... ) // slice4 = slice4[:11] will give an error as capacity is 10 slice4 = slice4 [: 10 ] fmt . Println ( The length of slice4 is: , len ( slice4 )) fmt . Println ( The capacity of slice4 is: , cap ( slice4 )) for i := 5 ; i 10 ; i ++ { slice4 [ i ] = i } fmt . Println () // printing slice4 fmt . Println ( slice4: , slice4 ) fmt . Println () // creating a new slice slice5 := slice4 [ 2 : 8 ] fmt . Println ( slice5: , slice5 ) fmt . Println () // two-D slice twoD := [][] int {{ 3 , 4 }, { 1 , 5 }, { 9 , 2 }, { 7 , 8 }} fmt . Println ( Print out values of twoD slice... ) for i , slice := range twoD { fmt . Printf ( At index: %d of twoD, Value: %v\\n , i , slice ) for index , value := range slice { fmt . Printf ( Index: %d Value: %d\\n , index , value ) } fmt . Println () } } Running your code Open your terminal and navigate to our folder 1 code/basic/12_slice/ Once in the folder type the following command 1 go run slice.go Output If there are no errors, you should get the output as: Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 slice1: [] The length of slice1 is: 0 The capacity of slice1 is: 0 slice2: [1 2 3 4 5] The length of slice2 is: 5 The capacity of slice2 is: 5 slice3: [ ] The length of slice3 is: 5 The capacity of slice3 is: 5 slice4: [0 0 0 0 0] The length of slice4 is: 5 The capacity of slice4 is: 10 slice4: [0 1 2 3 4] Increasing the length of slice... The length of slice4 is: 10 The capacity of slice4 is: 10 slice4: [0 1 2 3 4 5 6 7 8 9] slice5: [2 3 4 5 6 7] Print out values of twoD slice... At index: 0 of twoD, Value: [3 4] Index: 0 Value: 3 Index: 1 Value: 4 At index: 1 of twoD, Value: [1 5] Index: 0 Value: 1 Index: 1 Value: 5 At index: 2 of twoD, Value: [9 2] Index: 0 Value: 9 Index: 1 Value: 2 At index: 3 of twoD, Value: [7 8] Index: 0 Value: 7 Index: 1 Value: 8 If for some reason your code isn't working, checkout the github repo or playground. Github Github Repo Golang Playground Golang Playground Next In the next chapter we will study Maps . Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"12 Slice"},{"location":"go/basics/slice/#understanding-data-structure-of-type-czjqqkd0-sliceczjqqkd1","text":"","title":"Understanding Data Structure of Type  Slice."},{"location":"go/basics/slice/#objective","text":"Understanding Slice's in Go. Slice are dynamic versions of array, slices can grow shrink in length as required. Underlying the slice is an array and a pointer to it, exactly how the Go compiler stores the slice is a little complex, we will cover it in the \"Intermediate\" section of the tutorial.","title":"Objective"},{"location":"go/basics/slice/#structure","text":"Navigate to our code folder 1 code/basic/ For our program create a new folder '12_slice' 1 code/basic/12_slice/ And lets create a file 'slice.go' in it, finally the structure would look like this: 1 code/basic/12_slice/slice.go","title":"Structure"},{"location":"go/basics/slice/#declaration","text":"Syntax Declaration initialization method 1 sliceName := []type{value1, value2, ...} With built-in function make() 1 slice := make([]type, length, capacity) Make initializes the underlying array with zero value and returns a slice that refers to that array. Make is used extensively to initialize slices.","title":"Declaration"},{"location":"go/basics/slice/#code","text":"We will write the code in 4 parts: 1.) part-1 slice.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 1 package main 2 3 import fmt 4 5 func main () { 6 // declaring a nil slice 7 var slice1 [] int 8 fmt . Println ( slice1: , slice1 ) 9 fmt . Println ( The length of slice1 is: , len ( slice1 )) 10 fmt . Println ( The capacity of slice1 is: , cap ( slice1 )) 11 fmt . Println () 12 // declaring a slice with initialization 13 slice2 := [] int { 1 , 2 , 3 , 4 , 5 } 14 fmt . Println ( slice2: , slice2 ) 15 fmt . Println ( The length of slice2 is: , len ( slice2 )) 16 fmt . Println ( The capacity of slice2 is: , cap ( slice2 )) 17 fmt . Println () 18 19 // declaring a slice of length 5 with make 20 slice3 := make ([] string , 5 ) 21 fmt . Println ( slice3: , slice3 ) 22 fmt . Println ( The length of slice3 is: , len ( slice3 )) 23 fmt . Println ( The capacity of slice3 is: , cap ( slice3 )) 24 fmt . Println () 25 Review On line 7, 13 20 we declare slice using different syntax 1 var slice1 []int This declares a nil slice, the length capacity are zero. As you will see in forth coming examples, slices can have variable length and capacity. Slices can dynamically resize till it reaches its capacity, we will shortly see how this is done. 1 slice2 := []int{1, 2, 3, 4, 5} Above line declares a slice and initializes its value, in this case length capacity are equal. 1 slice3 := make([]string, 5) This initializes a zero value slice with the length capacity of 5. Note the difference in length capacity of slice3 as compared to slice1. 2.) part-2 slice.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 26 // declaring a slice of length 5 and capacity 10 with make 27 slice4 := make ([] int , 5 , 10 ) 28 fmt . Println ( slice4: , slice4 ) 29 fmt . Println ( The length of slice4 is: , len ( slice4 )) 30 fmt . Println ( The capacity of slice4 is: , cap ( slice4 )) 31 fmt . Println () 32 33 // inserting values, note i 6 will give an error as we have 34 // set the length to 5 35 for i := 0 ; i 5 ; i ++ { 36 slice4 [ i ] = i 37 } 38 fmt . Println ( slice4: , slice4 ) 39 fmt . Println () 40 41 // increasing the length of slice 42 fmt . Println ( Increasing the length of slice... ) 43 44 // slice4 = slice4[:11] will give an error as capacity is 10 45 slice4 = slice4 [: 10 ] 46 fmt . Println ( The length of slice4 is: , len ( slice4 )) 47 fmt . Println ( The capacity of slice4 is: , cap ( slice4 )) 48 for i := 5 ; i 10 ; i ++ { 49 slice4 [ i ] = i 50 } 51 fmt . Println () 52 53 // printing slice4 54 fmt . Println ( slice4: , slice4 ) 55 fmt . Println () 56 Review On line 27 we declare a new slice with length = 5 and capacity = 10. 1 slice4 := make([]int, 5, 10) Then on line 35 we insert values into the slice, note we insert values only till index = 4 or length = 5 (remember our index starts from 0 and not 1!) If we exceed length of 5, it will throw an error as we have declared our length as 5. On line 45 we dynamically increase the length to 10. 1 slice4 = slice4[:10] Now we can insert values upto length = 10 or index = 9. On line 54 we print out our new slice. 1 fmt.Println( slice4: , slice4) 3.) part-3 slice.go 1 2 3 4 5 57 // creating a new slice 58 slice5 := slice4 [ 2 : 8 ] 59 fmt . Println ( slice5: , slice5 ) 60 fmt . Println () 61 Review We can create new slice from an existing one, on line 58 we create a new slice5 which has values from slice4 but only from index 2 to 8. 1 slice5 := slice4[2:8] Then we print out the slice on line 59. 1 fmt.Println( slice5: , slice5) 4.) part-4 slice.go 1 2 3 4 5 6 7 8 9 10 11 62 // two-D slice 63 twoD := [][] int {{ 3 , 4 }, { 1 , 5 }, { 9 , 2 }, { 7 , 8 }} 64 fmt . Println ( Print out values of twoD slice... ) 65 for i , subSlice := range twoD { 66 fmt . Printf ( At index: %d of twoD, Value: %v\\n , i , subSlice ) 67 for index , value := range subSlice { 68 fmt . Printf ( Index: %d Value: %d\\n , index , value ) 69 } 70 fmt . Println () 71 } 72 } Review Slice can have slices inside it, above we create a two-D slice, i.e a slice inside a slice, you can create multiple dimension slices, e.g three-D or four-D or even larger. On line 63 we declare a two-D slice of type int 1 twoD := [][]int{{3, 4}, {1, 5}, {9, 2}, {7, 8}} Note the syntax, it contains a slice within a slice, all separated by curly brackets and comma. On line 65 we start a for-range loop to print all the values inside two-D 1 for i, slice := range twoD This takes the first slice inside twoD and assigns it to the variable \"subSlice\", then we again loop over subSlice to print all the values. 1 for index, value := range subSlice Creating multi-dimension slices also increases the complexity, Go offers multiply other data types to tackle this as we will study then in forth coming chapters.","title":"Code"},{"location":"go/basics/slice/#full-code","text":"slice.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 package main import fmt func main () { // declaring a nil slice var slice1 [] int fmt . Println ( slice1: , slice1 ) fmt . Println ( The length of slice1 is: , len ( slice1 )) fmt . Println ( The capacity of slice1 is: , cap ( slice1 )) fmt . Println () // declaring a slice with initialization slice2 := [] int { 1 , 2 , 3 , 4 , 5 } fmt . Println ( slice2: , slice2 ) fmt . Println ( The length of slice2 is: , len ( slice2 )) fmt . Println ( The capacity of slice2 is: , cap ( slice2 )) fmt . Println () // declaring a slice of length 5 with make slice3 := make ([] string , 5 ) fmt . Println ( slice3: , slice3 ) fmt . Println ( The length of slice3 is: , len ( slice3 )) fmt . Println ( The capacity of slice3 is: , cap ( slice3 )) fmt . Println () // declaring a slice of length 5 and capacity 10 with make slice4 := make ([] int , 5 , 10 ) fmt . Println ( slice4: , slice4 ) fmt . Println ( The length of slice4 is: , len ( slice4 )) fmt . Println ( The capacity of slice4 is: , cap ( slice4 )) fmt . Println () // inserting values, note i 6 will give an error as we have // set the length to 5 for i := 0 ; i 5 ; i ++ { slice4 [ i ] = i } fmt . Println ( slice4: , slice4 ) fmt . Println () // increasing the length of slice fmt . Println ( Increasing the length of slice... ) // slice4 = slice4[:11] will give an error as capacity is 10 slice4 = slice4 [: 10 ] fmt . Println ( The length of slice4 is: , len ( slice4 )) fmt . Println ( The capacity of slice4 is: , cap ( slice4 )) for i := 5 ; i 10 ; i ++ { slice4 [ i ] = i } fmt . Println () // printing slice4 fmt . Println ( slice4: , slice4 ) fmt . Println () // creating a new slice slice5 := slice4 [ 2 : 8 ] fmt . Println ( slice5: , slice5 ) fmt . Println () // two-D slice twoD := [][] int {{ 3 , 4 }, { 1 , 5 }, { 9 , 2 }, { 7 , 8 }} fmt . Println ( Print out values of twoD slice... ) for i , slice := range twoD { fmt . Printf ( At index: %d of twoD, Value: %v\\n , i , slice ) for index , value := range slice { fmt . Printf ( Index: %d Value: %d\\n , index , value ) } fmt . Println () } }","title":"Full Code"},{"location":"go/basics/slice/#running-your-code","text":"Open your terminal and navigate to our folder 1 code/basic/12_slice/ Once in the folder type the following command 1 go run slice.go","title":"Running your code"},{"location":"go/basics/slice/#output","text":"If there are no errors, you should get the output as: Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 slice1: [] The length of slice1 is: 0 The capacity of slice1 is: 0 slice2: [1 2 3 4 5] The length of slice2 is: 5 The capacity of slice2 is: 5 slice3: [ ] The length of slice3 is: 5 The capacity of slice3 is: 5 slice4: [0 0 0 0 0] The length of slice4 is: 5 The capacity of slice4 is: 10 slice4: [0 1 2 3 4] Increasing the length of slice... The length of slice4 is: 10 The capacity of slice4 is: 10 slice4: [0 1 2 3 4 5 6 7 8 9] slice5: [2 3 4 5 6 7] Print out values of twoD slice... At index: 0 of twoD, Value: [3 4] Index: 0 Value: 3 Index: 1 Value: 4 At index: 1 of twoD, Value: [1 5] Index: 0 Value: 1 Index: 1 Value: 5 At index: 2 of twoD, Value: [9 2] Index: 0 Value: 9 Index: 1 Value: 2 At index: 3 of twoD, Value: [7 8] Index: 0 Value: 7 Index: 1 Value: 8 If for some reason your code isn't working, checkout the github repo or playground.","title":"Output"},{"location":"go/basics/slice/#github","text":"Github Repo","title":"Github"},{"location":"go/basics/slice/#golang-playground","text":"Golang Playground","title":"Golang Playground"},{"location":"go/basics/slice/#next","text":"In the next chapter we will study Maps .","title":"Next"},{"location":"go/basics/slice/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/basics/variables-constants/","text":"Declaring Variables Constants . Objective Learn how to declare variables and constants. Variables Imagine you own a bookstore and you have to manage many books, you remove one book and store another book, now imagine bookstore to be variable, variable can store different values. Variables can be declared using the keyword var , besides using the keyword you also need to tell Go which data-type it belongs to. Since Go is a strictly typed language you need to declare the data-type. The syntax for declaring variable is: 1 var variableName type Constant Constants are like locker, once you put a value in it, it cannot be changed, and as usual you need to declare the data type as well. 1 const constName type = value Structure Navigate to our code folder 1 code/basic/ For our program create a new folder '05_variables_constant' 1 code/basic/05_variables_constant And lets create a file 'variables_constants.go' in it, finally the structure would look like this: 1 code/basic/05_variables_constant/variables_constants.go Code Variables Constants 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 1 package main 2 3 import fmt 4 5 func main () { 6 // Declaring variable name of type string 7 var name string 8 name = Octallium 9 // Printing out the value of name 10 fmt . Println ( The value of name variable is: , name ) 11 12 // Declaring variable age of type int 13 var age int 14 age = 9 15 // Printing out the value of age 16 fmt . Println ( The value of age variable is: , age ) 17 18 // Declaring constant SECRET_KEY of type string 19 const SECRET_KEY string = abc-123-xyz-098 20 // Printing out the value of SECRET_KEY 21 fmt . Println ( The value of SECRET_KEY constant is: , SECRET_KEY ) 22 23 // Values of variables can be changed 24 name = Golang Handbook 25 fmt . Println ( Now the value of name variable is: , name ) 26 27 age = 13 28 fmt . Println ( Now the value of age variable is: , age ) 29 30 // SECRET_KEY = que-472-ert-383 will throw an error as it is a constant 31 } Run Code Open your terminal and navigate to our folder 1 code/basic/05_variables_constant/ Once in the folder type the following command 1 go run variables_constants.go Output Output 1 2 3 4 5 The value of name variable is: Octallium The value of age variable is: 9 The value of SECRET_KEY constant is: abc-123-xyz-098 Now the value of name variable is: Golang Handbook Now the value of age variable is: 13 Github Just in case you have some errors with your code, you can check out the code at github repo Github Repo Golang Playground You can also run the code at playground Golang Playground Code Review Lines 7 declares a new variable \"name\" of type \"string\" and on line 8 we give it the value of \"octallium\" Similarly on line 13 we declare a variable \"age\" of type int and on line 14 we give it the value of 9, note that there are no double quotes around 9 as it is of type int, strings have to be enclosed within double quotes. On line 19 we declare a constant of type string and give it a value, on line 30 if we try to change the value, the compiler will throw and error, try uncommenting the line and running the code. On line 24 27 we assign new values to variables and print them out. Next In the next section we will see the short hand method for declaring variables. Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"05 Variables & Constants"},{"location":"go/basics/variables-constants/#declaring-czjqqkd0-variablesczjqqkd1-czjqqkd2-constantsczjqqkd3","text":"","title":"Declaring  Variables &amp;  Constants."},{"location":"go/basics/variables-constants/#objective","text":"Learn how to declare variables and constants.","title":"Objective"},{"location":"go/basics/variables-constants/#variables","text":"Imagine you own a bookstore and you have to manage many books, you remove one book and store another book, now imagine bookstore to be variable, variable can store different values. Variables can be declared using the keyword var , besides using the keyword you also need to tell Go which data-type it belongs to. Since Go is a strictly typed language you need to declare the data-type. The syntax for declaring variable is: 1 var variableName type","title":"Variables"},{"location":"go/basics/variables-constants/#constant","text":"Constants are like locker, once you put a value in it, it cannot be changed, and as usual you need to declare the data type as well. 1 const constName type = value","title":"Constant"},{"location":"go/basics/variables-constants/#structure","text":"Navigate to our code folder 1 code/basic/ For our program create a new folder '05_variables_constant' 1 code/basic/05_variables_constant And lets create a file 'variables_constants.go' in it, finally the structure would look like this: 1 code/basic/05_variables_constant/variables_constants.go","title":"Structure"},{"location":"go/basics/variables-constants/#code","text":"Variables Constants 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 1 package main 2 3 import fmt 4 5 func main () { 6 // Declaring variable name of type string 7 var name string 8 name = Octallium 9 // Printing out the value of name 10 fmt . Println ( The value of name variable is: , name ) 11 12 // Declaring variable age of type int 13 var age int 14 age = 9 15 // Printing out the value of age 16 fmt . Println ( The value of age variable is: , age ) 17 18 // Declaring constant SECRET_KEY of type string 19 const SECRET_KEY string = abc-123-xyz-098 20 // Printing out the value of SECRET_KEY 21 fmt . Println ( The value of SECRET_KEY constant is: , SECRET_KEY ) 22 23 // Values of variables can be changed 24 name = Golang Handbook 25 fmt . Println ( Now the value of name variable is: , name ) 26 27 age = 13 28 fmt . Println ( Now the value of age variable is: , age ) 29 30 // SECRET_KEY = que-472-ert-383 will throw an error as it is a constant 31 }","title":"Code"},{"location":"go/basics/variables-constants/#run-code","text":"Open your terminal and navigate to our folder 1 code/basic/05_variables_constant/ Once in the folder type the following command 1 go run variables_constants.go","title":"Run Code"},{"location":"go/basics/variables-constants/#output","text":"Output 1 2 3 4 5 The value of name variable is: Octallium The value of age variable is: 9 The value of SECRET_KEY constant is: abc-123-xyz-098 Now the value of name variable is: Golang Handbook Now the value of age variable is: 13","title":"Output"},{"location":"go/basics/variables-constants/#github","text":"Just in case you have some errors with your code, you can check out the code at github repo Github Repo","title":"Github"},{"location":"go/basics/variables-constants/#golang-playground","text":"You can also run the code at playground Golang Playground","title":"Golang Playground"},{"location":"go/basics/variables-constants/#code-review","text":"Lines 7 declares a new variable \"name\" of type \"string\" and on line 8 we give it the value of \"octallium\" Similarly on line 13 we declare a variable \"age\" of type int and on line 14 we give it the value of 9, note that there are no double quotes around 9 as it is of type int, strings have to be enclosed within double quotes. On line 19 we declare a constant of type string and give it a value, on line 30 if we try to change the value, the compiler will throw and error, try uncommenting the line and running the code. On line 24 27 we assign new values to variables and print them out.","title":"Code Review"},{"location":"go/basics/variables-constants/#next","text":"In the next section we will see the short hand method for declaring variables.","title":"Next"},{"location":"go/basics/variables-constants/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/getting-started/editor_ide/","text":"Setting Up Your Development Environment For Go. There are many choices available, both free and paid, I haven't tried all of them, but I would like to suggest a couple of them that work well for golang development. Editors Sublime Text Atom Visual Studio Code Vim IDE Goland By Jetbrains (Paid) Eclipse This list is by no means exhaustive, there are much more available, if you want a complete list check out the community maintained list here I personally use Visual Studio Code , there's nothing wrong with other editors, just that I am used to working with VS Code and pretty comfortable using all the keys. Installing 'Go' Plugins Just downloading and installing the editor or IDE is not sufficient, make sure you install the respective 'Go' plugins to get started with development. Plugins VS Code - Go - By Microsoft Atom - Go Plus Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Editors and IDE"},{"location":"go/getting-started/editor_ide/#setting-up-your-development-environment-for-go","text":"There are many choices available, both free and paid, I haven't tried all of them, but I would like to suggest a couple of them that work well for golang development.","title":"Setting Up Your Development Environment For Go."},{"location":"go/getting-started/editor_ide/#editors","text":"Sublime Text Atom Visual Studio Code Vim","title":"Editors"},{"location":"go/getting-started/editor_ide/#ide","text":"Goland By Jetbrains (Paid) Eclipse This list is by no means exhaustive, there are much more available, if you want a complete list check out the community maintained list here I personally use Visual Studio Code , there's nothing wrong with other editors, just that I am used to working with VS Code and pretty comfortable using all the keys.","title":"IDE"},{"location":"go/getting-started/editor_ide/#installing-go-plugins","text":"Just downloading and installing the editor or IDE is not sufficient, make sure you install the respective 'Go' plugins to get started with development. Plugins VS Code - Go - By Microsoft Atom - Go Plus","title":"Installing 'Go' Plugins"},{"location":"go/getting-started/editor_ide/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/getting-started/installation/","text":"Installing Go How-To Install Go on your local machine Installing on Mac OSx: Installing on Mac OSx Installing Go on your mac is pretty straight forward, choose any one method: - A) Installing using package installer directly from golang.org OR B) Using Homebrew A) Installing using the package installer Package installer method is the simplest way to get you started, just download the .pkg file by clicking on this link and install it just as you would install any other program on your mac. The installer will automatically create everything for you including setting up your environment variables. Installer will automatically install it to 1 usr/local/go directory After installing read \"Checking the installation\" section below to make sure everything works. B) Using Homebrew Before using this method, make sure you have homebrew installed, if it is not installed checkout this link and install it. Open your terminal and type the following: 1 brew install go brew will automatically fetch the latest binaries and install it for you, make sure they are installed to 1 usr/local/go directory Its now time to setup your environment variables, check the \"Setting up environment variables\" to complete the installation and start using Go. Installing on FreeBSD Linux: Installing on FreeBSD Linux Download the archive from golang.org and extract it to usr/local, for extracting open the terminal in the downloaded directory and type the following: If you have downloaded Go v 1.10.3 type the following command, if you have downloaded some other version, change the version in the following command. Open terminal in downloaded directory and type: 1 tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz After extracting set up GOPATH, refer the \"Setting up environment variables\" section. Installing on Windows: Installing on Windows Download the msi installer from golang.org and follow the prompts to intsall it. By default it is installed in 1 c:\\Go all the environmental variables are set automatically by the installer. If you are using windows, I would highly recommend to install Git Git Bash. Setting up environment variables: Setting up environment variables If you have installed Go using brew on OSx or on linux you need to set up GOPATH. A) If you are using bash, open and edit: 1 ~/.bash_profile B) If you are using zsh, open and edit: 1 ~/.zshrc and add the following: 1 2 3 4 export PATH=$PATH:/usr/local/go/bin export GOROOT=/usr/local/go export GOPATH=$HOME/go export GOBIN=$HOME/go/bin save the file and restart the terminal or type A) For bash: 1 source ~/.bash_profile B) For zsh: 1 source ~/.zshrc Editing .bash_profile or .zshrc Follow the instructions to edit .bash_profile or .zshrc, open the terminal and type 1 cd If you are using atom type 1 atom .bash_profile or 1 atom .zshrc Checking the installation: Checking the installation Open the terminal and type: 1 echo $GOROOT it should give the output: 1 usr/local/go For windows it should give output: 1 c:\\Go You can also test using the following commands: 1 2 go env go version Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Installation"},{"location":"go/getting-started/installation/#installing-go","text":"","title":"Installing Go"},{"location":"go/getting-started/installation/#czjqqkd0-how-toczjqqkd1-install-go-on-your-local-machine","text":"","title":" How-To Install Go on your local machine"},{"location":"go/getting-started/installation/#installing-on-mac-osx","text":"Installing on Mac OSx Installing Go on your mac is pretty straight forward, choose any one method: - A) Installing using package installer directly from golang.org OR B) Using Homebrew A) Installing using the package installer Package installer method is the simplest way to get you started, just download the .pkg file by clicking on this link and install it just as you would install any other program on your mac. The installer will automatically create everything for you including setting up your environment variables. Installer will automatically install it to 1 usr/local/go directory After installing read \"Checking the installation\" section below to make sure everything works. B) Using Homebrew Before using this method, make sure you have homebrew installed, if it is not installed checkout this link and install it. Open your terminal and type the following: 1 brew install go brew will automatically fetch the latest binaries and install it for you, make sure they are installed to 1 usr/local/go directory Its now time to setup your environment variables, check the \"Setting up environment variables\" to complete the installation and start using Go.","title":"Installing on Mac OSx:"},{"location":"go/getting-started/installation/#installing-on-freebsd-linux","text":"Installing on FreeBSD Linux Download the archive from golang.org and extract it to usr/local, for extracting open the terminal in the downloaded directory and type the following: If you have downloaded Go v 1.10.3 type the following command, if you have downloaded some other version, change the version in the following command. Open terminal in downloaded directory and type: 1 tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz After extracting set up GOPATH, refer the \"Setting up environment variables\" section.","title":"Installing on FreeBSD &amp; Linux:"},{"location":"go/getting-started/installation/#installing-on-windows","text":"Installing on Windows Download the msi installer from golang.org and follow the prompts to intsall it. By default it is installed in 1 c:\\Go all the environmental variables are set automatically by the installer. If you are using windows, I would highly recommend to install Git Git Bash.","title":"Installing on Windows:"},{"location":"go/getting-started/installation/#setting-up-environment-variables","text":"Setting up environment variables If you have installed Go using brew on OSx or on linux you need to set up GOPATH. A) If you are using bash, open and edit: 1 ~/.bash_profile B) If you are using zsh, open and edit: 1 ~/.zshrc and add the following: 1 2 3 4 export PATH=$PATH:/usr/local/go/bin export GOROOT=/usr/local/go export GOPATH=$HOME/go export GOBIN=$HOME/go/bin save the file and restart the terminal or type A) For bash: 1 source ~/.bash_profile B) For zsh: 1 source ~/.zshrc Editing .bash_profile or .zshrc Follow the instructions to edit .bash_profile or .zshrc, open the terminal and type 1 cd If you are using atom type 1 atom .bash_profile or 1 atom .zshrc","title":"Setting up environment variables:"},{"location":"go/getting-started/installation/#checking-the-installation","text":"Checking the installation Open the terminal and type: 1 echo $GOROOT it should give the output: 1 usr/local/go For windows it should give output: 1 c:\\Go You can also test using the following commands: 1 2 go env go version","title":"Checking the installation:"},{"location":"go/getting-started/installation/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"go/getting-started/why-go/","text":"Why Go ? Its really an interesting question, why should you learn and use Go ? This question becomes even more important, specially because of so many existing powerful languages such as C/C++, Python, Java, Javascript, etc. Go delivers some really exciting features such as: Easy and clear syntax. Small language with big standard library. Compiled language and fast compilation. Can be easily used cross platform. Its incredibly fast. Excellent concurrency. Good community support. While other languages also provide some of the above mentioned benefits, but Go really excels at them all together. You also need to remmember that Go is not the silver-bullet for all your applications, you need to consider all the project requirements before deciding on a language, if Go meets all your project requirements, then it can really deliver. I will not be detailing, why Go was created, creators, its history, etc, all of it is easily available online, what I am really interested is diving into the actual code.","title":"Why Go"},{"location":"go/getting-started/why-go/#why-go","text":"Its really an interesting question, why should you learn and use Go ? This question becomes even more important, specially because of so many existing powerful languages such as C/C++, Python, Java, Javascript, etc. Go delivers some really exciting features such as: Easy and clear syntax. Small language with big standard library. Compiled language and fast compilation. Can be easily used cross platform. Its incredibly fast. Excellent concurrency. Good community support. While other languages also provide some of the above mentioned benefits, but Go really excels at them all together. You also need to remmember that Go is not the silver-bullet for all your applications, you need to consider all the project requirements before deciding on a language, if Go meets all your project requirements, then it can really deliver. I will not be detailing, why Go was created, creators, its history, etc, all of it is easily available online, what I am really interested is diving into the actual code.","title":"Why Go ?"},{"location":"python/basics/installation/","text":"Installation Learn how to install Python 3 on your machine. But, before actually installing there are some points that I would like you to note. Python actually comes pre-installed on most operating system these days, but its the old and legacy version Python 2. Python 2 will officially be retiring on Jan 1 st , 2020, so its ideal to straight away get working with Python 3. Check out the installation instructions as per your operating system. Installing on Windows Installing Python 3 on Windows is just as easy as installing any other program, in addition to Python 3, I would highly recommend installing Git Bash , so that you can work with the exact same commands in the tutorial as mine and we need not keeping on switching between operating systems. Ofcouse, I will let you know whenever there are differences. Navigate to following link and download the setup file 1 https://www.python.org/downloads/windows/ Under Stable Releases check out your system and download the setup file accordingly, in most cases your system should be 64 bit, if that's the case you can download the following setup file 1 Windows x86-64 executable installer After downloading you can install it as you would install any other program. The installer will install everything and also setup environment variables. Installing on Mac Navigate to following link and download the setup file 1 https://www.python.org/downloads/mac-osx/ Under Stable Releases you can download the following file 1 macOS 64-bit installer And then install it as any other program, it will automatically setup environment variables for you. Alternatively If you are using brew, then installing Python is very simple, open your terminal and type 1 brew install python By default brew will install python 3 to the following directory - 1 /usr/local/bin/python3 You can check it by typing the following on your terminal 1 which python3 Installing on Linux Installing Python 3.7 on Ubuntu. If you are using Ubuntu 19.04 Disco Dingo then you already have Python 3.7.3 pre-installed, just sit back and you can directly skip to \"Setting Up Alias\" For others, start by updating ubuntu, open your terminal and type the following - 1 2 sudo apt update sudo apt install software-properties-common Add the repository 1 sudo add-apt-repository ppa:deadsnakes/ppa Install Python 3.7 1 sudo apt install python3.7 Checking Version You can check the installed python version. 1 python3 --version Python 3 also installs \"pip3\" by default, it is the package manager for python, you can check its version by 1 pip3 --version Setting Up Alias (Optional) Since Python 2 comes pre-installed on almost all the operating systems, the default python keyword points to Python 2, for using Python 3 we need to type python3 , which for me gets a little boring and unintuitive since Python 2 will be reaching its end of life soon. So, I just setup a alias, which simply means that, I say to my computer, \"Whenever I type python it has to refer to Python 3 and not to Python 2\". To setup a alias open your terminal and navigate to your home directory 1 cd If you are using bash, open the bash_profile, since I am using Visual Studio Code, I can directly open the file by typing 1 code .bash_profile If you are using atom, you can open by 1 atom .bash_profile Or if you are using PyCharm 1 charm .bash_profile Instead of bash if you are using zsh, you can open .zshrc 1 code .zshrc Add the following 2 lines at the end of the file 1 2 alias python= python3 alias pip= pip3 Now close and restart your terminal, to check if its working properly type the following 1 python --version It should show the current Python 3 installed version. Setting up your development environment and code editor (External Links) Excellent environment setup videos by Corey Schafer - For Windows For MacOS Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Installation"},{"location":"python/basics/installation/#installation","text":"Learn how to install Python 3 on your machine. But, before actually installing there are some points that I would like you to note. Python actually comes pre-installed on most operating system these days, but its the old and legacy version Python 2. Python 2 will officially be retiring on Jan 1 st , 2020, so its ideal to straight away get working with Python 3. Check out the installation instructions as per your operating system.","title":"Installation"},{"location":"python/basics/installation/#installing-on-windows","text":"Installing Python 3 on Windows is just as easy as installing any other program, in addition to Python 3, I would highly recommend installing Git Bash , so that you can work with the exact same commands in the tutorial as mine and we need not keeping on switching between operating systems. Ofcouse, I will let you know whenever there are differences. Navigate to following link and download the setup file 1 https://www.python.org/downloads/windows/ Under Stable Releases check out your system and download the setup file accordingly, in most cases your system should be 64 bit, if that's the case you can download the following setup file 1 Windows x86-64 executable installer After downloading you can install it as you would install any other program. The installer will install everything and also setup environment variables.","title":"Installing on Windows"},{"location":"python/basics/installation/#installing-on-mac","text":"Navigate to following link and download the setup file 1 https://www.python.org/downloads/mac-osx/ Under Stable Releases you can download the following file 1 macOS 64-bit installer And then install it as any other program, it will automatically setup environment variables for you. Alternatively If you are using brew, then installing Python is very simple, open your terminal and type 1 brew install python By default brew will install python 3 to the following directory - 1 /usr/local/bin/python3 You can check it by typing the following on your terminal 1 which python3","title":"Installing on Mac"},{"location":"python/basics/installation/#installing-on-linux","text":"Installing Python 3.7 on Ubuntu. If you are using Ubuntu 19.04 Disco Dingo then you already have Python 3.7.3 pre-installed, just sit back and you can directly skip to \"Setting Up Alias\" For others, start by updating ubuntu, open your terminal and type the following - 1 2 sudo apt update sudo apt install software-properties-common Add the repository 1 sudo add-apt-repository ppa:deadsnakes/ppa Install Python 3.7 1 sudo apt install python3.7","title":"Installing on Linux"},{"location":"python/basics/installation/#checking-version","text":"You can check the installed python version. 1 python3 --version Python 3 also installs \"pip3\" by default, it is the package manager for python, you can check its version by 1 pip3 --version","title":"Checking Version"},{"location":"python/basics/installation/#setting-up-alias-optional","text":"Since Python 2 comes pre-installed on almost all the operating systems, the default python keyword points to Python 2, for using Python 3 we need to type python3 , which for me gets a little boring and unintuitive since Python 2 will be reaching its end of life soon. So, I just setup a alias, which simply means that, I say to my computer, \"Whenever I type python it has to refer to Python 3 and not to Python 2\". To setup a alias open your terminal and navigate to your home directory 1 cd If you are using bash, open the bash_profile, since I am using Visual Studio Code, I can directly open the file by typing 1 code .bash_profile If you are using atom, you can open by 1 atom .bash_profile Or if you are using PyCharm 1 charm .bash_profile Instead of bash if you are using zsh, you can open .zshrc 1 code .zshrc Add the following 2 lines at the end of the file 1 2 alias python= python3 alias pip= pip3 Now close and restart your terminal, to check if its working properly type the following 1 python --version It should show the current Python 3 installed version.","title":"Setting Up Alias (Optional)"},{"location":"python/basics/installation/#setting-up-your-development-environment-and-code-editor","text":"(External Links) Excellent environment setup videos by Corey Schafer - For Windows For MacOS","title":"Setting up your development environment and code editor"},{"location":"python/basics/installation/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"python/basics/introduction/","text":"Introduction to Python 3 What the hell...python ? Isn't it supposed to be a reptile! Well, it also happens to be a really great programming language. If you are just starting your programming journey, Python is the right place to start, it offers nice and clean syntax, vast library, online available content, huge community, etc. Today's software industry has a huge collection of programming languages like C, C++, Java, Javascript, Go, Rust, etc. Each of the language has its own pros and cons, there is no 'One Size Fits All' concept and one has to really consider the project requirements in order to select a language. So, that brings us to the next question, WHY Choose PYTHON ? Why Python? \ud83d\udc0d Simple answer is, because its Amazing! Surely python also has its share of pros and cons, but offers a lot more in return, such as follows - Are you a beginner ? Python is the perfect place to start, it will help you to understand a lot of the basic programming concepts and then you can move on to other languages if required. Python really helps you to be productive, you can achieve a lot more in few lines of code. In addition to it, Python is very robust, performant and provides high scalability. Python offers a simple and clean syntax, no semicolons! Python has a vast library support, you can find a library for almost any functionality you can think off! Web development no problem! Python has robust web frameworks like Django, Flask, Pyramid, etc. Creating command line applications, again no problem! Python is great fit for Machine Learning, Artificial Intelligence, Business Analytics, etc. Need to work with files such as csv, xls, pdf, zip, etc, ...aah just a piece of cake. Python is great for rapid development, you can easily bootstrap a project with the vast eco-system that python provides. Sounds exciting! Let's dive more into it. What is Python? As you already know that python is a programming language, for now just remmember its an interpreted language, i.e the python interpreter acts like an interface between you and the machine. You write in English and python converts it into a language that the machine can understand, simple isn't it? Who's using Python? Almost everyone uses python, from big companies like Google, Facebook, Dropbox, Microsoft, etc to research institutes like CERN, NASA, etc, everyone uses python! What will I learn here? Octallium aims to teach Python 3 right from basics to advanced. Ofcouse, its not possible to cover everything that python has to offer, but it will surely teach you enough to get started on your own. Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Introduction"},{"location":"python/basics/introduction/#introduction-to-python-3","text":"What the hell...python ? Isn't it supposed to be a reptile! Well, it also happens to be a really great programming language. If you are just starting your programming journey, Python is the right place to start, it offers nice and clean syntax, vast library, online available content, huge community, etc. Today's software industry has a huge collection of programming languages like C, C++, Java, Javascript, Go, Rust, etc. Each of the language has its own pros and cons, there is no 'One Size Fits All' concept and one has to really consider the project requirements in order to select a language. So, that brings us to the next question, WHY Choose PYTHON ?","title":"Introduction to Python 3"},{"location":"python/basics/introduction/#why-python","text":"Simple answer is, because its Amazing! Surely python also has its share of pros and cons, but offers a lot more in return, such as follows - Are you a beginner ? Python is the perfect place to start, it will help you to understand a lot of the basic programming concepts and then you can move on to other languages if required. Python really helps you to be productive, you can achieve a lot more in few lines of code. In addition to it, Python is very robust, performant and provides high scalability. Python offers a simple and clean syntax, no semicolons! Python has a vast library support, you can find a library for almost any functionality you can think off! Web development no problem! Python has robust web frameworks like Django, Flask, Pyramid, etc. Creating command line applications, again no problem! Python is great fit for Machine Learning, Artificial Intelligence, Business Analytics, etc. Need to work with files such as csv, xls, pdf, zip, etc, ...aah just a piece of cake. Python is great for rapid development, you can easily bootstrap a project with the vast eco-system that python provides. Sounds exciting! Let's dive more into it.","title":"Why Python? \ud83d\udc0d"},{"location":"python/basics/introduction/#what-is-python","text":"As you already know that python is a programming language, for now just remmember its an interpreted language, i.e the python interpreter acts like an interface between you and the machine. You write in English and python converts it into a language that the machine can understand, simple isn't it?","title":"What is Python?"},{"location":"python/basics/introduction/#whos-using-python","text":"Almost everyone uses python, from big companies like Google, Facebook, Dropbox, Microsoft, etc to research institutes like CERN, NASA, etc, everyone uses python!","title":"Who's using Python?"},{"location":"python/basics/introduction/#what-will-i-learn-here","text":"Octallium aims to teach Python 3 right from basics to advanced. Ofcouse, its not possible to cover everything that python has to offer, but it will surely teach you enough to get started on your own.","title":"What will I learn here?"},{"location":"python/basics/introduction/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"python/basics/variables/","text":"Variables Introduction Let us see how to create variables in Python. In order to understand variables, I'd like you to meet Billy , he is a friendly dinosaur and is currently planning for his birthday party. Billy is very excited about the party and is busy thinking about packaging all the return gifts. Billy has three type of return gifts - Balloons Party Hats Crackers Declaring Variables Let's start by creating a file called as 'variables.py' anywhere on your computer and open it in your code editor and type the following - 1 2 box = Baloons print ( box ) In order to run the file, open the terminal and navigate to the directory which contains the file. Suppose I have created that file on my desktop, then the path on my terminal will be - 1 $ cd /Users/ { your username } /Desktop In order to run the file, type the following in your terminal - 1 $ python3 variables.py Output will be as follows - 1 Baloons Congratulation! You just created a variable and printed its value. Understanding Variables Let us again have a look at the code we wrote above 1 2 box = Baloons print ( box ) You are declaring a variable called box and assigning it a value of Baloons , note the single quote around it, you can also use double quotes as follows and it will give you the same output. 1 2 box = Baloons print ( box ) Single and double quotes can be used interchangeably, but be sure to use a consistent style all across your code. Printing Values 1 2 box = Baloons print ( box ) Line 2 prints the value of the variable 'box' to the terminal, which in our case is 'Baloons'. 1 Baloons print() is a builtin python function which we can easily use to print values. Re-assigning Values Suppose, now Billy wants to pack 'Party Hats' instead of 'Baloons', then we can re-assign a new value to the same variable 'box' 1 2 box = Party Hats print ( box ) You can again check the value by running the file 1 python3 variables.py Output 1 Party Hats Notice that our value has now changed from 'Baloons' to 'Party Hats'. And now finally Billy wants to pack 'Crackers', so we can once again re-assign 'box' to a new value of 'Crackers' 1 2 box = Crackers print ( box ) If you run the file again, this time output will be 1 Crackers Full Code 1 2 3 4 5 6 7 8 9 10 # variables.py box = Baloons print ( box ) # prints - Baloons box = Party Hats print ( box ) # prints - Party Hats box = Crackers print ( box ) # prints - Crackers Conclusion As you must have noticed box is just a placeholder, we can assign different values to it from time to time, thus it is know as a variable, i.e values can change but the placeholder remains the same. Please Consider a Donation \u2764\ufe0f All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Variables"},{"location":"python/basics/variables/#variables","text":"","title":"Variables"},{"location":"python/basics/variables/#introduction","text":"Let us see how to create variables in Python. In order to understand variables, I'd like you to meet Billy , he is a friendly dinosaur and is currently planning for his birthday party. Billy is very excited about the party and is busy thinking about packaging all the return gifts. Billy has three type of return gifts - Balloons Party Hats Crackers","title":"Introduction"},{"location":"python/basics/variables/#declaring-variables","text":"Let's start by creating a file called as 'variables.py' anywhere on your computer and open it in your code editor and type the following - 1 2 box = Baloons print ( box ) In order to run the file, open the terminal and navigate to the directory which contains the file. Suppose I have created that file on my desktop, then the path on my terminal will be - 1 $ cd /Users/ { your username } /Desktop In order to run the file, type the following in your terminal - 1 $ python3 variables.py Output will be as follows - 1 Baloons Congratulation! You just created a variable and printed its value.","title":"Declaring Variables"},{"location":"python/basics/variables/#understanding-variables","text":"Let us again have a look at the code we wrote above 1 2 box = Baloons print ( box ) You are declaring a variable called box and assigning it a value of Baloons , note the single quote around it, you can also use double quotes as follows and it will give you the same output. 1 2 box = Baloons print ( box ) Single and double quotes can be used interchangeably, but be sure to use a consistent style all across your code.","title":"Understanding Variables"},{"location":"python/basics/variables/#printing-values","text":"1 2 box = Baloons print ( box ) Line 2 prints the value of the variable 'box' to the terminal, which in our case is 'Baloons'. 1 Baloons print() is a builtin python function which we can easily use to print values.","title":"Printing Values"},{"location":"python/basics/variables/#re-assigning-values","text":"Suppose, now Billy wants to pack 'Party Hats' instead of 'Baloons', then we can re-assign a new value to the same variable 'box' 1 2 box = Party Hats print ( box ) You can again check the value by running the file 1 python3 variables.py Output 1 Party Hats Notice that our value has now changed from 'Baloons' to 'Party Hats'. And now finally Billy wants to pack 'Crackers', so we can once again re-assign 'box' to a new value of 'Crackers' 1 2 box = Crackers print ( box ) If you run the file again, this time output will be 1 Crackers","title":"Re-assigning Values"},{"location":"python/basics/variables/#full-code","text":"1 2 3 4 5 6 7 8 9 10 # variables.py box = Baloons print ( box ) # prints - Baloons box = Party Hats print ( box ) # prints - Party Hats box = Crackers print ( box ) # prints - Crackers","title":"Full Code"},{"location":"python/basics/variables/#conclusion","text":"As you must have noticed box is just a placeholder, we can assign different values to it from time to time, thus it is know as a variable, i.e values can change but the placeholder remains the same.","title":"Conclusion"},{"location":"python/basics/variables/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"}]}