{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#functional-programming-with-elixir","title":"Functional Programming With Elixir","text":"<p>A Introductory Course On Functional Programming Using The Elixir Programming Language</p> <p>Learn More</p>"},{"location":"#django-polls","title":"Django Polls","text":"<p>Do you want to learn Python based Django web framework? Did you try referring to the official documentation? </p> <p>Well, let's create the Polls Application written in the official Django documentation, that way you can refer to the documentation and also see on screen how to build the application.</p> <p>Learn More</p>"},{"location":"#modern-python-101","title":"Modern Python 101","text":"<p>This is your guide to get started with Python Programming Language. This is a simple to understand and free guide to learn Python, we don't expect you to have any programming knowledge and teach everything from scratch.</p> <p>Learn More</p>"},{"location":"#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"about/","title":"About","text":"<p>Today's world is filled with diversity, we all come from different backgrounds and yet some traits remain common amongst all of us. All of us have to learn so many thing since our birth, programming is one such thing and it just happens to be logical extension of your curiosity.</p> <p>If you are on such a journey, you have perhaps come to the right place! Sounds interesting ? Carry on...</p>"},{"location":"about/#introduction","title":"Introduction","text":"<p>Programming languages were made by people for people, but some of the creators got a little creative on the way and came up with strange symbols and syntax, couldn't programming be done in plain English or Marathi or Japanese or in your mother tongue? Perhaps not!</p> <p>It takes a lot more to bring all the diversity and complexity of the real world and pack it in a programming language, however I do agree some programming languages feel weird, sometimes I even thought learning Martian would have been better!</p> <p>But why would anyone choose to learn such cryptic sounding stuff?</p> <p>Answer - To make or break things!</p>"},{"location":"about/#learning","title":"Learning","text":"<p>Octallium presents easy to understand videos, tutorials and articles to navigate through these cryptic things in the most simplest way possible. Majority of the content starts for beginners and then progressively builds up till you can work on real life scenarios.</p> <p>Every programming language is awesome only till the time it works for you and it's the worst when it doesn't, but it's really up to you which language you prefer, there is no ONE best language.</p> <p>I love to call programming languages as \"demons\", they offer great power, but you need to learn to handle them well.</p> <p></p> <p>How to I choose my choice of language? Carry on...</p>"},{"location":"about/#which-demon-to-tame","title":"Which demon to tame?","text":"<p>So which language you should learn? No one can answer that correctly, you need to experiment with different languages and choose your demon \ud83d\udc32. However, depending on the scenario you would have to learn a certain language, e.g - for creating websites, you absolutely need to know HTML, CSS and some Javascript.</p> <p>Its normal for anyone to learn more than half dozen languages in the course of their career. More you expose yourself to different languages, better would be your understanding.</p> <p>Let the force be with you!</p>"},{"location":"about/#about-me","title":"About Me","text":"<p>Hi, my name is Anil Kulkarni and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of coding. When I am not coding you can usually find me watching movies \ud83c\udfac</p>"},{"location":"about/#background","title":"Background","text":"<p>I was always passionate about creating things, in my last venture I was making \"Handmade Soaps\" and while making e-commerce website for it, coding bug caught up with me and I have been learning programming ever since.</p> <p>I try to share whatever I learn. I am also open to any new opportunities, you can checkout my profile at -</p> <p>LinkedIn</p> <p>Github</p>"},{"location":"about/#motivation","title":"Motivation","text":"<p>As a beginner I really struggled to find the right sources for learning and ended up taking a lot of free and paid online courses, which finally ended up in confusion and frustration. So I decided to write a simple to understand, beginner oriented resources for learning how to program.</p>"},{"location":"article/","title":"Articles","text":"<p>Nothing yet, check back later for updates</p>"},{"location":"contact/","title":"Contact Me","text":"<p>DM or tag me at @octallium LinkedIn Profile Anil Kulkarni</p>"},{"location":"contact/#buy-me-a-coffee","title":"Buy Me A Coffee","text":""},{"location":"subscribe/","title":"Subscribe to Octallium","text":"Subscribe * indicates required Email Address  * First Name  Last Name  <p>Once a week update about new content and articles, thats it!</p>"},{"location":"blog/","title":"Index For Blog Posts","text":""},{"location":"contact/contact/","title":"Contact","text":"<p>Its always nice to hear from the community, please feel free to drop a mail to -</p> <p>connect [at] octallium (dot) com</p> <p>I normally try to get back immediately or within 12 hrs of receiving the mail.</p> <p>Or</p> <p>You can always socially connect -</p> <p>Youtube</p> <p>Twitter</p> <p>LinkedIn</p> <p>Facebook</p> <p>Instagram</p>"},{"location":"contact/contact/#buy-me-a-coffee","title":"Buy Me A Coffee","text":""},{"location":"courses/django/django-polls/","title":"Official Django Polls - Companion Videos","text":"<p>Link - Full Course</p>"},{"location":"courses/django/django-polls/#buy-me-a-coffee","title":"Buy Me A Coffee","text":""},{"location":"courses/django/django-polls/#code","title":"Code","text":"<p>Github Repo</p>"},{"location":"courses/elixir/functional-elixir/","title":"Functional Programming With Elixir","text":"<p>Link - Full Course</p>"},{"location":"courses/elixir/functional-elixir/#buy-me-a-coffee","title":"Buy Me A Coffee","text":""},{"location":"courses/elixir/functional-elixir/#code","title":"Code","text":"<p>Github Repo</p>"},{"location":"courses/go/modern-go-101/","title":"Modern Go 101","text":""},{"location":"courses/go/modern-go-101/#welcome-to-modern-go-101","title":"Welcome to Modern Go 101!","text":""},{"location":"courses/go/modern-go-101/#introduction","title":"Introduction","text":"<p><code>Modern Go 101</code> is all about teaching the <code>Go Programming Language</code>. This tutorial series comes in two flavours, the free version is published on our Youtube channel and the paid version comes with additional content and solved exercises.</p> <p>The content is first published on the paid version and subsequently videos would be released on Youtube channel on weekly basis.</p> <p>This course is intended for people who have some basic programming knowledge and is aimed at intermediate programmers.</p> <p><code>Go</code> is in a really sweet spot in the programming world, it is statically typed compiled language and is very fast. In addition to this the concurrency model is what makes it more interesting and perhaps easy to use.</p> <p>In a real world, concurrency is hard! Mutability makes it hard, but <code>Go</code> takes a different approach and shares memory by communicating. Many other programming languages suffer because concurrency was an after thought and provide somewhat awkward concurrency models or are mostly single threaded. But concurrency was built into <code>Go</code> and it provides primitives such as <code>goroutines</code> and <code>channels</code> for handling concurrency.</p> <p>In the battle for concurrency and multi-threaded applications, <code>Go</code> certainly ranks very high, but certainly it isn't the only one. Other programming languages such as <code>Elixir</code> provide far better concurrency model with its <code>Actor Model</code> and are a pure pleasure to work.</p> <p><code>Go</code> finds wide application from <code>System Programming</code> to <code>Web Applications</code> and lot of developers use it their everyday jobs. So, let's get going and learn one of the most popular programming language out there.</p>"},{"location":"courses/go/modern-go-101/#current-status","title":"Current Status","text":"<p>I am currently recording and editing these videos, I expect to complete this course by end of Oct, 2022.</p> <p>The course is available at a discount $25 till I complete it, then it would be available at the regular price $39.</p>"},{"location":"courses/go/modern-go-101/#enroll-now","title":"Enroll Now","text":"<p>Enroll Now</p>"},{"location":"courses/go/modern-go-101/#code","title":"Code","text":"<p>Github Repo</p>"},{"location":"courses/python/modern-python-101-workouts/","title":"Modern Python 101 - Workouts","text":"<p>Modern Python 101 - Workouts, is your playground to practice your basic python programming skills. This course contains carefully selected 20 workouts that cover all basic aspects of Python. If you have taken my earlier course Modern Python 101 then you know that the content is dense and packed with lots of information! </p> <p>This course is the exact opposite of Modern Python 101, in this course I am first going to throw a problem at you, may be a little difficult for starting and expect you to attempt it. If you can solve then its awesome, if not then still nothing to worry, the problems are intentionally designed so that you don't get them on first attempt!! And of-course each problem has a detailed explanation and a solution video.</p> <p>I have also selected some problem from <code>Hacker Rank</code> just to give you an idea of how to approach these platforms. It would also help you to carry on solving problems with similar coding challenges platforms in the future.</p>"},{"location":"courses/python/modern-python-101-workouts/#how-to-approach-python-workouts","title":"How To Approach Python Workouts","text":"<p>Think of it like this - It's your job to solve the problem and it's my job to make it as difficult as possible!</p> <p>So, what really matters for you is to just <code>persist</code> throughout the course and by the end of the course you would have learned so much more than before! As I throw a problem at you, I would expect you to search online for additional concepts, browse articles from websites like stack overflow or official Python documentation and try to come up with a solution. </p> <p>Just solving or not solving the problem doesn't matter or how many step it took to solve the problem doesn't matter, what matters is - How did you approach the problem? How did you decompose the problem? Were you able to conceptually visualize the solution? Remember, a working program is much more important than concise or fast program!</p> <p>I would advise you to not spend more than 45-60 mins on one problem, if you are able to get it partially right them maybe spending some more time could make sense. If you are spending much more time than that, then I would recommend you to watch the solution and try the problem again on your own.</p> <p>At the end of you attempt you can always compare your answer with the solutions, but please remember that my solutions are not the only <code>solutions</code>, you may have a different approach which is completely acceptable, what matters is the outcome.</p>"},{"location":"courses/python/modern-python-101-workouts/#topic-covered","title":"Topic Covered","text":"<p>These workouts cover almost every topic we learnt in Modern Python 101 except for error handling and packages and the workouts are mainly designed to test your logic and reasoning.</p>"},{"location":"courses/python/modern-python-101-workouts/#audience","title":"Audience","text":"<p>These workouts are designed for <code>Python Beginners</code> or for anyone who want's to practice their <code>fundamental</code> Python Programming skills.</p> <p>Each <code>Workout</code> is specific to a particular Python topic and targets mostly one concept at a time.</p>"},{"location":"courses/python/modern-python-101-workouts/#what-to-practice-next-","title":"What To Practice Next -","text":"<ol> <li>OOP's</li> <li>File &amp; Folder Handling</li> <li>Iterators &amp; Generators</li> <li>Data serialization and de-serialization</li> <li>Decorators</li> <li>Abstract Base Classes</li> <li>Multi-Threading &amp; Multi-Processing</li> <li>Concurrency &amp; Asyncio</li> <li>Testing</li> <li>Web Frameworks - Django, Flask &amp; Fastapi</li> <li>Machine Learning &amp; Deep Learning</li> <li>Github</li> </ol>"},{"location":"courses/python/modern-python-101-workouts/#final-words","title":"Final Words","text":"<p>Just persist in your efforts, solutions will follow!</p>"},{"location":"courses/python/modern-python-101-workouts/#enroll-now","title":"Enroll Now","text":"<p>Enroll Now</p>"},{"location":"courses/python/modern-python-101-workouts/#code","title":"Code","text":"<p>Github Repo</p>"},{"location":"courses/python/modern-python-101/","title":"Modern Python 101 - Thinking With Types","text":"<p>This is your guide to get started with Python Programming Language. This is a simple to understand and free guide to learn Python, we don't expect you to have any programming knowledge and teach everything from scratch. </p> <p>Did you check instagram today or watched YouTube? Well, you just used Python based applications! All fortune 500 companies use Python in some form or another, so fear not, learning Python is always a good decision!</p> <p>Python is the perfect language to learn for beginners. With Python you can do almost anything, create your own web applications, create games, desktop applications, data science projects, AI, etc, the list is endless! Python is well suited for beginners because of its simplicity and you would be writing your own programs in no time!</p> <p>Python is one of the easiest language to learn, while this may be true, but it often takes a lot of time and practice to really master it. People often confuse learning <code>language syntax</code> with learning <code>programming</code>, we make this difference very clear and guide you through the basic principles needed to learn Python in an efficient manner.</p> <p>Remember, this course is just your start and there is no end to learning it!</p>"},{"location":"courses/python/modern-python-101/#learning-journey","title":"Learning Journey","text":"<p>It may take you multiple times to go through any particular Topic/Video/Concept and there is no shame in it. Anyone who says they got the concept in the first try are either really smart or lying, rest of us need repetition and practice to learn anything new.</p> <p>Also remember, as a beginner there is no such thing as silly questions, so be sure to ask whatever you think is a genuine question.</p>"},{"location":"courses/python/modern-python-101/#topics-covered","title":"Topics Covered","text":"<p>Following is the list of topics covered, they are listed in no specific order and are to just give you an idea of topic we would be learning in this tutorial.</p> <ol> <li>Introduction -<ol> <li>Why you should learn Python?</li> <li>What is Python?</li> <li>How Python Works?</li> <li>Hello World - Your First Python Program</li> <li>Installing Python</li> <li>Setting Up VS Code &amp; Additional Dependencies</li> </ol> </li> <li>Type System -</li> <li>Declaring Variables</li> <li>Variable Rules</li> <li>Data Types</li> <li>Control Flow -</li> <li>If / Else Statements With Python</li> <li>And / OR statements in Python</li> <li>For Loops In Python</li> <li>For and In Loops in Python</li> <li>While Loops in Python</li> <li>Data Structures -</li> <li>List</li> <li>Tuple</li> <li>Dictionary</li> <li>Set</li> <li>Functions -</li> <li>What is a Python Function?</li> <li>Python Functions | Take Something -&gt; Give Something</li> <li>Data Transformation</li> <li>Side Effects</li> <li>Arguments</li> <li>Variable Local &amp; Global Scope</li> <li>Unpacking in Python</li> <li>Variable &amp; Keyword Arguments in Python | *args and **kwargs</li> <li>Deeper Dive in Functions - A Look at Higher Order Functions(HOF) &amp; Lambda</li> <li>Object Oriented Programming (OOP) -</li> <li>Introduction to Classes</li> <li>Not Everything Needs To Be a Class</li> <li>Data &amp; Behavior - Attributes, Fields/Members, Methods</li> <li>Create Your First Python Class</li> <li>What Do You Mean By Class Instances?</li> <li>Adding Methods or Behavior to Your Python Class</li> <li>Introduction to Magic Methods</li> <li>Inheritance &amp; Polymorphism</li> <li>Deeper Dive in OOPs - Class methods, Static methods, Property, Getters &amp; Setters</li> <li>Error Handling -<ol> <li>Try - Catch - Else - Final blocks</li> <li>Runtime Errors, Syntax Errors, etc.</li> <li>Common Error types - TypeError, AssertionError, ZeroDivisionError, etc.</li> <li>Raising Exceptions</li> </ol> </li> <li>Packages -</li> <li>Need for packages</li> <li>Modules vs Packages</li> <li>Local modules</li> <li>Package initialization</li> <li>Package modules</li> <li>Projects -</li> <li>Cash Register -&gt; VOC-DTP Walk through</li> <li>Game - Save Zortan -&gt; Thinking In Layers</li> <li>What To Learn Next -<ol> <li>File &amp; Folder Handling</li> <li>Iterators &amp; Generators</li> <li>List Comprehensions</li> <li>Data serialization and de-serialization</li> <li>Decorators</li> <li>Abstract Base Classes</li> <li>OOP's</li> <li>Multi-Threading &amp; Multi-Processing</li> <li>Concurrency &amp; Asyncio</li> <li>Testing</li> <li>Web Frameworks - Django, Flask &amp; Fastapi</li> <li>Machine Learning &amp; Deep Learning</li> </ol> </li> </ol>"},{"location":"courses/python/modern-python-101/#final-words","title":"Final Words","text":"<p>Last But Most Important - Solve More Problems...!!!</p>"},{"location":"courses/python/modern-python-101/#code","title":"Code","text":"<p>Github Repo</p>"},{"location":"courses/python/modern-python-101/#buy-me-a-coffee","title":"Buy Me A Coffee","text":""},{"location":"tutorials/","title":"All Tutorials","text":"<ol> <li>Python</li> <li>Go</li> </ol>"},{"location":"tutorials/elixir/basics/basic-operations/","title":"Basic Operations","text":""},{"location":"tutorials/elixir/basics/basic-operations/#todo","title":"TODO","text":""},{"location":"tutorials/elixir/basics/data-types/","title":"Data Types","text":""},{"location":"tutorials/elixir/basics/data-types/#todo","title":"TODO","text":""},{"location":"tutorials/elixir/basics/hello_elixir/","title":"Hello Elixir","text":"<p>Learn how to make your first <code>Hello World</code> program in Elixir.</p>"},{"location":"tutorials/elixir/basics/hello_elixir/#using-iex","title":"Using IEx","text":"<p>Open your terminal and start IEx -</p> <pre><code>$ iex\niex(1)&gt;\n</code></pre> <p>Write the following into your IEx -</p> <pre><code>iex(1)&gt; IO.puts(\"Hello World\")\n</code></pre> <p>Output -</p> <pre><code>Hello World\n:ok\n</code></pre>"},{"location":"tutorials/elixir/basics/hello_elixir/#using-script-file","title":"Using Script File","text":"<p>Create a file <code>hello_world.exs</code> and enter the following - </p> <pre><code>IO.puts(\"Hello World\")\n</code></pre> <p>Elixir files can be created using two extension <code>exs</code> or <code>ex</code>, <code>exs</code> is normally used for creating scripts and <code>ex</code> for creating compiled files.</p> <p>Here we will be working with script file, later we will explore working with <code>ex</code> extensions for compiled files.</p> <p>To run the script, open the terminal and navigate to the folder that contains the <code>hello_world.exs</code> file and run the following -</p> <pre><code>$ elixir hello_world.exs\n</code></pre> <p>Output</p> <pre><code>$ elixir hello_world.exs\n\"Hello World\"\n</code></pre> <p>That's it! You just created your file Elixir program.</p>"},{"location":"tutorials/elixir/basics/hello_elixir/#io","title":"IO","text":"<p>Wondering what is this <code>IO</code> ? It is simply a built-in module provided by Elixir, it is automatically imported and is made available to use, we will cover more about modules later. In addition to <code>IO</code> there are a lot of modules made available, be sure to check out the official documentation for a complete list.</p> <p><code>puts</code> is simply a function defined in <code>IO</code> module, we invoke the function by passing a argument <code>IO.puts(\"Hello World\")</code> , this in turn prints \"Hello World\" to our terminal.</p> <p>Elixir is pretty flexible about its syntax, you can omit the brackets and it will work just the same -</p> <pre><code>iex(1)&gt; IO.puts \"Hello World\"\nHello World\n:ok\n</code></pre> <p>The choice of using brackets or not is upto you, personally I like using brackets, it makes the code easier to read, but it's just my personal preference.</p>"},{"location":"tutorials/elixir/basics/hello_elixir/#exercises","title":"Exercises","text":"<p>1) Create and run a script file that will print the following. Make sure to make a new file with <code>exs</code> extension and run it from your terminal.</p> <p><code>\"Elixir Rocks!!!\"</code></p> <p>2) And one more script that will print -</p> <p><code>\"Hi, my name is Octallium and I am learning Elixir\"</code></p> <p>3) What is the result of -</p> <pre><code>iex(1)&gt; IO.puts 7 + 6\n</code></pre> <p>4) And</p> <pre><code>iex(1)&gt; IO.puts \"7 + 6\"\n</code></pre> <p>5) For some fun try running this -</p> <pre><code>iex(1)&gt; IO.puts \"Hello \" &lt;&gt; \"World\"\n</code></pre> <p>Don't skip the exercises if you really want to learn Elixir! However simple they may seem, its important to try them out yourself!</p>"},{"location":"tutorials/elixir/basics/hello_elixir/#please-consider-a-donation","title":"Please Consider a Donation \u2764\ufe0f","text":"<p>If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable.</p> <p>Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:</p> <p></p>"},{"location":"tutorials/elixir/basics/iex/","title":"Interactive Elixir Shell","text":"<p>Learn how to interact with the interactive shell and get started.</p>"},{"location":"tutorials/elixir/basics/iex/#iex","title":"IEx","text":"<p>To enter the interactive shell open your terminal and type the following</p> <p>For mac, freeBSD or linux -</p> <pre><code>$ iex\niex(1)&gt;\n</code></pre> <p>For windows - </p> <pre><code>c:\\&gt; iex.bat\niex(1)&gt;\n</code></pre> <p>Interactive shell provides a convenience method for using elixir. Let's try to explore it.</p> <pre><code>iex(1)&gt; IO.puts(\"Hello, World\")\n</code></pre> <p>You get back a response -</p> <pre><code>Hello, World\n:ok\n</code></pre> <p>Don't worry about <code>:ok</code>, its called as an <code>atom</code> and we will come back to it later. To exit the IEx press <code>ctrl-c</code> twice.</p>"},{"location":"tutorials/elixir/basics/iex/#helper-functions","title":"Helper Functions","text":"<p>IEx provides all sorts of helper function, we will see them as required in future tutorials, for now again open the IEx and type the following -</p> <pre><code>iex(1)&gt;i 43\n</code></pre> <p>What output do you see?</p> <pre><code>Term\n  43\nData type\nInteger\nReference modules\n  Integer\nImplemented protocols\n  IEx.Info, Inspect, List.Chars, String.Chars\n</code></pre> <p>Using the flag <code>i</code> the interactive shell provided you with a lot of data, lets try putting something else this time.</p> <pre><code>iex(2)&gt; i \"Hello, World\"\n</code></pre> <p>Output</p> <pre><code>Term\n  \"Hello, World\"\nData type\nBitString\nByte size\n  12\nDescription\n  This is a string: a UTF-8 encoded binary. It's printed surrounded by\n  \"double quotes\" because all UTF-8 encoded code points in it are printable.\nRaw representation\n  &lt;&lt;72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100&gt;&gt;\nReference modules\n  String, :binary\nImplemented protocols\n  Collectable, IEx.Info, Inspect, List.Chars, String.Chars\n</code></pre> <p>Notice the <code>Data type</code> is showing <code>BitString</code> this time, earlier for <code>43</code> the data type was <code>Integer</code>, IEx is trying to help by providing all the information that it available.</p>"},{"location":"tutorials/elixir/basics/iex/#exercises","title":"Exercises","text":"<p>Now, its time for some fun exercises, type the following and see what output do you get</p> <pre><code>iex(1)&gt; i 'a'\niex(2)&gt; i 2.56\niex(3)&gt; i :hello\niex(4)&gt; i true\n</code></pre> <p>Just read all the outputs, you are not required to understand everything just yet, but try to read and make sense of the output.</p> <p>Don't skip the exercises if you really want to learn Elixir! However simple they may seem, its important to try them out yourself!</p>"},{"location":"tutorials/elixir/basics/iex/#please-consider-a-donation","title":"Please Consider a Donation \u2764\ufe0f","text":"<p>If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable.</p> <p>Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:</p> <p></p>"},{"location":"tutorials/elixir/basics/installation/","title":"Installation","text":"<p>Learn how to install Elixir and how to setup your machine for development.</p> <p>At the time of writing, the latest stable version is Elixir 1.10.0, you may have a different version depending when you are reading this tutorial.</p>"},{"location":"tutorials/elixir/basics/installation/#mac-os","title":"Mac OS","text":"<p>Installing Elixir couldn't be any easy, just make sure you have Brew installed and then type the following in the terminal -</p> <pre><code>brew install elixir\n</code></pre>"},{"location":"tutorials/elixir/basics/installation/#windows","title":"Windows","text":"<p>On windows you can install Elixir as you would install just about any program, all you need to do is to download the installer and press next till it is installed.</p>"},{"location":"tutorials/elixir/basics/installation/#other-platforms","title":"Other Platforms","text":"<p>Elixir offers excellent support for all other platforms including FreeBSD and other unix derived languages, check out this page for documentation.</p>"},{"location":"tutorials/elixir/basics/installation/#checking-installation","title":"Checking Installation","text":"<p>You can check the installation, by typing the following in your terminal or powershell -</p> <pre><code>elixir -v\n</code></pre> <p>Output -</p> <pre><code>Erlang/OTP 22 [erts-10.6.4] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:1] [hipe] [dtrace]\n\nElixir 1.10.2 (compiled with Erlang/OTP 22)\n</code></pre> <p>Line 3 indicates that Elixir 1.10.2 has been installed and Elixir has been compiled with Erlang 22.0</p>"},{"location":"tutorials/elixir/basics/installation/#setting-up-your-editor","title":"Setting up your editor","text":"<p>Elixir is supported in all the leading editors and IDE's, two of the most commonly used editors are -</p>"},{"location":"tutorials/elixir/basics/installation/#vs-code","title":"VS Code","text":"<p>You only need to install this plugin. Optionally you can also install this plugin for code formatting.</p>"},{"location":"tutorials/elixir/basics/installation/#atom","title":"Atom","text":"<p>You need to install this plugin.</p> <p>Further, I have read nice reviews for Spacemacs, however I have not tested it personally.</p>"},{"location":"tutorials/elixir/basics/installation/#please-consider-a-donation","title":"Please Consider a Donation \u2764\ufe0f","text":"<p>If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable.</p> <p>Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:</p> <p></p>"},{"location":"tutorials/elixir/basics/introduction/","title":"Introduction to Elixir","text":"<p>Learn Elixir</p> <p>The <code>Only</code> Elixir Tutorials On The Planet For Complete Beginners Exclusively On Octallium!</p>"},{"location":"tutorials/elixir/basics/introduction/#introduction","title":"Introduction","text":"<p>Considering Elixir ? Or maybe just curious ? Chances are you already have some experience with programming or if you are a complete beginner, I couldn't be any more happy!</p> <p>Before getting along with actual coding, let's get a couple of things straight, Elixir is not a silver bullet to all your problems, ever heard of Hammer Syndrome?</p> <p>It implies that, \"If you only have a hammer, then every problem looks like a nail!\", but in the practical world things are very different, problems are various and in different domains. Then where would you use Elixir?</p>"},{"location":"tutorials/elixir/basics/introduction/#scenario","title":"Scenario","text":"<p>Let's consider this, the world basically works by communication, communication is required in every aspects of life, products communicate their utility, services communicate their usability, consumer communicate their requirements, etc, and in this world of communication data is constantly being passed from one point to another.</p> <p>Elixir is extremely well suited for these applications, it really shines when data has to be transformed and transferred in a highly concurrent, distributed and fault tolerant manner. Often, data has to be transformed to suit the end users, Elixir with all its eco-system is a perfectly capable system for it. Perhaps, that's why products like WhatsApp, Discord &amp; Telecom sector rely so highly on it.</p>"},{"location":"tutorials/elixir/basics/introduction/#understanding-elixir","title":"Understanding Elixir","text":"<p>Elixir is a functional programming language, the word functional is important as it does not have the concept of Objects or Classes and has immutable data types, if you come from a Object Orientated Language then you need to unlearn a lot of concepts in order to understand the functional paradigm.</p> <p>Programming need not only be object oriented, functional programming is a beautiful way of thinking, also it takes away a lot of pain as you don't need to keep a track of the state of objects.</p>"},{"location":"tutorials/elixir/basics/introduction/#about-erlangelixir","title":"About Erlang/Elixir","text":"<p>Erlang/Elixir looks as if it has a cryptic syntax and functional programming makes them look difficult on the surface, but its really not the case, they are really great to work with and specially Elixir is designed to make developers feel happy.</p> <p>We need to give it, other languages did a fantastic job of presenting themself in a much better way, also the amount of marketing, conferences, sponsorships, etc have really shaped them to be much popular and widely used. But being popular does not necessarily mean better, Erlang and Elixir really shines in what they do, perhaps they just need better marketing efforts.</p>"},{"location":"tutorials/elixir/basics/introduction/#what-is-erlang-elixir-and-phoenix","title":"What is Erlang, Elixir And Phoenix","text":"<p>Erlang/OTP is a concurrent functional programming language that forms the basic foundation, it was developed by Ericsson in 1986 and made open source in 1998. Erlang runs on its virtual machine called as the BEAM. OTP simply stands for Open Telecom Platform.</p> <p>Elixir builds on top of Erlang and provides a nice and easy way of interacting with the underlying system. It provides abstraction over Erlang, so that its easier for developers to code and finally it compiles and runs on BEAM.</p> <p>Phoenix Framework is a great set of tooling to create mature and blazing fast web applications, its based on Elixir and offers excellent framework to create highly scalable and concurrent distributed applications.</p> <p>We would be more focused on Elixir &amp; Phoenix, but keep it mind that finally everything is compiled and runs on the BEAM.</p> <p>Elixir &amp; Phoenix also has very good set of online documentation and the communities are also generally warm and helpful.</p> <p>Let the magic begin!</p>"},{"location":"tutorials/elixir/basics/introduction/#getting-help","title":"Getting Help","text":"<p>Elixir has a set of very nice online documentation and guides.</p> <p>Elixir Forum is an excellent place to post queries and interact with the community.</p>"},{"location":"tutorials/elixir/basics/introduction/#please-consider-a-donation","title":"Please Consider a Donation \u2764\ufe0f","text":"<p>If you would like to see videos and articles coming up much faster then please consider a small donation. It needs your support and love to keep the activity sustainable.</p> <p>Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:</p> <p></p>"},{"location":"tutorials/elixir/basics/lists/","title":"TODO","text":""},{"location":"tutorials/elixir/basics/pattern-matching/","title":"TODO","text":""},{"location":"tutorials/elixir/basics/strings/","title":"TODO","text":""},{"location":"tutorials/go/basic/add-comment/","title":"How To Add A  Comment.","text":""},{"location":"tutorials/go/basic/add-comment/#objective","title":"Objective","text":"<p>Learn how to add a comment in the code.</p>"},{"location":"tutorials/go/basic/add-comment/#requirement","title":"Requirement","text":"<p>Adding comments is a very handy way of adding documentation to your code, it serves as a tool to let others know what you have written and makes navigating your code an easy task.</p> <p>Go has a specific format for adding comments and recommends adding comments wherever it makes sense.</p>"},{"location":"tutorials/go/basic/add-comment/#code","title":"Code","text":"<p>Adding a comment is pretty easy</p> <pre><code>// This is a comment\n</code></pre> <p>The compiler ignores the comment and runs your code, however as humans for us to remmember what we have written and for others to understand writing comments would make sense.</p>"},{"location":"tutorials/go/basic/add-comment/#hello-world-with-comment","title":"Hello World With Comment","text":"Hello World <pre><code>1 // Declaring that the file belongs to the main package\n2 package main\n3\n4 // Importing the package \"fmt\"\n5 import \"fmt\"\n6\n7 // Declaring the main function\n8 func main() {\n9\n10 // Printing Hello World to the standard output\n11 fmt.Println(\"Hello, World!\")\n12 }\n13 // main function ends\n</code></pre>"},{"location":"tutorials/go/basic/add-comment/#golang-playground","title":"Golang Playground","text":"Hello World With Comment <p>Click on the below link:</p> <p>Hello World With Comments</p>"},{"location":"tutorials/go/basic/add-comment/#next","title":"Next","text":"<p>Now that you know how to write comments, lets start with writing code with beautiful comments, but before we actually start writing more code there is one small step, we need to understand  Data Types</p> <p>Click on the next section to understand basic data types in Go.</p>"},{"location":"tutorials/go/basic/add-comment/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/basic/array/","title":"Understanding Data Structure of Type  Array.","text":""},{"location":"tutorials/go/basic/array/#objective","title":"Objective","text":"<p>Understanding  Array's in Go.</p> <p></p> <p>Imagine walking into an ice-cream store, you see all different flavour displayed nicely side-by-side, tempting isn't it ? You can easily see all the flavours and make your choice easily. This display of various ice-cream flavours is nothing by an \"array\" with the common item type of \"ice-cream\" !</p> <p>Go offers a couple of in-build data structures and one of them is an \"array\", you can imagine array as a collection of similar items, i.e you can group together common items.</p> <p>The advantage of array is that it gives you easy access to data, also data can be organized properly by using arrays, however arrays are fixed in size, to overcome this Go offers \"slice\" which we will cover in the next chapter.</p>"},{"location":"tutorials/go/basic/array/#structure","title":"Structure","text":"<p>Navigate to our code folder</p> <pre><code>code/basic/\n</code></pre> <p>For our program create a new folder '11_array'</p> <pre><code>code/basic/11_array/\n</code></pre> <p>And lets create a file 'array.go' in it, finally the structure would look like this:</p> <pre><code>code/basic/11_array/array.go\n</code></pre>"},{"location":"tutorials/go/basic/array/#declaration","title":"Declaration","text":"<p>Syntax</p> <pre><code>var arrayName[size] type\n</code></pre> <p>Or declaration &amp; initialization method</p> <pre><code>arrayName := [size]type{value1, value2, ...}\n</code></pre>"},{"location":"tutorials/go/basic/array/#code","title":"Code","text":"<p>We will write the code in 2 parts:</p> <p>1.)</p> Part-1 array.go <pre><code>    1 package main\n2\n3 import \"fmt\"\n4\n5 func main() {\n6 // declaring an array of type int\n7 var array1 [5]int\n8 fmt.Println(\"The values of array1 are:\", array1)\n9 fmt.Println(\"The length of array1 is:\", len(array1))\n10 fmt.Println()\n11\n12 // adding values into the array\n13 fmt.Println(\"Adding values to array1\")\n14 array1[0] = 29\n15 array1[1] = 17\n16 array1[2] = 42\n17 array1[3] = 13\n18 array1[4] = 56\n19 fmt.Println(\"Now the values of array1 are:\", array1)\n20 fmt.Println()\n21\n22 // Reading all values from array1 using for-range loop\n23 fmt.Println(\"Reading all the values from array1 using for-range loop...\")\n24 for index, value := range array1 {\n25 fmt.Printf(\"Index: %d Value: %d\\n\", index, value)\n26 }\n27 fmt.Println()\n28\n</code></pre> <p>Review</p> <p>On line 7 we declare an array of type int with a length of 5 and print out the empty array.</p> <pre><code>var array1 [5]int\n</code></pre> <p>On line 9 we print out the length of the array using a built-in function \"len\".</p> <pre><code>fmt.Println(\"The length of array1 is:\", len(array1))\n</code></pre> <p>From line 14 to 18 we initialize values to the array and then finally print out the filled array. The final array will look like the below image.</p> <p></p> <p>Did you notice that the index position starts from \"0\" and not from \"1\" !</p> <p>So an array of length 5 will have index positions of 0, 1, 2, 3 &amp; 4.</p> <p>On line 24 we are using a \"for-range\" loop to print out the values, notice that we declare two variables \"index\" and \"position\" and then range over the array.</p> <pre><code>for index, value := range array1\n</code></pre> <p>What this does is, it iterates over each element one by one and prints out the value &amp; index, we don't have to declare variables and iterate, remember we used to write:</p> <p>for i:= 0; i &lt; n; i++ { do something }</p> <p>Instead we can write it with much cleaner syntax using for-range loop, for-range loops are extensively used in Go. If you don't want to use any value, you can simply discard it using \"_\" , for example if you do not want index position, you can declare for-range as:</p> <pre><code>for _, value : range array1 {\n    do something\n}\n</code></pre> <p>The underscore \"_\" simply tells the Go compiler to ignore the value.</p> <p>2.)</p> Part-2 array.go <pre><code>    29    // declaring an array of type string with shorthand method\n30    cities := [5]string{\"New York\", \"Seattle\", \"Mumbai\", \"Sydney\", \"Montreal\"}\n31    fmt.Println(\"The values of cities array are:\", cities)\n32    fmt.Println()\n33\n34    // Reading specific values\n35    fmt.Println(\"Reading values from cities array using index position...\")\n36    fmt.Println(\"The first city is:\", cities[0])\n37    fmt.Println(\"The 3rd city is:\", cities[2])\n38    fmt.Println(\"The last city is:\", cities[4])\n39    fmt.Println(\"The last city can also be found by:\", cities[len(cities)-1])\n40    fmt.Println()\n41\n42    // changing values\n43    fmt.Println(\"Changing the value at cities[0] to Paris...\")\n44    cities[0] = \"Paris\"\n45    fmt.Println(\"The value at cities[0] is:\", cities[0])\n46 }\n</code></pre> <p>Review</p> <p>On line 30 we declare and initialze the array at the same time</p> <pre><code>cities := [5]string{\"New York\", \"Seattle\", \"Mumbai\", \"Sydney\", \"Montreal\"}\n</code></pre> <p>We can access values at select index, checkout the lines from 36 to 39.</p> <pre><code>fmt.Println(\"The first city is:\", cities[0])\nfmt.Println(\"The 3rd city is:\", cities[2])\nfmt.Println(\"The last city is:\", cities[4])\nfmt.Println(\"The last city can also be found by:\", cities[len(cities)-1])\n</code></pre> <p>We can also change the values in an array, on line 44 we change the value of cities[0] from New York to Paris.</p> <pre><code>cities[0] = \"Paris\"\n</code></pre>"},{"location":"tutorials/go/basic/array/#full-code","title":"Full Code","text":"array.go <pre><code>    package main\n\nimport \"fmt\"\n\nfunc main() {\n// declaring an array of type int\nvar array1 [5]int\nfmt.Println(\"The values of array1 are:\", array1)\nfmt.Println(\"The length of array1 is:\", len(array1))\nfmt.Println()\n\n// adding values into the array\nfmt.Println(\"Adding values to array1\")\narray1[0] = 29\narray1[1] = 17\narray1[2] = 42\narray1[3] = 13\narray1[4] = 56\nfmt.Println(\"Now the values of array1 are:\", array1)\nfmt.Println()\n\n// Reading all values from array1 using for-range loop\nfmt.Println(\"Reading all the values from array1 using for-range loop...\")\nfor index, value := range array1 {\nfmt.Printf(\"Index: %d Value: %d\\n\", index, value)\n}\nfmt.Println()\n\n// declaring an array of type string with shorthand method\ncities := [5]string{\"New York\", \"Seattle\", \"Mumbai\", \"Sydney\", \"Montreal\"}\nfmt.Println(\"The values of cities array are:\", cities)\nfmt.Println()\n\n// Reading specific values\nfmt.Println(\"Reading values from cities array using index position...\")\nfmt.Println(\"The first city is:\", cities[0])\nfmt.Println(\"The 3rd city is:\", cities[2])\nfmt.Println(\"The last city is:\", cities[4])\nfmt.Println(\"The last city can also be found by:\", cities[len(cities)-1])\nfmt.Println()\n\n// changing values\nfmt.Println(\"Changing the value at cities[0] to Paris...\")\ncities[0] = \"Paris\"\nfmt.Println(\"The value at cities[0] is:\", cities[0])\n}\n</code></pre>"},{"location":"tutorials/go/basic/array/#running-your-code","title":"Running your code","text":"<p>Open your terminal and navigate to our folder</p> <pre><code>code/basic/11_array/\n</code></pre> <p>Once in the folder type the following command</p> <pre><code>go run array.go\n</code></pre>"},{"location":"tutorials/go/basic/array/#output","title":"Output","text":"<p>If there are no errors, you should get the output as:</p> Output <pre><code>The values of array1 are: [0 0 0 0 0]\nThe length of array1 is: 5\n\nAdding values to array1\nNow the values of array1 are: [29 17 42 13 56]\n\nReading all the values from array1 using for-range loop...\nIndex: 0 Value: 29\nIndex: 1 Value: 17\nIndex: 2 Value: 42\nIndex: 3 Value: 13\nIndex: 4 Value: 56\n\nThe values of cities array are: [New York Seattle Mumbai Sydney Montreal]\n\nReading values from cities array using index position...\nThe first city is: New York\nThe 3rd city is: Mumbai\nThe last city is: Montreal\nThe last city can also be found by: Montreal\n\nChanging the value at cities[0] to Paris...\nThe value at cities[0] is: Paris\n</code></pre> <p>If for some reason your code isn't working, checkout the github repo.</p>"},{"location":"tutorials/go/basic/array/#github","title":"Github","text":"<p>Github Repo</p>"},{"location":"tutorials/go/basic/array/#golang-playground","title":"Golang Playground","text":"<p>Golang Playground</p>"},{"location":"tutorials/go/basic/array/#limitation","title":"Limitation","text":"<p>Imagine you data is increasing and now you have 100 cities instead of 5, but the array can only hold 5 values, to overcome this limitation Go ships with a flexible type called as \"Slice\".</p>"},{"location":"tutorials/go/basic/array/#next","title":"Next","text":"<p>We will study  slices in depth in the next chapter.</p>"},{"location":"tutorials/go/basic/array/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/basic/basic-data-types/","title":"Understanding The Basic  Data Types In Go","text":""},{"location":"tutorials/go/basic/basic-data-types/#objective","title":"Objective","text":"<p>Learn the basic data types in Go</p>"},{"location":"tutorials/go/basic/basic-data-types/#data-types","title":"Data Types","text":"<p>For a new programmer, data types sounds geeky enough, but really there isn't much to it, lets see below how it works out.</p> <p>If I ask you, what's your name ? Yours answer would be something like this:</p> <pre><code>My name is Bond, James Bond\n</code></pre> <p>This is nothing but data type of  string, in plain english string is nothing but a collection of characters.</p> <p>Now, if I ask you, how old are you ? You would say something like:</p> <pre><code>28\n</code></pre> <p>Since age is a number or a digit, it belongs to the data type of  int , int stands for integer which means whole numbers without decimals.</p> <p>Let's get more curious and ask James Bond, you have a nice watch, how much did it cost ? He would say:</p> <pre><code>$ 105.23\n</code></pre> <p>Now you see nice it has a decimal value, it is called as a data type of  float, float is just another fancy way of saying, its a digit with decimal values.</p> <p>James Bond is getting irritated with our question, so lets ask a final question and wrap it up, lets ask, is it true that you are licensed to kill ? He would say</p> <pre><code>True\n</code></pre> <p>True is neither a digit or a string, its a condition, so it belongs to the data type of  boolean, boolean values can be only True or False.</p> <p>In reality the above data types are of very basic types, Go has much more to it, also Go has different varieties of int, float, etc. But for now lets take it easy, we will see different data types as we progress with our code.</p>"},{"location":"tutorials/go/basic/basic-data-types/#next","title":"Next","text":"<p>So now you know what are the basic data types in Go, in the next section we will start using them by declaring something called as  variables and  constants.</p>"},{"location":"tutorials/go/basic/basic-data-types/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/basic/basic/","title":"Basic","text":"<p>In this section we will understand language syntax, instead of just reading theory, lets dive into code and I will explain everything as we start writing our programs.</p> <p>Start with the next section to write a  \"Hello, World!\" program in Go.</p>"},{"location":"tutorials/go/basic/basic/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/basic/for_loops/","title":"Understanding  For Loops.","text":""},{"location":"tutorials/go/basic/for_loops/#objective","title":"Objective","text":"<p>To understand  for loops.</p> <p>Go offers only \"for\" loops for doing repetitive tasks, if you come from some other languages there are no \"while\" or \"do-while\" loops in Go, instead \"for\" loops have a flexible syntax and offers all the looping functions.</p> <p>General syntax is:</p> <pre><code>for condition {\n    do something\n}\n</code></pre>"},{"location":"tutorials/go/basic/for_loops/#structure","title":"Structure","text":"<p>Navigate to our code folder</p> <pre><code>code/basic/\n</code></pre> <p>For our program create a new folder '08_for_loops'</p> <pre><code>code/basic/08_for_loops\n</code></pre> <p>And lets create a file 'for_loops.go' in it, finally the structure would look like this:</p> <pre><code>code/basic/08_for_loops/for_loops.go\n</code></pre>"},{"location":"tutorials/go/basic/for_loops/#code","title":"Code","text":"<p>The code will be divided into four parts:</p> <p>1.)</p> for loops <pre><code>    1 package main\n2\n3 import \"fmt\"\n4\n5 func main() {\n6 // Variation 1 - conditional loop\n7 num1 := 0\n8 fmt.Println(\"Starting for loop...\")\n9 for i := 0; i &lt; 11; i++ {\n10 fmt.Println(\"Num =\", num1)\n11 num1++\n12 }\n13 fmt.Println()\n</code></pre> <p>Review</p> <p>Line 9 declared a for loop along with condition</p> <pre><code>for i := 0; i &lt; 11; i++ {\n</code></pre> <p>We initial the variable \"i\" and set it to \"0\", then we say loop till \"i is less than 11\" and after each pass do \"i++\", i.e increment the value of \"i\" by 1.</p> <p>Line 10 prints the value after each pass and on line 11 we increment the value of num</p> <pre><code>fmt.Println(\"Num =\", num1)\nnum1++\n</code></pre> <p>2.)</p> for loops <pre><code>    14 // Variation 2 - Infinite loop\n15 num2 := 20\n16 fmt.Println(\"Entering infinite loop...\")\n17 for {\n18 // break condition\n19 if num2 &lt; 10 {\n20 break\n21 }\n22 fmt.Println(\"Num =\", num2)\n23 num2--\n24 }\n25 fmt.Println()\n</code></pre> <p>Review</p> <p>On line 17 we start a infinite loop, the for loop will keep on executing till it encounters a break condition or runs out of memory</p> <pre><code>for {\n</code></pre> <p>On line 19 we check for a break condition</p> <pre><code>if num2 &lt; 10\n</code></pre> <p>3.)</p> for loops <pre><code>    26 // Variation 3 - Optional statements\n27 num3 := 20\n28 fmt.Println(\"Loop with optional statements...\")\n29 for num3 &lt;= 30 {\n30 fmt.Println(\"Num =\", num3)\n31 num3++\n32 }\n33 fmt.Println()\n</code></pre> <p>Review</p> <p>On line 29 we start a loop with operational statements, the loop will break when it fulfills the condition.</p> <pre><code>for num3 &lt;= 30\n</code></pre> <p>Note we have declared and initialized \"num3\" on line 27</p> <pre><code>num3 := 20\n</code></pre> <p>4.)</p> for loops <pre><code>    34 // Variation 4 - Boolean operators\n35 cond := true\n36 num4 := 30\n37 fmt.Println(\"Loops with boolean operator...\")\n38 for cond {\n39 if num4 &gt;= 40 {\n40 cond = false\n41 }\n42 fmt.Println(\"Num =\", num4)\n43 num4++\n44 }\n45 }\n</code></pre> <p>Review</p> <p>We declare a boolean condition on line 35, and start the loop on line 38</p> <pre><code>for cond\n</code></pre> <p>In order to break the loop we set the condition on line 39</p> <pre><code>if num4 &gt;= 40 {\n    cond = false\n}\n</code></pre>"},{"location":"tutorials/go/basic/for_loops/#full-code","title":"Full Code","text":"Complete For-Loop Code <pre><code>    package main\n\nimport \"fmt\"\n\nfunc main() {\n// Variation 1 - conditional loop\nnum1 := 0\nfmt.Println(\"Starting for loop...\")\nfor i := 0; i &lt; 11; i++ {\nfmt.Println(\"Num =\", num1)\nnum1++\n}\nfmt.Println()\n// Variation 2 - Infinite loop\nnum2 := 20\nfmt.Println(\"Entering infinite loop...\")\nfor {\n// break condition\nif num2 &lt; 10 {\nbreak\n}\nfmt.Println(\"Num =\", num2)\nnum2--\n}\nfmt.Println()\n// Variation 3 - Optional statements\nnum3 := 20\nfmt.Println(\"Loop with optional statements...\")\nfor num3 &lt;= 30 {\nfmt.Println(\"Num =\", num3)\nnum3++\n}\nfmt.Println()\n// Variation 4 - Boolean operators\ncond := true\nnum4 := 30\nfmt.Println(\"Loops with boolean operator...\")\nfor cond {\nif num4 &gt;= 40 {\ncond = false\n}\nfmt.Println(\"Num =\", num4)\nnum4++\n}\n}\n</code></pre>"},{"location":"tutorials/go/basic/for_loops/#run-code","title":"Run Code","text":"<p>Open your terminal and navigate to our folder</p> <pre><code>code/basic/08_for_loops\n</code></pre> <p>Once in the folder type the following command</p> <pre><code>go run for_loops.go\n</code></pre>"},{"location":"tutorials/go/basic/for_loops/#output","title":"Output","text":"Output <pre><code>Starting for loop...\nNum = 0\nNum = 1\nNum = 2\nNum = 3\nNum = 4\nNum = 5\nNum = 6\nNum = 7\nNum = 8\nNum = 9\nNum = 10\n\nEntering infinite loop...\nNum = 20\nNum = 19\nNum = 18\nNum = 17\nNum = 16\nNum = 15\nNum = 14\nNum = 13\nNum = 12\nNum = 11\nNum = 10\n\nLoop with optional statements...\nNum = 20\nNum = 21\nNum = 22\nNum = 23\nNum = 24\nNum = 25\nNum = 26\nNum = 27\nNum = 28\nNum = 29\nNum = 30\n\nLoops with boolean operator...\nNum = 30\nNum = 31\nNum = 32\nNum = 33\nNum = 34\nNum = 35\nNum = 36\nNum = 37\nNum = 38\nNum = 39\nNum = 40\n</code></pre>"},{"location":"tutorials/go/basic/for_loops/#note","title":"Note","text":"<p>Go ships with one more variant know as \"for - range\", we will study it in the coming chapters.</p>"},{"location":"tutorials/go/basic/for_loops/#github","title":"Github","text":"<p>Just in case you have some errors with your code, you can check out the code at github repo</p> <p>Github Repo</p>"},{"location":"tutorials/go/basic/for_loops/#golang-playground","title":"Golang Playground","text":"<p>You can also run the code at playground</p> <p>Golang Playground</p>"},{"location":"tutorials/go/basic/for_loops/#next","title":"Next","text":"<p>In the next chapter we will learn about  function declaration.</p>"},{"location":"tutorials/go/basic/for_loops/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/basic/functions/","title":"Understanding  Functions.","text":""},{"location":"tutorials/go/basic/functions/#objective","title":"Objective","text":"<p>To understand  functions in Go.</p> <p>Functions are first class citizens in Go, in fact you have already been using functions, we have been declaring \"main\" function and using it from our first program.</p> <p>General syntax is:</p> <pre><code>func funcName(optional parameters) return parameters {\n    do something\n}\n</code></pre>"},{"location":"tutorials/go/basic/functions/#structure","title":"Structure","text":"<p>Navigate to our code folder</p> <pre><code>code/basic/\n</code></pre> <p>For our program create a new folder '09_functions'</p> <pre><code>code/basic/09_functions/\n</code></pre> <p>And lets create a file 'functions.go' in it, finally the structure would look like this:</p> <pre><code>code/basic/09_functions/functions.go\n</code></pre>"},{"location":"tutorials/go/basic/functions/#code","title":"Code","text":"<p>The code will be divided into four parts:</p> <p>1.)</p> Functions <pre><code>    1 package main\n2\n3 import \"fmt\"\n4\n5 // sayHello prints \"Hello, Octy!\"\n6 func sayHello() {\n7 fmt.Println(\"In func sayHello()...\")\n8 fmt.Println(\"Hello, Octy!\")\n9 fmt.Println()\n10 }\n11\n</code></pre> <p>Review</p> <p>Line 6 defines a function \"sayHello\" which prints \"Hello, Octy!\" on screen</p> <pre><code>func sayHello()\n</code></pre> <p>2.)</p> Functions <pre><code>    12 // function with passing values\n13 func sayHelloTo(name string) {\n14 fmt.Println(\"In func sayHelloTo()...\")\n15 fmt.Println(\"Hello,\", name)\n16 fmt.Println()\n17 }\n18\n</code></pre> <p>Review</p> <p>On line 13 we declare a function \"sayHelloTo\" with accepts a parameter.</p> <pre><code>func sayHelloTo(name string)\n</code></pre> <p>sayHelloTo accepts a string \"name\" as a parameter and then print it on line 15.</p> <p>3.)</p> Functions <pre><code>    19 // function with return values\n20 func printNums(n int) error {\n21 fmt.Println(\"In func printNums()...\")\n22 var err error\n23 for i := 0; i &lt;= n; i++ {\n24 _, err = fmt.Println(i)\n25 }\n26 return err\n27 }\n28\n</code></pre> <p>Review</p> <p>Line 20 we define a function \"printNums\" with accepts a parameter and returns a parameter of type \"error\".</p> <pre><code>func printNums(n int) error\n</code></pre> <p>On line 22 we define a variable \"err\" of type \"error\", till now we have seen data types of integer, float, boolean, string, similarly Go offers a custom type \"error\".</p> <pre><code>var err error\n</code></pre> <p>Line 24 is a little special, Println() returns two values, \"number of bytes written\" and an \"error\", as we don't want number of bytes written we use a underscore \"_\", Go compiler ignores underscore and throws away its value.</p> <pre><code>_, err = fmt.Println(i)\n</code></pre> <p>We catch the error value in the variable \"err\" and return it on line 26.</p> <pre><code>return err\n</code></pre> <p>4.)</p> Functions <pre><code>    29 // main function\n30 func main() {\n31 fmt.Println(\"In func main()\")\n32 fmt.Println(\"Now calling func sayHello()...\")\n33 fmt.Println()\n34 // calling function sayHello()\n35 sayHello()\n36 // calling a function with passing values\n37 name := \"Gopher\"\n38 sayHelloTo(name)\n39 // calling a function with return parameters\n40 err := printNums(10)\n41 if err == nil {\n42 fmt.Println(\"There are no errors!\")\n43 } else {\n44 fmt.Println(\"Error with printing:\", err)\n45 }\n46 }\n</code></pre> <p>Review</p> <p>We call individual functions on lines 35, 38 &amp; 40.</p> <pre><code>sayHello()\n\nsayHelloTo(name)\n</code></pre> <p>We pass a value \"name\" along with the function.</p> <pre><code>err := printNums(10)\n</code></pre> <p>We call printNums along with a value \"10\" and assign it to the variable \"err\", the return error gets stored in the variable \"err\"</p>"},{"location":"tutorials/go/basic/functions/#full-code","title":"Full Code","text":"Complete Functions Code <pre><code>    package main\n\nimport \"fmt\"\n\n// sayHello prints \"Hello, Octy!\"\nfunc sayHello() {\nfmt.Println(\"In func sayHello()...\")\nfmt.Println(\"Hello, Octy!\")\nfmt.Println()\n}\n\n// function with passing values\nfunc sayHelloTo(name string) {\nfmt.Println(\"In func sayHelloTo()...\")\nfmt.Println(\"Hello,\", name)\nfmt.Println()\n}\n\n// function with return values\nfunc printNums(n int) error {\nfmt.Println(\"In func printNums()...\")\nvar err error\nfor i := 0; i &lt;= n; i++ {\n_, err = fmt.Println(i)\n}\nreturn err\n}\n\n// main function\nfunc main() {\nfmt.Println(\"In func main()\")\nfmt.Println(\"Now calling func sayHello()...\")\nfmt.Println()\n// calling function sayHello()\nsayHello()\n// calling a function with passing values\nname := \"Gopher\"\nsayHelloTo(name)\n// calling a function with return parameters\nerr := printNums(10)\nif err == nil {\nfmt.Println(\"There are no errors!\")\n} else {\nfmt.Println(\"Error with printing:\", err)\n}\n}\n</code></pre>"},{"location":"tutorials/go/basic/functions/#running-your-code","title":"Running your code","text":"<p>Open your terminal and navigate to our folder</p> <pre><code>code/basic/09_functions/\n</code></pre> <p>Once in the folder type the following command</p> <pre><code>go run main.go\n</code></pre>"},{"location":"tutorials/go/basic/functions/#output","title":"Output","text":"Output <pre><code>In func main()\nNow calling func sayHello()...\n\nIn func sayHello()...\nHello, Octy!\n\nIn func sayHelloTo()...\nHello, Gopher\n\nIn func printNums()...\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nThere are no errors!\n</code></pre>"},{"location":"tutorials/go/basic/functions/#github","title":"Github","text":"<p>Just in case you have some errors with your code, you can check out the code at github repo</p> <p>Github Repo</p>"},{"location":"tutorials/go/basic/functions/#golang-playground","title":"Golang Playground","text":"<p>You can also run the code at playground</p> <p>Golang Playground</p>"},{"location":"tutorials/go/basic/functions/#next","title":"Next","text":"<p>In the next chapter we will learn about  packages in Go.</p>"},{"location":"tutorials/go/basic/functions/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/basic/hello-world-understand/","title":"Understanding  \"Hello, World!\" Program.","text":""},{"location":"tutorials/go/basic/hello-world-understand/#objective","title":"Objective","text":"<p>Understanding the Hello World program line-by-line</p>"},{"location":"tutorials/go/basic/hello-world-understand/#code","title":"Code","text":"Hello World <pre><code>1 package main\n2\n3 import \"fmt\"\n4\n5 func main() {\n6   fmt.Println(\"Hello, World!\")\n7 }\n</code></pre>"},{"location":"tutorials/go/basic/hello-world-understand/#code-review","title":"Code Review","text":"<p>Now its time to dive in and understand the code</p> <p>Line 1 -</p> <pre><code>package main\n</code></pre> <p>Declares that this file belongs to the main package, in golang all the files are arranged in packages, we have a entire chapter dedicated to  Packages in future, for now remmember all files at your project directory level belong to package main.</p> <p>Line 3 -</p> <pre><code>import \"fmt\"\n</code></pre> <p>Here we say, they golang I want to import a package called as \"fmt\", \"fmt\" stands for \"format\".</p> <p>\"fmt\" belongs to the golang standard library, means that the Go authors have already written it for you. You can simply import then and use all the code written by experts.</p> <p>Documentation for \"fmt\" can be found here</p> <p>\"fmt\" exposes a lot of functionality to us which we use in the line 6.</p> <p>Line 5 -</p> <pre><code>func main () {\n</code></pre> <p>This is the start or entry point for your code, the compiler will automatically check if  func main() is present or not and start the program from there, it is generally mentioned as</p> <pre><code>main.main\n[package].[function]\n</code></pre> <p>means \"main\" function in \"main\" package</p> <p>Line 6 -</p> <pre><code>fmt.Println(\"Hello, World!)\n</code></pre> <p>Here we use Println function defined in the package \"fmt\" for printing out \"Hello, World!\" on the screen.</p> <p>Now, you can see how we can use functionality written in packages and use it for our ease.</p> <p>Line 7 -</p> <pre><code>}\n</code></pre> <p>Closes the main function, this symbolizes that main function ends here.</p>"},{"location":"tutorials/go/basic/hello-world-understand/#aside","title":"Aside","text":"<p>Wow.. you have now learned your first Go program, even if all of the above doesn't make sense to you right now, don't worry ! You will soon be comfortable with all of that as we progress and write more code.</p> <p>As a beginner, you would want to quit when you don't understand anything, my advise, don't quit just move along and later come back to topics which you didn't understand.</p> <p>Learning code takes patience and persistance, fasten your seat belts and keep learning.</p>"},{"location":"tutorials/go/basic/hello-world-understand/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/basic/hello-world/","title":"Writing a  \"Hello, World!\" program.","text":""},{"location":"tutorials/go/basic/hello-world/#objective","title":"Objective","text":"<p>Write a program which prints \"Hello, World!\" on the screen.</p>"},{"location":"tutorials/go/basic/hello-world/#structure","title":"Structure","text":"<p>Let's create a folder called 'code' anywhere on your machine and we will put all our Go code in it. Inside the 'code' folder lets create one more folder for basic tutorials</p> <pre><code>code/basic/\n</code></pre> <p>For our first program create a new folder '01_hello_world'</p> <pre><code>code/basic/01_hello_world\n</code></pre> <p>And lets create a file 'hello_world.go' in it, finally the structure would look like this:</p> <pre><code>code/basic/01_hello_world/hello_world.go\n</code></pre>"},{"location":"tutorials/go/basic/hello-world/#code","title":"Code","text":"<p>Write the code as shown below, while you can simply copy and paste, its better if you write everything on your own.</p> <p>Don't worry if you code won't work, only then copy and paste the code </p> Hello World <pre><code>1 package main\n2\n3 import \"fmt\"\n4\n5 func main() {\n6   fmt.Println(\"Hello, World!\")\n7 }\n</code></pre>"},{"location":"tutorials/go/basic/hello-world/#running-your-code","title":"Running your code","text":"<p>Open your terminal and navigate to our folder</p> <pre><code>code/01_hello_world/hello_world.go\n</code></pre> <p>Once in the folder type the following command</p> <pre><code>go run hello_world.go\n</code></pre>"},{"location":"tutorials/go/basic/hello-world/#build","title":"Build","text":"<p>Instead of just running let's try to build our code by compiling it to binary.</p> <p>Instead of \"go run\" type the following command</p> <pre><code>go build hello_world.go\n</code></pre> <p>If you are running on a unix based system including mac OSx, you can run the binary by typing</p> <pre><code>./hello_world\n</code></pre>"},{"location":"tutorials/go/basic/hello-world/#output","title":"Output","text":"<p>If there are no errors, you should get the output as:</p> Output <pre><code>Hello, World!\n</code></pre> <p>If for some reason your code isn't working, checkout the golang playground or github links in the following section.</p>"},{"location":"tutorials/go/basic/hello-world/#github","title":"Github","text":"<p>Github Repo</p> <p>That's it,  Congratulations ! You just wrote your first Go program.</p>"},{"location":"tutorials/go/basic/hello-world/#golang-playground","title":"Golang Playground","text":"<p>Golang has a online sandbox environment for running your Go programs, which can be accessed on Golang Playground</p> <p>I will be posting all the playground links for all the code we write, this way you can run them online and compare with your code.</p> Hello World On Playground <p>Click on the below link:</p> <p>Hello World</p>"},{"location":"tutorials/go/basic/hello-world/#next","title":"Next","text":"<p>If you haven't understood anything what you wrote, no worries, you aren't expected to understand it just yet !</p> <p>In the next section we will understand everything line-by-line.</p>"},{"location":"tutorials/go/basic/hello-world/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/basic/if-else/","title":"Conditions  if/else.","text":""},{"location":"tutorials/go/basic/if-else/#objective","title":"Objective","text":"<p>To understand if/else conditions.</p> <p>If/else conditions are of very fundamental importance to programming and are present in all the programming languages.</p> <p>The intent of condition is very simple</p> <pre><code>if condition {\n    do something\n} else {\n    do another thing\n}\n</code></pre>"},{"location":"tutorials/go/basic/if-else/#structure","title":"Structure","text":"<p>Navigate to our code folder</p> <pre><code>code/basic/\n</code></pre> <p>For our program create a new folder '07_if_else'</p> <pre><code>code/basic/07_if_else\n</code></pre> <p>And lets create a file 'if_else.go' in it, finally the structure would look like this:</p> <pre><code>code/basic/07_if_else/if_else.go\n</code></pre>"},{"location":"tutorials/go/basic/if-else/#code","title":"Code","text":"<p>The code will be divided into two parts</p> <p>1.</p> if/else condition <pre><code>package main\nimport \"fmt\"\n\nfunc main() {\nd := \"Dog\" c := \"Cat\"\n// checking the value of variables\nif d == \"Dog\" { fmt.Println(\"Woff\")\n} else {\nfmt.Println(\"I don't know which animal!\")\n}\n</code></pre> <p>Review</p> <p>on line 10 we check if the value of the variable \"d\" is equal to \"Dog\"</p> <pre><code>if d == \"Dog\"\n</code></pre> <p>If the condition is true then we print out \"Woff\"</p> <pre><code>fmt.Println(\"Woff\")\n</code></pre> <p>If the condition is false, we print \"I don't know which animal\"</p> <pre><code>fmt.Println(\"I don't know which animal!\")\n</code></pre> <ol> <li>If/else statements can also be chained if you have multiple conditions</li> </ol> if/else condition <pre><code>16 // You can also chain if / else conditions\n17 if c == \"monkey\" {\n18  fmt.Println(\"I am a monkey.\")\n19 } else if c == \"Dog\" {\n20  fmt.Println(\"I am a dog.\")\n21 } else if c == \"Cat\" {\n22  fmt.Println(\"Meoww\")\n23 }\n24 }\n</code></pre> <p>Review</p> <p>On line 17 we check if value of the variable \"c\" is \"monkey\", if the conditions evaluates to true then we print \"I am a monkey\"</p> <pre><code>if c == \"monkey\"\n</code></pre> <p>If it evaluates to false then we check it once again if it contains the value of \"Dog\"</p> <pre><code>if c == \"Dog\"\n</code></pre> <p>Since, this also evaluates to false, we check for the next condition</p> <pre><code>if c == \"Cat\"\n</code></pre> <p>As it evaluates to true, we print out \"Meoww\" on the screen</p> <pre><code>fmt.Println(\"Meoww\")\n</code></pre> <p>In case if \"c\" does not evaluate to true in any of the case,  nothing will be printed.</p>"},{"location":"tutorials/go/basic/if-else/#running-your-code","title":"Running your code","text":"<p>Open your terminal and navigate to our folder</p> <pre><code>code/basic/07_if_else\n</code></pre> <p>Once in the folder type the following command</p> <pre><code>go run if_else.go\n</code></pre>"},{"location":"tutorials/go/basic/if-else/#output","title":"Output","text":"Output <pre><code>Woff\nMeoww\n</code></pre>"},{"location":"tutorials/go/basic/if-else/#note","title":"Note","text":"<p>Strings in Go are case sensitive, \"monkey\" and \"Monkey\" are evaluated differently, so be sure of using the right case when checking for evaluation.</p>"},{"location":"tutorials/go/basic/if-else/#github","title":"Github","text":"<p>Just in case you have some errors with your code, you can check out the code at github repo</p> <p>Github Repo</p>"},{"location":"tutorials/go/basic/if-else/#golang-playground","title":"Golang Playground","text":"<p>You can also run the code at playground</p> <p>Golang Playground</p>"},{"location":"tutorials/go/basic/if-else/#next","title":"Next","text":"<p>We will see  for loops.</p>"},{"location":"tutorials/go/basic/if-else/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/basic/map/","title":"Understanding Data Structure of Type  Map.","text":""},{"location":"tutorials/go/basic/map/#objective","title":"Objective","text":"<p>Understanding  Map's in Go.</p> <p></p> <p>Imagine yourself creating a team of Avengers and need to add contact details of all your Super Hero's, you essentially would require a phone number be associated with only one Super Hero, this can be easily done using 'Maps' in Go.</p> <p>It is also known as 'Hash Table' in other programming languages and these offer faster lookups, adds and deletes.</p>"},{"location":"tutorials/go/basic/map/#structure","title":"Structure","text":"<p>Navigate to our code folder</p> <pre><code>code/basic/\n</code></pre> <p>For our program create a new folder '13_map'</p> <pre><code>code/basic/13_map/\n</code></pre> <p>And lets create a file 'maps.go' in it, finally the structure would look like this:</p> <pre><code>code/basic/13_map/maps.go\n</code></pre>"},{"location":"tutorials/go/basic/map/#declaration","title":"Declaration","text":"<p>Syntax</p> <p>Declaration &amp; initialization method</p> <pre><code>mapName := map[KeyType]ValueType\n</code></pre> <p>With built-in function make()</p> <pre><code>map := make(map[KeyType]ValueType)\n</code></pre>"},{"location":"tutorials/go/basic/map/#code","title":"Code","text":"<p>We will write the code in 2 parts:</p> <p>1.)</p> part-1 maps.go <pre><code>1 package main\n2\n3 import \"fmt\"\n4\n5 func main() {\n6   // Let's make contact list with names &amp; phone numbers\n7   // Initialize a map 'contactList'\n8   contactList := make(map[string]int)\n9   // Adding values to map\n10  contactList[\"Iron Man\"] = 878111222\n11  contactList[\"Thor\"] = 121131141\n12  contactList[\"Batman\"] = 483910138\n13  contactList[\"Spider Man\"] = 478282929\n14\n15    // print out the map\n16    for key, value := range contactList {\n17        fmt.Printf(\"Key = %s\\tValue = %d\\n\", key, value)\n18    }\n19    fmt.Println(\"\")\n20    // Iron man decides to change his number\n21    contactList[\"Iron Man\"] = 333333333\n22    fmt.Printf(\"The new contact no of Iron Man is: %d\\n\", contactList[\"Iron Man\"])\n23    fmt.Println(\"\")\n24    // Now Hulk wants to join the team\n25    contactList[\"Hulk\"] = 911831925\n26\n27    // New team is\n28    for key, value := range contactList {\n29        fmt.Printf(\"Key = %s\\tValue = %d\\n\", key, value)\n30    }\n31\n</code></pre> <p>Review</p> <p>On line 8 we declare a 'map' and initialize using 'make'</p> <pre><code>contactList := make(map[string]int)\n</code></pre> <p>We create a map with 'key' of type 'string' and 'value' of type 'int', we want to map the name of the super hero along with their contact number.</p> <p>We can add values to map as done from line 10 to 14.</p> <pre><code>contactList[\"Iron Man\"] = 878111222\ncontactList[\"Thor\"] = 121131141\ncontactList[\"Batman\"] = 483910138\ncontactList[\"Spider Man\"] = 478282929\n</code></pre> <p>Map can also be declared and initialized using the following syntax</p> <pre><code>contactList := map[string]int {\n    \"Iron Man\": 878111222,\n    \"Thor\": 121131141,\n    \"Batman\": 483910138,\n    \"Spider Man\": 478282929,\n}\n</code></pre> <p>On line 16 we print out the map. We can also change the values of the key, on line 21 we change the number of Iron Man.</p> <pre><code>contactList[\"Iron Man\"] = 333333333\n</code></pre> <p>We can also add new super hero on line 25</p> <pre><code>contactList[\"Hulk\"] = 911831925\n</code></pre> <p>2.)</p> part-2 maps.go <pre><code>32  /*\n33        Operators in maps\n34    */\n35    // Length of our super hero team\n36    fmt.Println(\"Length: \", len(contactList))\n37\n38    // Spider man is not performing well and we need to delete him\n39    delete(contactList, \"Spider Man\")\n40    fmt.Println(\"Length: \", len(contactList))\n41\n42    // Checking if Spider Man is deleted or not\n43    _, ok := contactList[\"Spider Man\"]\n44    if !ok {\n45        fmt.Println(\"Spider Man is deleted\")\n46    }\n47 }\n</code></pre> <p>Review</p> <p>On line 36 we check the length of map.</p> <pre><code>fmt.Println(\"Length: \", len(contactList))\n</code></pre> <p>We can delete values from our map using 'delete' as on line 39.</p> <pre><code>delete(contactList, \"Spider Man\")\n</code></pre> <p>On line 43 we check if the key is present in the map or not, it returns a boolean value, 'true' if the key is present and 'false' if not found.</p> <pre><code>_, ok := contactList[\"Spider Man\"]\n</code></pre>"},{"location":"tutorials/go/basic/map/#full-code","title":"Full Code","text":"slice.go <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n// Let's make contact list with names &amp; phone numbers\n// Initialize a map 'contactList'\ncontactList := make(map[string]int)\n// Adding values to map\ncontactList[\"Iron Man\"] = 878111222\ncontactList[\"Thor\"] = 121131141\ncontactList[\"Batman\"] = 483910138\ncontactList[\"Spider Man\"] = 478282929\n\n// print out the map\nfor key, value := range contactList {\nfmt.Printf(\"Key = %s\\tValue = %d\\n\", key, value)\n}\nfmt.Println(\"\")\n// Iron man decides to change his number\ncontactList[\"Iron Man\"] = 333333333\nfmt.Printf(\"The new contact no of Iron Man is: %d\\n\", contactList[\"Iron Man\"])\nfmt.Println(\"\")\n// Now Hulk wants to join the team\ncontactList[\"Hulk\"] = 911831925\n\n// New team is\nfor key, value := range contactList {\nfmt.Printf(\"Key = %s\\tValue = %d\\n\", key, value)\n}\n\n/*\n        Operators in maps\n    */\n// Length of our super hero team\nfmt.Println(\"Length: \", len(contactList))\n\n// Siper man is not performing well and we need to delete him\ndelete(contactList, \"Spider Man\")\nfmt.Println(\"Length: \", len(contactList))\n\n// Checking if Siper Man is deleted or not\n_, ok := contactList[\"Spider Man\"]\nif !ok {\nfmt.Println(\"Spider Man is deleted\")\n}\n}\n</code></pre>"},{"location":"tutorials/go/basic/map/#running-your-code","title":"Running your code","text":"<p>Open your terminal and navigate to our folder</p> <pre><code>code/basic/13_map/\n</code></pre> <p>Once in the folder type the following command</p> <pre><code>go run maps.go\n</code></pre>"},{"location":"tutorials/go/basic/map/#output","title":"Output","text":"<p>If there are no errors, you should get the output as:</p> Output <pre><code>Key = Iron Man  Value = 878111222\nKey = Thor      Value = 121131141\nKey = Batman    Value = 483910138\nKey = Spider Man        Value = 478282929\n\nThe new contact no of Iron Man is: 333333333\n\nKey = Iron Man  Value = 333333333\nKey = Thor      Value = 121131141\nKey = Batman    Value = 483910138\nKey = Spider Man        Value = 478282929\nKey = Hulk      Value = 911831925\nLength:  5\nLength:  4\nSpider Man is deleted\n</code></pre> <p>If for some reason your code isn't working, checkout the github repo or playground.</p>"},{"location":"tutorials/go/basic/map/#github","title":"Github","text":"<p>Github Repo</p>"},{"location":"tutorials/go/basic/map/#golang-playground","title":"Golang Playground","text":"<p>Golang Playground</p>"},{"location":"tutorials/go/basic/map/#next","title":"Next","text":"<p>In the next chapter we will study  Struct.</p>"},{"location":"tutorials/go/basic/map/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/basic/packages/","title":"Understanding  Packages.","text":""},{"location":"tutorials/go/basic/packages/#objective","title":"Objective","text":"<p>To understand  packages in Go.</p> <p>You have already used packages, remember we imported \"fmt\" package and used Println() function in it.</p> <p>Packages help us in organizing our code, we can group together related functions in a package. You can create multiple functions and files inside a package.</p> <p>Note, that there can be only one  func main() throughout your project, as main() is the starting point in any standalone application.</p>"},{"location":"tutorials/go/basic/packages/#structure","title":"Structure","text":"<p>Navigate to our code folder</p> <pre><code>code/basic/\n</code></pre> <p>For our program create a new folder '10_packages'</p> <pre><code>code/basic/10_packages/\n</code></pre> <p>And lets create a file 'main.go' in it, finally the structure would look like this:</p> <pre><code>code/basic/10_packages/main.go\n</code></pre>"},{"location":"tutorials/go/basic/packages/#declaring-packages","title":"Declaring Packages","text":"<p>We will be creating a custom package called as \"greeting\" and have a couple of functions in it, but we first need to declare a package.</p> <p>Navigate to our directory</p> <pre><code>code/basic/10_packages/\n</code></pre> <p>For declaring a package create a folder named \"greeting\", now the structure would be</p> <pre><code>code/basic/10_packages/greeting\n</code></pre> <p>Inside the \"greeting\" folder create a file \"greet.go\", we will write our functions inside \"greet.go\" and call it from main() as required.</p> <pre><code>code/basic/10_packages/greeting/greet.go\n</code></pre> <p>Now our structure would look like</p> <p></p>"},{"location":"tutorials/go/basic/packages/#code","title":"Code","text":"<p>A) First let us write the code for our custom package \"greeting\"</p> <p>Open  greet.go from:</p> <pre><code>code/basic/10_packages/greeting/greet.go\n</code></pre> <p>We will write the code in 4 parts:</p> <p>1.)</p> Part-1 greet.go <pre><code>    1 package greeting\n2\n3 // The above statement declares that this file belong to\n4 // the package \"greeting\"\n5\n6 // import other packages\n7 import \"fmt\"\n8\n9 // GoodMorning - Note that the name of our function starts with a capital alphabet,\n10 // capital alphabet denotes that the function is exported or visible outside\n11 // the package.\n12 // Now you can understand why Println() has a capital letter in the beginning !\n13 func GoodMorning() {\n14 fmt.Println(\"Good Morning, Octallium!\")\n15 fmt.Println()\n16 }\n17\n</code></pre> <p>Review</p> <p>On line 1 we declare that this file belongs to the package \"greeting\", note that the package name and the parent directory name has to be the same.</p> <pre><code>package greeting\n</code></pre> <p>On line 13 we declare a function \"GoodMorning\" which prints out \"Good Morning, Octallium!\" on the screen</p> <pre><code>func GoodMorning()\n</code></pre> <p>Note that the first alphabet is capital, it symbolizes that the function is exported or visible to other packages, we will call it from our main().</p> <p>2.)</p> Part-2 greet.go <pre><code>    18 // goodAfterNoon starts with a lowercase alphabet, means that this function is not\n19 // exported, and can only be accessed within the package.\n20 // Calling goodAfterNoon from another package will result in an error\n21 func goodAfterNoon() {\n22 fmt.Println(\"Good Afternoon, Octallium!\")\n23 fmt.Println()\n24 }\n25\n26 // CallGoodAfterNoon has access to goodAfterNoon as it belongs to the same file,\n27 // and hence it can call it.\n28 func CallGoodAfterNoon() {\n29 goodAfterNoon()\n30 }\n31\n</code></pre> <p>Review</p> <p>On line 21 we declare a function \"goodAfterNoon\", but since the first alphabet is lowercase, the function is not exported, i.e it is not visible from other packages and can be accessed only within the file.</p> <pre><code>func goodAfterNoon()\n</code></pre> <p>In order to access it, on line 28 we create another function \"CallGoodAfterNoon\", it can access goodAfterNoon as it belongs to the same file and we can call goodAfterNoon() by calling CallGoodAfterNoon().</p> <pre><code>func CallGoodAfterNoon()\n</code></pre> <p>3.)</p> Part-3 greet.go <pre><code>    32 // GoodNight accepts a string parameter and prints the result to the screen\n33 func GoodNight(name string) {\n34 fmt.Println(\"Good Night, \", name)\n35 fmt.Println()\n36 }\n37\n</code></pre> <p>Review</p> <p>On line 33 we declare a function \"GoodNight\" which accepts a string and prints out a message. Note that the function doesn't return anything.</p> <pre><code>func GoodNight(name string)\n</code></pre> <p>4.)</p> Part-4 greet.go <pre><code>    38 // Factorial accepts an int parameter and also returns an int,\n39 // it calculates the factorial of the input int and returns\n40 // the factorial.\n41 // At this point ignore how the function works, just concentrate\n42 // on the declaration and syntax.\n43 func Factorial(n int) int {\n44 if n == 0 {\n45 return 1\n46 }\n47 return n * Factorial(n-1)\n48 }\n</code></pre> <p>Review</p> <p>On line 43 we declare a function \"Factorial\" which accepts an int and also returns an int.</p> <pre><code>func Factorial(n int) int\n</code></pre> <p>At this point don't think how the function is working, let's concentrate on the declaration and syntax.</p> Complete greet.go <pre><code>    package greeting\n\n// The above statement declares that this file belong to\n// the package \"greeting\"\n\n// import other packages\nimport \"fmt\"\n\n// GoodMorning - Note that the name of our function starts with a capital alphabet,\n// capital alphabet denotes that the function is exported or visible outside\n// the package.\n// Now you can understand why Println() has a capital letter in the beginning !\nfunc GoodMorning() {\nfmt.Println(\"Good Morning, Octallium!\")\nfmt.Println()\n}\n\n// goodAfterNoon starts with a lowercase alphabet, means that this function is not\n// exported, and can only be accessed within the package.\n// Calling goodAfterNoon from another package will result in an error\nfunc goodAfterNoon() {\nfmt.Println(\"Good Afternoon, Octallium!\")\nfmt.Println()\n}\n\n// CallGoodAfterNoon has access to goodAfterNoon as it belongs to the same file,\n// and hence it can call it.\nfunc CallGoodAfterNoon() {\ngoodAfterNoon()\n}\n\n// GoodNight accepts a string parameter and prints the result to the screen\nfunc GoodNight(name string) {\nfmt.Println(\"Good Night, \", name)\nfmt.Println()\n}\n\n// Factorial accepts an int parameter and also returns an int,\n// it calculates the factorial of the input int and returns\n// the factorial.\n// At this point ignore how the function works, just concentrate\n// on the declaration and syntax.\nfunc Factorial(n int) int {\nif n == 0 {\nreturn 1\n}\nreturn n * Factorial(n-1)\n}\n</code></pre> <p>B) Let's write the main.go</p> <p>Navigate and open main.go from:</p> <pre><code>code/basic/10_packages/main.go\n</code></pre> main.go <pre><code>    1 package main\n2\n3 // The above declaration says that this file belongs to the \"main\" package\n4\n5 // importing our packages\n6 import (\n7    // package \"fmt\" comes in-built as a part of Go standard library\n8    \"fmt\"\n9    // importing our custom package\n10    \"./greeting\"\n11    // the \"./\" denotes that from the current directory go to the \"greeting\" directory\n12  )\n13\n14 func main() {\n15    // Calling the GoodMorning() from greeting package\n16    fmt.Println(\"Calling function GoodMorning() from package 'greeting'...\")\n17    greeting.GoodMorning()\n18    // Calling the goodAfterNoon() from greeting package\n19    fmt.Println(\"Calling function goodAfterNoon() from package 'greeting'...\")\n20    // as goodAfterNoon is not directly accessible, we call CallGoodAfterNoon()\n21    // which in turn calls goodAfterNoon()\n22    greeting.CallGoodAfterNoon()\n23    // Calling the GoodNight() from greeting package\n24    fmt.Println(\"Calling function GoodNight() from package 'greeting'...\")\n25    greeting.GoodNight(\"Gopher!\")\n26    // Calling the Factorial function with passing an int\n27    num := 10\n28    // As Factorial() returns an int, we save it in a new variable \"result\"\n29    result := greeting.Factorial(num)\n30    // Printing the result on screen, note we are using Printf()\n31    fmt.Printf(\"Factorial of %d is: %d.\\n\", num, result)\n32 }\n</code></pre> <p>On line 1 we declare that the file belongs to the package \"main\"</p> <pre><code>package main\n</code></pre> <p>On line 10 we import our custom package \"greeting\"</p> <pre><code>\"./greeting\"\n</code></pre> <p>The \"./\" denotes that from the current directory go to the \"greeting\" directory. On line 17 we call the GoodMorning function</p> <pre><code>greeting.GoodMorning()\n</code></pre> <p>Note the syntax</p> <pre><code>packageName.funcName\n</code></pre> <p>If we try to directly call goodAfterNoon() we will get an error</p> <pre><code>Error: greeting.goodAfterNoon()\n</code></pre> <p>So, we call it by calling the CallGoodAfterNoon() function on line 22.</p> <pre><code>greeting.CallGoodAfterNoon()\n</code></pre> <p>On line 25 we call the GoodNight() function and pass a string \"Gopher\" along with it.</p> <pre><code>greeting.GoodNight(\"Gopher!\")\n</code></pre> <p>On line 29 we call the Factorial() function and pass an int, since it also returns an int, we save it in a variable \"result\" and print the output on line 31</p> <pre><code>result := greeting.Factorial(num)\n</code></pre>"},{"location":"tutorials/go/basic/packages/#running-your-code","title":"Running your code","text":"<p>Open your terminal and navigate to our folder</p> <pre><code>code/basic/10_packages/\n</code></pre> <p>Once in the folder type the following command</p> <pre><code>go run main.go\n</code></pre>"},{"location":"tutorials/go/basic/packages/#build","title":"Build","text":"<p>Till, now we have been running our code, let's try to build our code by compiling it to binary.</p> <p>Instead of \"go run\" type the following command</p> <pre><code>go build main.go\n</code></pre> <p>If you are running on a unix based system including mac OSx, you can run the binary by typing</p> <pre><code>./main\n</code></pre> <p>If there are no errors, you should get the output as:</p> Output <pre><code>Calling function GoodMorning() from package 'greeting'...\nGood Morning, Octallium!\n\nCalling function goodAfterNoon() from package 'greeting'...\nGood Afternoon, Octallium!\n\nCalling function GoodNight() from package 'greeting'...\nGood Night,  Gopher!\n\nFactorial of 10 is: 3628800.\n</code></pre> <p>If for some reason your code isn't working, checkout the github repo.</p>"},{"location":"tutorials/go/basic/packages/#github","title":"Github","text":"<p>Github Repo</p> <p>That's it,  Congratulations ! You just wrote your first custom package in Go.</p>"},{"location":"tutorials/go/basic/packages/#golang-playground","title":"Golang Playground","text":"<p>Since golang playground does not allow to declare and use custom packages, it is not possible to post it there, please refer the github repo for any errors.</p>"},{"location":"tutorials/go/basic/packages/#next","title":"Next","text":"<p>We will start the basic data structures of type  array.</p>"},{"location":"tutorials/go/basic/packages/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/basic/shorthand-declaration/","title":"Shorthand Declaration Of Variables.","text":""},{"location":"tutorials/go/basic/shorthand-declaration/#objective","title":"Objective","text":"<p>Learn how to declare variables using the shorthand method.</p>"},{"location":"tutorials/go/basic/shorthand-declaration/#declaration","title":"Declaration","text":"<p>Go ships with a smart compiler, it can detect the data type and automatically assign it to variables, using short declaration is very widely used in Go, with this method you can create variables on the fly, no need for prior declaration.</p> <p>General syntax</p> <pre><code>variableName := value\n</code></pre> <p>It is also called as inference type declaration, meaning that the variable type is \"inferred\" from the value. This method offers various benefits such as compiler can choose the right data type and much more which we will explore as we write more code.</p>"},{"location":"tutorials/go/basic/shorthand-declaration/#structure","title":"Structure","text":"<p>Navigate to our code folder</p> <pre><code>code/basic/\n</code></pre> <p>For our program create a new folder '06_shorthand_declaration'</p> <pre><code>code/basic/06_shorthand_declaration\n</code></pre> <p>And lets create a file 'shorthand_declaration.go' in it, finally the structure would look like this:</p> <pre><code>code/basic/06_shorthand_declaration/shorthand_declaration.go\n</code></pre>"},{"location":"tutorials/go/basic/shorthand-declaration/#code","title":"Code","text":"Shorthand Declaration <pre><code>1 package main\n2\n3 import \"fmt\"\n\n4 func main() {\n5   // declaring integer\n6   num := 12\n7   fmt.Printf(\"The type of variable 'num' is: %T.\\n\", num)\n8\n9   // declaring float\n10  decimal := 15.45\n11  fmt.Printf(\"The type of variable 'decimal' is: %T.\\n\", decimal)\n12\n13  // declaring string\n14  name := \"Octallium\"\n15  fmt.Printf(\"The type of variable 'name' is : %T.\\n\", name)\n16 }\n</code></pre>"},{"location":"tutorials/go/basic/shorthand-declaration/#code-review","title":"Code Review","text":"<p>On line 6, 10 &amp; 14 we declare a new variable</p> <pre><code>num := 12\ndecimal := 15.45\nname := \"Octallium\"\n</code></pre> <p>To check the data type we use a special format output function</p> <pre><code>fmt.Printf()\n</code></pre> <p>Note, in the earlier examples we had used</p> <pre><code>fmt.Println()\n</code></pre> <p>On line 7, 11 &amp; 15, we print out the data type, to check the data type we use a special character \"%T\", which acts as a placeholder and represent the data \"Type\", it is followed by the variable name.</p> <pre><code>fmt.Printf(\"The type of variable 'num' is: %T.\\n\", num)\nfmt.Printf(\"The type of variable 'decimal' is: %T.\\n\", decimal)\nfmt.Printf(\"The type of variable 'name' is : %T.\\n\", name)\n</code></pre> <p>If you don't understand the print statements, no worries, we will be having a dedicated section on formatting output, for now type everything as in the code above and make sure it runs.</p>"},{"location":"tutorials/go/basic/shorthand-declaration/#run-code","title":"Run Code","text":"<p>Open your terminal and navigate to our folder</p> <pre><code>code/basic/06_shorthand_declaration\n</code></pre> <p>Once in the folder type the following command</p> <pre><code>go run shorthand_declaration.go\n</code></pre>"},{"location":"tutorials/go/basic/shorthand-declaration/#output","title":"Output","text":"Output <pre><code>The type of variable 'num' is: int.\nThe type of variable 'decimal' is: float64.\nThe type of variable 'name' is : string.\n</code></pre>"},{"location":"tutorials/go/basic/shorthand-declaration/#github","title":"Github","text":"<p>Just in case you have some errors with your code, you can check out the code at github repo</p> <p>Github Repo</p>"},{"location":"tutorials/go/basic/shorthand-declaration/#golang-playground","title":"Golang Playground","text":"<p>You can also run the code at playground</p> <p>Golang Playground</p>"},{"location":"tutorials/go/basic/shorthand-declaration/#next","title":"Next","text":"<p>In the next chapter we will see about  if/else condition, don't worry if its becoming too geeky, keep up with the code and in no time you will get the hang of it.</p>"},{"location":"tutorials/go/basic/shorthand-declaration/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/basic/slice/","title":"Understanding Data Structure of Type  Slice.","text":""},{"location":"tutorials/go/basic/slice/#objective","title":"Objective","text":"<p>Understanding  Slice's in Go.</p> <p></p> <p>Slice are dynamic versions of array, slices can grow &amp; shrink in length as required. Underlying the slice is an array and a pointer to it, exactly how the Go compiler stores the slice is a little complex, we will cover it in the \"Intermediate\" section of the tutorial.</p>"},{"location":"tutorials/go/basic/slice/#structure","title":"Structure","text":"<p>Navigate to our code folder</p> <pre><code>code/basic/\n</code></pre> <p>For our program create a new folder '12_slice'</p> <pre><code>code/basic/12_slice/\n</code></pre> <p>And lets create a file 'slice.go' in it, finally the structure would look like this:</p> <pre><code>code/basic/12_slice/slice.go\n</code></pre>"},{"location":"tutorials/go/basic/slice/#declaration","title":"Declaration","text":"<p>Syntax</p> <p>Declaration &amp; initialization method</p> <pre><code>sliceName := []type{value1, value2, ...}\n</code></pre> <p>With built-in function make()</p> <pre><code>slice := make([]type, length, capacity)\n</code></pre> <p>Make initializes the underlying array with zero value and returns a slice that refers to that array. Make is used extensively to initialize slices.</p>"},{"location":"tutorials/go/basic/slice/#code","title":"Code","text":"<p>We will write the code in 4 parts:</p> <p>1.)</p> part-1 slice.go <pre><code>1 package main\n2\n3 import \"fmt\"\n4\n5 func main() {\n6    // declaring a nil slice\n7    var slice1 []int\n8    fmt.Println(\"slice1:\", slice1)\n9    fmt.Println(\"The length of slice1 is:\", len(slice1))\n10    fmt.Println(\"The capacity of slice1 is:\", cap(slice1))\n11    fmt.Println()\n12    // declaring a slice with initialization\n13    slice2 := []int{1, 2, 3, 4, 5}\n14    fmt.Println(\"slice2:\", slice2)\n15    fmt.Println(\"The length of slice2 is:\", len(slice2))\n16    fmt.Println(\"The capacity of slice2 is:\", cap(slice2))\n17    fmt.Println()\n18\n19    // declaring a slice of length 5 with make\n20    slice3 := make([]string, 5)\n21    fmt.Println(\"slice3:\", slice3)\n22    fmt.Println(\"The length of slice3 is:\", len(slice3))\n23    fmt.Println(\"The capacity of slice3 is:\", cap(slice3))\n24    fmt.Println()\n25\n</code></pre> <p>Review</p> <p>On line 7, 13 &amp; 20 we declare slice using different syntax</p> <pre><code>var slice1 []int\n</code></pre> <p>This declares a nil slice, the length &amp; capacity are zero. As you will see in forth coming examples, slices can have variable length and capacity.</p> <p>Slices can dynamically resize till it reaches its capacity, we will shortly see how this is done.</p> <pre><code>slice2 := []int{1, 2, 3, 4, 5}\n</code></pre> <p>Above line declares a slice and initializes its value, in this case length &amp; capacity are equal.</p> <pre><code>slice3 := make([]string, 5)\n</code></pre> <p>This initializes a zero value slice with the length &amp; capacity of 5. Note the difference in length &amp; capacity of slice3 as compared to slice1.</p> <p>2.)</p> part-2 slice.go <pre><code>26 // declaring a slice of length 5 and capacity 10 with make\n27 slice4 := make([]int, 5, 10)\n28 fmt.Println(\"slice4:\", slice4)\n29 fmt.Println(\"The length of slice4 is:\", len(slice4))\n30 fmt.Println(\"The capacity of slice4 is:\", cap(slice4))\n31 fmt.Println()\n32\n33 // inserting values, note i &lt; 6 will give an error as we have\n34 // set the length to 5\n35 for i := 0; i &lt; 5; i++ {\n36  slice4[i] = i\n37 }\n38 fmt.Println(\"slice4:\", slice4)\n39 fmt.Println()\n40\n41 // increasing the length of slice\n42 fmt.Println(\"Increasing the length of slice...\")\n43\n44 // slice4 = slice4[:11] will give an error as capacity is 10\n45 slice4 = slice4[:10]\n46 fmt.Println(\"The length of slice4 is:\", len(slice4))\n47 fmt.Println(\"The capacity of slice4 is:\", cap(slice4))\n48 for i := 5; i &lt; 10; i++ {\n49  slice4[i] = i\n50 }\n51 fmt.Println()\n52\n53 // printing slice4\n54 fmt.Println(\"slice4:\", slice4)\n55 fmt.Println()\n56\n</code></pre> <p>Review</p> <p>On line 27 we declare a new slice with length = 5 and capacity = 10.</p> <pre><code>slice4 := make([]int, 5, 10)\n</code></pre> <p>Then on line 35 we insert values into the slice, note we insert values only till index = 4 or length = 5 (remember our index starts from 0 and not 1!)</p> <p>If we exceed length of 5, it will throw an error as we have declared our length as 5.</p> <p>On line 45 we dynamically increase the length to 10.</p> <pre><code>slice4 = slice4[:10]\n</code></pre> <p>Now we can insert values upto length = 10 or index = 9. On line 54 we print out our new slice.</p> <pre><code>fmt.Println(\"slice4:\", slice4)\n</code></pre> <p>3.)</p> part-3 slice.go <pre><code>57 // creating a new slice\n58 slice5 := slice4[2:8]\n59 fmt.Println(\"slice5:\", slice5)\n60 fmt.Println()\n61\n</code></pre> <p>Review</p> <p>We can create new slice from an existing one, on line 58 we create a new slice5 which has values from slice4 but only from index 2 to 8.</p> <pre><code>slice5 := slice4[2:8]\n</code></pre> <p>Then we print out the slice on line 59.</p> <pre><code>fmt.Println(\"slice5:\", slice5)\n</code></pre> <p>4.)</p> part-4 slice.go <pre><code>62 // two-D slice\n63 twoD := [][]int{{3, 4}, {1, 5}, {9, 2}, {7, 8}}\n64 fmt.Println(\"Print out values of twoD slice...\")\n65 for i, subSlice := range twoD {\n66  fmt.Printf(\"At index: %d of twoD, Value: %v\\n\", i, subSlice)\n67  for index, value := range subSlice {\n68      fmt.Printf(\"Index: %d Value: %d\\n\", index, value)\n69  }\n70  fmt.Println()\n71 }\n72 }\n</code></pre> <p>Review</p> <p>Slice can have slices inside it, above we create a two-D slice, i.e a slice inside a slice, you can create multiple dimension slices, e.g three-D or four-D or even larger.</p> <p>On line 63 we declare a two-D slice of type int</p> <pre><code>twoD := [][]int{{3, 4}, {1, 5}, {9, 2}, {7, 8}}\n</code></pre> <p>Note the syntax, it contains a slice within a slice, all separated by curly brackets and comma. On line 65 we start a for-range loop to print all the values inside two-D</p> <pre><code>for i, slice := range twoD\n</code></pre> <p>This takes the first slice inside twoD and assigns it to the variable \"subSlice\", then we again loop over subSlice to print all the values.</p> <pre><code>for index, value := range subSlice\n</code></pre> <p>Creating multi-dimension slices also increases the complexity, Go offers multiply other data types to tackle this as we will study then in forth coming chapters.</p>"},{"location":"tutorials/go/basic/slice/#full-code","title":"Full Code","text":"slice.go <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n// declaring a nil slice\nvar slice1 []int\nfmt.Println(\"slice1:\", slice1)\nfmt.Println(\"The length of slice1 is:\", len(slice1))\nfmt.Println(\"The capacity of slice1 is:\", cap(slice1))\nfmt.Println()\n// declaring a slice with initialization\nslice2 := []int{1, 2, 3, 4, 5}\nfmt.Println(\"slice2:\", slice2)\nfmt.Println(\"The length of slice2 is:\", len(slice2))\nfmt.Println(\"The capacity of slice2 is:\", cap(slice2))\nfmt.Println()\n\n// declaring a slice of length 5 with make\nslice3 := make([]string, 5)\nfmt.Println(\"slice3:\", slice3)\nfmt.Println(\"The length of slice3 is:\", len(slice3))\nfmt.Println(\"The capacity of slice3 is:\", cap(slice3))\nfmt.Println()\n\n// declaring a slice of length 5 and capacity 10 with make\nslice4 := make([]int, 5, 10)\nfmt.Println(\"slice4:\", slice4)\nfmt.Println(\"The length of slice4 is:\", len(slice4))\nfmt.Println(\"The capacity of slice4 is:\", cap(slice4))\nfmt.Println()\n\n// inserting values, note i &lt; 6 will give an error as we have\n// set the length to 5\nfor i := 0; i &lt; 5; i++ {\nslice4[i] = i\n}\nfmt.Println(\"slice4:\", slice4)\nfmt.Println()\n\n// increasing the length of slice\nfmt.Println(\"Increasing the length of slice...\")\n\n// slice4 = slice4[:11] will give an error as capacity is 10\nslice4 = slice4[:10]\nfmt.Println(\"The length of slice4 is:\", len(slice4))\nfmt.Println(\"The capacity of slice4 is:\", cap(slice4))\nfor i := 5; i &lt; 10; i++ {\nslice4[i] = i\n}\nfmt.Println()\n\n// printing slice4\nfmt.Println(\"slice4:\", slice4)\nfmt.Println()\n\n// creating a new slice\nslice5 := slice4[2:8]\nfmt.Println(\"slice5:\", slice5)\nfmt.Println()\n\n// two-D slice\ntwoD := [][]int{{3, 4}, {1, 5}, {9, 2}, {7, 8}}\nfmt.Println(\"Print out values of twoD slice...\")\nfor i, slice := range twoD {\nfmt.Printf(\"At index: %d of twoD, Value: %v\\n\", i, slice)\nfor index, value := range slice {\nfmt.Printf(\"Index: %d Value: %d\\n\", index, value)\n}\nfmt.Println()\n}\n}\n</code></pre>"},{"location":"tutorials/go/basic/slice/#running-your-code","title":"Running your code","text":"<p>Open your terminal and navigate to our folder</p> <pre><code>code/basic/12_slice/\n</code></pre> <p>Once in the folder type the following command</p> <pre><code>go run slice.go\n</code></pre>"},{"location":"tutorials/go/basic/slice/#output","title":"Output","text":"<p>If there are no errors, you should get the output as:</p> Output <pre><code>slice1: []\nThe length of slice1 is: 0\nThe capacity of slice1 is: 0\n\nslice2: [1 2 3 4 5]\nThe length of slice2 is: 5\nThe capacity of slice2 is: 5\n\nslice3: [    ]\nThe length of slice3 is: 5\nThe capacity of slice3 is: 5\n\nslice4: [0 0 0 0 0]\nThe length of slice4 is: 5\nThe capacity of slice4 is: 10\n\nslice4: [0 1 2 3 4]\n\nIncreasing the length of slice...\nThe length of slice4 is: 10\nThe capacity of slice4 is: 10\n\nslice4: [0 1 2 3 4 5 6 7 8 9]\n\nslice5: [2 3 4 5 6 7]\n\nPrint out values of twoD slice...\nAt index: 0 of twoD, Value: [3 4]\nIndex: 0 Value: 3\nIndex: 1 Value: 4\n\nAt index: 1 of twoD, Value: [1 5]\nIndex: 0 Value: 1\nIndex: 1 Value: 5\n\nAt index: 2 of twoD, Value: [9 2]\nIndex: 0 Value: 9\nIndex: 1 Value: 2\n\nAt index: 3 of twoD, Value: [7 8]\nIndex: 0 Value: 7\nIndex: 1 Value: 8\n</code></pre> <p>If for some reason your code isn't working, checkout the github repo or playground.</p>"},{"location":"tutorials/go/basic/slice/#github","title":"Github","text":"<p>Github Repo</p>"},{"location":"tutorials/go/basic/slice/#golang-playground","title":"Golang Playground","text":"<p>Golang Playground</p>"},{"location":"tutorials/go/basic/slice/#next","title":"Next","text":"<p>In the next chapter we will study  Maps.</p>"},{"location":"tutorials/go/basic/slice/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/basic/variables-constants/","title":"Declaring  Variables &amp;  Constants.","text":""},{"location":"tutorials/go/basic/variables-constants/#objective","title":"Objective","text":"<p>Learn how to declare variables and constants.</p>"},{"location":"tutorials/go/basic/variables-constants/#variables","title":"Variables","text":"<p>Imagine you own a bookstore and you have to manage many books, you remove one book and store another book, now imagine bookstore to be variable, variable can store different values.</p> <p>Variables can be declared using the keyword  var, besides using the keyword you also need to tell Go which data-type it belongs to. Since Go is a strictly typed language you need to declare the data-type.</p> <p>The syntax for declaring variable is:</p> <pre><code>var variableName type\n</code></pre>"},{"location":"tutorials/go/basic/variables-constants/#constant","title":"Constant","text":"<p>Constants are like locker, once you put a value in it, it cannot be changed, and as usual you need to declare the data type as well.</p> <pre><code>const constName type = value\n</code></pre>"},{"location":"tutorials/go/basic/variables-constants/#structure","title":"Structure","text":"<p>Navigate to our code folder</p> <pre><code>code/basic/\n</code></pre> <p>For our program create a new folder '05_variables_constant'</p> <pre><code>code/basic/05_variables_constant\n</code></pre> <p>And lets create a file 'variables_constants.go' in it, finally the structure would look like this:</p> <pre><code>code/basic/05_variables_constant/variables_constants.go\n</code></pre>"},{"location":"tutorials/go/basic/variables-constants/#code","title":"Code","text":"Variables &amp; Constants <pre><code>1 package main\n2\n3 import \"fmt\"\n4\n5 func main() {\n6   // Declaring variable \"name\" of type string\n7   var name string\n8   name = \"Octallium\"\n9   // Printing out the value of \"name\"\n10   fmt.Println(\"The value of 'name' variable is:\", name)\n11\n12  // Declaring variable \"age\" of type int\n13  var age int\n14  age = 9\n15  // Printing out the value of \"age\"\n16  fmt.Println(\"The value of 'age' variable is:\", age)\n17\n18  // Declaring constant \"SECRET_KEY\" of type string\n19  const SECRET_KEY string = \"abc-123-xyz-098\"\n20  // Printing out the value of \"SECRET_KEY\"\n21  fmt.Println(\"The value of 'SECRET_KEY' constant is:\", SECRET_KEY)\n22\n23  // Values of variables can be changed\n24  name = \"Golang Handbook\"\n25  fmt.Println(\"Now the value of 'name' variable is:\", name)\n26\n27  age = 13\n28  fmt.Println(\"Now the value of 'age' variable is:\", age)\n29\n30  // SECRET_KEY = \"que-472-ert-383\" will throw an error as it is a constant\n31 }\n</code></pre>"},{"location":"tutorials/go/basic/variables-constants/#run-code","title":"Run Code","text":"<p>Open your terminal and navigate to our folder</p> <pre><code>code/basic/05_variables_constant/\n</code></pre> <p>Once in the folder type the following command</p> <pre><code>go run variables_constants.go\n</code></pre>"},{"location":"tutorials/go/basic/variables-constants/#output","title":"Output","text":"Output <pre><code>The value of 'name' variable is: Octallium\nThe value of 'age' variable is: 9\nThe value of 'SECRET_KEY' constant is: abc-123-xyz-098\nNow the value of 'name' variable is: Golang Handbook\nNow the value of 'age' variable is: 13\n</code></pre>"},{"location":"tutorials/go/basic/variables-constants/#github","title":"Github","text":"<p>Just in case you have some errors with your code, you can check out the code at github repo</p> <p>Github Repo</p>"},{"location":"tutorials/go/basic/variables-constants/#golang-playground","title":"Golang Playground","text":"<p>You can also run the code at playground</p> <p>Golang Playground</p>"},{"location":"tutorials/go/basic/variables-constants/#code-review","title":"Code Review","text":"<p>Lines 7 declares a new variable \"name\" of type \"string\" and on line 8 we give it the value of \"octallium\"</p> <p>Similarly on line 13 we declare a variable \"age\" of type int and on line 14 we give it the value of 9, note that there are no double quotes around 9 as it is of type int, strings have to be enclosed within double quotes.</p> <p>On line 19 we declare a constant of type string and give it a value, on line 30 if we try to change the value, the compiler will throw and error, try uncommenting the line and running the code.</p> <p>On line 24 &amp; 27 we assign new values to variables and print them out.</p>"},{"location":"tutorials/go/basic/variables-constants/#next","title":"Next","text":"<p>In the next section we will see the short hand method for declaring variables.</p>"},{"location":"tutorials/go/basic/variables-constants/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/getting-started/editor_ide/","title":"Setting Up Your Development Environment Using Text Editor's And IDE.","text":"<p>There are many choices available, both free and paid, I haven't tried all of them, but I would like to suggest a couple of them that work well for golang development.</p>"},{"location":"tutorials/go/getting-started/editor_ide/#editors","title":"Editors","text":"<ul> <li>Sublime Text</li> <li>Atom</li> <li>Visual Studio Code (Not to be confused with Visual Studio IDE)</li> <li>Vim</li> </ul>"},{"location":"tutorials/go/getting-started/editor_ide/#ide","title":"IDE","text":"<ul> <li>Goland By Jetbrains (Paid)</li> </ul> <p>I personally use  Visual Studio Code, there's nothing wrong with other editors, just that I am used to working with VS Code and pretty comfortable using all the keys.</p>"},{"location":"tutorials/go/getting-started/editor_ide/#installing-go-plugins","title":"Installing 'Go' Plugins","text":"<p>Just downloading and installing the editor or IDE is not sufficient, make sure you install the respective 'Go' plugins to get started with development.</p> <p>Plugins</p> <ol> <li>VS Code - Go</li> </ol>"},{"location":"tutorials/go/getting-started/editor_ide/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/getting-started/installation/","title":"Installing Go","text":""},{"location":"tutorials/go/getting-started/installation/#czjqqkd0-how-toczjqqkd1-install-go-on-your-local-machine","title":"How-To Install Go on your local machine","text":""},{"location":"tutorials/go/getting-started/installation/#installing-on-mac-osx","title":"Installing on Mac OSx:","text":"Installing on Mac OSx <p>Installing Go on your mac is pretty straight forward, choose any one method: -</p> <p>A) Installing using package installer directly from golang.org</p> <p>OR</p> <p>B) Using Homebrew</p> A) Installing using the package installer <p>Package installer method is the simplest way to get you started, just download the .pkg file by clicking on this link and install it just as you would install any other program on your mac.</p> <p>The installer will automatically create everything for you including setting up your environment variables.</p> <p>Installer will automatically install it to</p> <pre><code>usr/local/go directory\n</code></pre> <p>After installing read \"Checking the installation\" section below to make sure everything works.</p> B) Using Homebrew <p>Before using this method, make sure you have homebrew installed, if it is not installed checkout this link and install it.</p> <p>Open your terminal and type the following:</p> <pre><code>brew install go\n</code></pre> <p>brew will automatically fetch the latest binaries and install it for you, make sure they are installed to</p> <pre><code>usr/local/go directory\n</code></pre> <p>Its now time to setup your environment variables, check the \"Setting up environment variables\" to complete the installation and start using Go.</p>"},{"location":"tutorials/go/getting-started/installation/#installing-on-freebsd-linux","title":"Installing on FreeBSD &amp; Linux:","text":"Installing on FreeBSD &amp; Linux <p>Download the archive from golang.org and extract it to usr/local, for extracting open the terminal in the downloaded directory and type the following:</p> <p>If you have downloaded Go v 1.10.3 type the following command, if you have downloaded some other version, change the version in the following command.</p> <p>Open terminal in downloaded directory and type:</p> <pre><code>tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz\n</code></pre> <p>After extracting set up GOPATH, refer the \"Setting up environment variables\" section.</p>"},{"location":"tutorials/go/getting-started/installation/#installing-on-windows","title":"Installing on Windows:","text":"Installing on Windows <p>Download the msi installer from golang.org and follow the prompts to intsall it.</p> <p>By default it is installed in</p> <pre><code>c:\\Go\n</code></pre> <p>all the environmental variables are set automatically by the installer.</p> <p>If you are using windows, I would highly recommend to install Git &amp; Git Bash.</p>"},{"location":"tutorials/go/getting-started/installation/#setting-up-environment-variables","title":"Setting up environment variables:","text":"Setting up environment variables <p>If you have installed Go using brew on OSx or on linux you need to set up GOPATH.</p> <p>A) If you are using bash, open and edit:</p> <pre><code>~/.bash_profile\n</code></pre> <p>B) If you are using zsh, open and edit:</p> <pre><code>~/.zshrc\n</code></pre> <p>and add the following:</p> <pre><code>export PATH=$PATH:/usr/local/go/bin\nexport GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport GOBIN=$HOME/go/bin\n</code></pre> <p>save the file and restart the terminal or type</p> <p>A) For bash:</p> <pre><code>source ~/.bash_profile\n</code></pre> <p>B) For zsh:</p> <pre><code>source ~/.zshrc\n</code></pre> Editing .bash_profile or .zshrc <p>Follow the instructions to edit .bash_profile or .zshrc, open the terminal and type</p> <pre><code>cd\n</code></pre> <p>If you are using atom type</p> <pre><code>atom .bash_profile\n</code></pre> <p>or</p> <pre><code>atom .zshrc\n</code></pre>"},{"location":"tutorials/go/getting-started/installation/#checking-the-installation","title":"Checking the installation:","text":"Checking the installation <p>Open the terminal and type:</p> <pre><code>echo $GOROOT\n</code></pre> <p>it should give the output:</p> <pre><code>usr/local/go\n</code></pre> <p>For windows it should give output:</p> <pre><code>c:\\Go\n</code></pre> <p>You can also test using the following commands:</p> <pre><code>go env\ngo version\n</code></pre>"},{"location":"tutorials/go/getting-started/installation/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/go/getting-started/why-go/","title":"Why Go ?","text":"<p>Its really an interesting question, why should you learn and use Go ? </p> <p>This question becomes even more important, specially because of so many existing powerful languages such as C/C++, Python, Java, Javascript, etc.</p> <p>Go delivers some really exciting  features such as:</p> <ul> <li> <p>Easy and clear syntax.</p> </li> <li> <p>Small language with big standard library.</p> </li> <li> <p>Compiled language and fast compilation.</p> </li> <li> <p>Can be easily used cross platform.</p> </li> <li> <p>Its incredibly fast.</p> </li> <li> <p>Excellent concurrency.</p> </li> <li> <p>Good community support.</p> </li> </ul> <p>While other languages also provide some of the above mentioned benefits, but Go really excels at them all together.</p> <p>You also need to remmember that Go is not the silver-bullet for all your applications, you need to consider all the project requirements before deciding on a language, if Go meets all your project requirements, then it can really deliver.</p> <p>I will not be detailing, why Go was created, creators, its history, etc, all of it is easily available online, what I am really interested is diving into the actual code.</p>"},{"location":"tutorials/go/getting-started/why-go/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/python/basics/data-types/","title":"TODO","text":""},{"location":"tutorials/python/basics/dictionary/","title":"TODO","text":""},{"location":"tutorials/python/basics/error-handling/","title":"TODO","text":""},{"location":"tutorials/python/basics/file-handling/","title":"TODO","text":""},{"location":"tutorials/python/basics/functions/","title":"TODO","text":""},{"location":"tutorials/python/basics/if-else/","title":"TODO","text":""},{"location":"tutorials/python/basics/installation/","title":"Installation","text":"<p>Learn how to install Python 3 on your machine.</p> <p>But, before actually installing there are some points that I would like you to note. Python actually comes pre-installed on most operating system these days, but its the old and legacy version Python 2.</p> <p>Python 2 will officially be retiring on Jan 1st, 2020, so its ideal to straight away get working with Python 3. Check out the installation instructions as per your operating system.</p>"},{"location":"tutorials/python/basics/installation/#installing-on-windows","title":"Installing on Windows","text":"<p>Installing Python 3 on Windows is just as easy as installing any other program, in addition to Python 3, I would highly recommend installing Git Bash, so that you can work with the exact same commands in the tutorial as mine and we need not keeping on switching between operating systems. Ofcouse, I will let you know whenever there are differences.</p> <p>Navigate to following link and download the setup file</p> <pre><code>https://www.python.org/downloads/windows/\n</code></pre> <p>Under Stable Releases check out your system and download the setup file accordingly, in most cases your system should be 64 bit, if that's the case you can download the following setup file</p> <pre><code>Windows x86-64 executable installer\n</code></pre> <p>After downloading you can install it as you would install any other program. The installer will install everything and also setup environment variables.</p>"},{"location":"tutorials/python/basics/installation/#installing-on-mac","title":"Installing on Mac","text":"<p>Navigate to following link and download the setup file</p> <pre><code>https://www.python.org/downloads/mac-osx/\n</code></pre> <p>Under Stable Releases you can download the following file</p> <pre><code>macOS 64-bit installer\n</code></pre> <p>And then install it as any other program, it will automatically setup environment variables for you.</p> <p>Alternatively</p> <p>If you are using brew, then installing Python is very simple, open your terminal and type</p> <pre><code>brew install python\n</code></pre> <p>By default brew will install python 3 to the following directory -</p> <pre><code>/usr/local/bin/python3\n</code></pre> <p>You can check it by typing the following on your terminal</p> <pre><code>which python3\n</code></pre>"},{"location":"tutorials/python/basics/installation/#installing-on-linux","title":"Installing on Linux","text":"<p>Installing Python 3.7 on Ubuntu.</p> <p>If you are using Ubuntu 19.04 Disco Dingo then you already have Python 3.7.3 pre-installed, just sit back and you can directly skip to \"Setting Up Alias\"</p> <p>For others, start by updating ubuntu, open your terminal and type the following -</p> <pre><code>sudo apt update\nsudo apt install software-properties-common\n</code></pre> <p>Add the repository</p> <pre><code>sudo add-apt-repository ppa:deadsnakes/ppa\n</code></pre> <p>Install Python 3.7</p> <pre><code>sudo apt install python3.7\n</code></pre>"},{"location":"tutorials/python/basics/installation/#checking-version","title":"Checking Version","text":"<p>You can check the installed python version.</p> <pre><code>python3 --version\n</code></pre> <p>Python 3 also installs \"pip3\" by default, it is the package manager for python, you can check its version by</p> <pre><code>pip3 --version\n</code></pre>"},{"location":"tutorials/python/basics/installation/#setting-up-alias-optional","title":"Setting Up Alias (Optional)","text":"<p>Since Python 2 comes pre-installed on almost all the operating systems, the default python keyword points to Python 2, for using Python 3 we need to type python3, which for me gets a little boring and unintuitive since Python 2 will be reaching its end of life soon.</p> <p>So, I just setup a alias, which simply means that, I say to my computer, \"Whenever I type python it has to refer to Python 3 and not to Python 2\".</p> <p>To setup a alias open your terminal and navigate to your home directory</p> <pre><code>cd\n</code></pre> <p>If you are using bash, open the bash_profile, since I am using Visual Studio Code, I can directly open the file by typing</p> <pre><code>code .bash_profile\n</code></pre> <p>If you are using atom, you can open by</p> <pre><code>atom .bash_profile\n</code></pre> <p>Or if you are using PyCharm</p> <pre><code>charm .bash_profile\n</code></pre> <p>Instead of bash if you are using zsh, you can open .zshrc</p> <pre><code>code .zshrc\n</code></pre> <p>Add the following 2 lines at the end of the file</p> <pre><code>alias python='python3'\nalias pip='pip3'\n</code></pre> <p>Now close and restart your terminal, to check if its working properly type the following</p> <pre><code>python --version\n</code></pre> <p>It should show the current Python 3 installed version.</p>"},{"location":"tutorials/python/basics/installation/#setting-up-your-development-environment-and-code-editor","title":"Setting up your development environment and code editor","text":"<p>(External Links)</p> <p>Excellent environment setup videos by Corey Schafer -</p> <p>For Windows</p> <p>For MacOS</p>"},{"location":"tutorials/python/basics/installation/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/python/basics/introduction/","title":"Introduction to Python 3","text":"<p>What the hell...python ? Isn't it supposed to be a reptile! Well, it also happens to be a really great programming language.</p> <p>If you are just starting your programming journey, Python is the right place to start, it offers nice and clean syntax, vast library, online available content, huge community, etc.</p> <p>Today's software industry has a huge collection of programming languages like C, C++, Java, Javascript, Go, Rust, etc. Each of the language has its own pros and cons, there is no 'One Size Fits All' concept and one has to really consider the project requirements in order to select a language.</p> <p>So, that brings us to the next question, WHY Choose PYTHON ?</p>"},{"location":"tutorials/python/basics/introduction/#why-python","title":"Why Python? \ud83d\udc0d","text":"<p>Simple answer is, because its Amazing! Surely python also has its share of pros and cons, but offers a lot more in return, such as follows -</p> <ol> <li> <p>Are you a beginner ? Python is the perfect place to start, it will help you to understand a lot of the basic programming concepts and then you can move on to other languages if required.</p> </li> <li> <p>Python really helps you to be productive, you can achieve a lot more in few lines of code. In addition to it, Python is very robust, performant and provides high scalability.</p> </li> <li> <p>Python offers a simple and clean syntax, no semicolons!</p> </li> <li> <p>Python has a vast library support, you can find a library for almost any functionality you can think off!</p> </li> <li> <p>Web development no problem! Python has robust web frameworks like Django, Flask, Pyramid, etc.</p> </li> <li> <p>Creating command line applications, again no problem!</p> </li> <li> <p>Python is great fit for Machine Learning, Artificial Intelligence, Business Analytics, etc.</p> </li> <li> <p>Need to work with files such as csv, xls, pdf, zip, etc, ...aah just a piece of cake.</p> </li> <li> <p>Python is great for rapid development, you can easily bootstrap a project with the vast eco-system that python provides.</p> </li> </ol> <p>Sounds exciting! Let's dive more into it.</p>"},{"location":"tutorials/python/basics/introduction/#what-is-python","title":"What is Python?","text":"<p>As you already know that python is a programming language, for now just remmember its an interpreted language, i.e the python interpreter acts like an interface between you and the machine.</p> <p>You write in English and python converts it into a language that the machine can understand, simple isn't it?</p>"},{"location":"tutorials/python/basics/introduction/#whos-using-python","title":"Who's using Python?","text":"<p>Almost everyone uses python, from big companies like Google, Facebook, Dropbox, Microsoft, etc to research institutes like CERN, NASA, etc, everyone uses python!</p>"},{"location":"tutorials/python/basics/introduction/#what-will-i-learn-here","title":"What will I learn here?","text":"<p>Octallium aims to teach Python 3 right from basics to advanced. Ofcouse, its not possible to cover everything that python has to offer, but it will surely teach you enough to get started on your own.</p>"},{"location":"tutorials/python/basics/introduction/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"},{"location":"tutorials/python/basics/list/","title":"TODO","text":""},{"location":"tutorials/python/basics/loops/","title":"TODO","text":""},{"location":"tutorials/python/basics/oop/","title":"TODO","text":""},{"location":"tutorials/python/basics/packages/","title":"TODO","text":""},{"location":"tutorials/python/basics/set/","title":"TODO","text":""},{"location":"tutorials/python/basics/static-typing/","title":"TODO","text":""},{"location":"tutorials/python/basics/strings/","title":"TODO","text":""},{"location":"tutorials/python/basics/tuple/","title":"TODO","text":""},{"location":"tutorials/python/basics/variables/","title":"Variables","text":""},{"location":"tutorials/python/basics/variables/#introduction","title":"Introduction","text":"<p>Let us see how to create variables in Python. In order to understand variables, I'd like you to meet Billy, he is a friendly dinosaur and is currently planning for his birthday party. Billy is very excited about the party and is busy thinking about packaging all the return gifts.</p> <p>Billy has three type of return gifts -</p> <ol> <li>Balloons</li> <li>Party Hats</li> <li>Crackers</li> </ol>"},{"location":"tutorials/python/basics/variables/#declaring-variables","title":"Declaring Variables","text":"<p>Let's start by creating a file called as 'variables.py' anywhere on your computer and open it in your code editor and type the following -</p> <pre><code>box = 'Baloons'\nprint(box)\n</code></pre> <p>In order to run the file, open the terminal and navigate to the directory which contains the file.</p> <p>Suppose I have created that file on my desktop, then the path on my terminal will be -</p> <pre><code>$ cd /Users/{your username}/Desktop\n</code></pre> <p>In order to run the file, type the following in your terminal -</p> <pre><code>$ python3 variables.py\n</code></pre> <p>Output will be as follows -</p> <pre><code>Baloons\n</code></pre> <p>Congratulation! You just created a variable and printed its value.</p>"},{"location":"tutorials/python/basics/variables/#understanding-variables","title":"Understanding Variables","text":"<p>Let us again have a look at the code we wrote above</p> <pre><code>box = 'Baloons'\nprint(box)\n</code></pre> <p>You are declaring a variable called box and assigning it a value of Baloons, note the single quote around it, you can also use double quotes as follows and it will give you the same output.</p> <pre><code>box = \"Baloons\"\nprint(box)\n</code></pre> <p>Single and double quotes can be used interchangeably, but be sure to use a consistent style all across your code.</p>"},{"location":"tutorials/python/basics/variables/#printing-values","title":"Printing Values","text":"<pre><code>box = 'Baloons'\nprint(box)\n</code></pre> <p>Line 2 prints the value of the variable 'box' to the terminal, which in our case is 'Baloons'.</p> <pre><code>Baloons\n</code></pre> <p>print() is a builtin python function which we can easily use to print values.</p>"},{"location":"tutorials/python/basics/variables/#re-assigning-values","title":"Re-assigning Values","text":"<p>Suppose, now Billy wants to pack 'Party Hats' instead of 'Baloons', then we can re-assign a new value to the same variable 'box'</p> <pre><code>box = 'Party Hats'\nprint(box)\n</code></pre> <p>You can again check the value by running the file</p> <pre><code>python3 variables.py\n</code></pre> <p>Output</p> <pre><code>Party Hats\n</code></pre> <p>Notice that our value has now changed from 'Baloons' to 'Party Hats'.</p> <p>And now finally Billy wants to pack 'Crackers', so we can once again re-assign 'box' to a new value of 'Crackers'</p> <pre><code>box = 'Crackers'\nprint(box)\n</code></pre> <p>If you run the file again, this time output will be</p> <pre><code>Crackers\n</code></pre>"},{"location":"tutorials/python/basics/variables/#full-code","title":"Full Code","text":"<pre><code># variables.py\n\nbox = 'Baloons'\nprint(box) # prints -&gt; Baloons\n\nbox = 'Party Hats'\nprint(box) # prints -&gt; Party Hats\n\nbox = 'Crackers'\nprint(box) # prints -&gt; Crackers\n</code></pre>"},{"location":"tutorials/python/basics/variables/#conclusion","title":"Conclusion","text":"<p>As you must have noticed box is just a placeholder, we can assign different values to it from time to time, thus it is know as a variable, i.e values can change but the placeholder remains the same.</p>"},{"location":"tutorials/python/basics/variables/#buy-me-a-coffee","title":"Buy Me A Coffee","text":"<p>Buy Me A Coffee</p>"}]}