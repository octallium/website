{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"!function(c,h,i,m,p){m=c.createElement(h),p=c.getElementsByTagName(h)[0],m.async=1,m.src=i,p.parentNode.insertBefore(m,p)}(document,\"script\",\"https://chimpstatic.com/mcjs-connected/js/users/855c4266d070e1fa933eae8f5/5c022d5a7fcf57cb6545f5fce.js\"); Octallium \u00b6 Today's programming world is just like this epic battle scene, with so many different programming languages battling for top spot and every language pitching its strongest point, this eventually gets us to the question, finally which is the best ? Sounds interesting ? Carry on... Introduction \u00b6 Octallium presents a simple learning experience and on the way helps you to choose the right tools for the job. There are multiple software stacks in the industry, stacks simply means which programming languages are used along with other technologies such as frameworks, servers, database, etc. But why would you have to use multiple things for achieving your goal? Answer - Because there is no silver bullet in programming. Why multiple languages/technologies? \u00b6 Every programming language is awesome only till the time it works for you and it's the worst when it doesn't, but it's really up to you which demon(language) you prefer, there is no ONE best language. Although you can achieve the same results using multiple languages, but often different languages serve a specific purpose and unfortunately as a programmer you will need to understand a couple of them before you can actually make anything fruitful. Get Updates \u00b6 #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; } /* Add your own Mailchimp form style overrides in your site stylesheet or in this style block. We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. <em>/ Subscribe indicates required Email Address * First Name Last Name (function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';fnames[3]='ADDRESS';ftypes[3]='address';fnames[4]='PHONE';ftypes[4]='phone';fnames[5]='BIRTHDAY';ftypes[5]='birthday';}(jQuery));var $mcj = jQuery.noConflict(true); Once a week updates about new content and articles, thats it! Please Consider a Donation \u2764\ufe0f \u00b6 If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Home"},{"location":"#octallium","text":"Today's programming world is just like this epic battle scene, with so many different programming languages battling for top spot and every language pitching its strongest point, this eventually gets us to the question, finally which is the best ? Sounds interesting ? Carry on...","title":"Octallium"},{"location":"#introduction","text":"Octallium presents a simple learning experience and on the way helps you to choose the right tools for the job. There are multiple software stacks in the industry, stacks simply means which programming languages are used along with other technologies such as frameworks, servers, database, etc. But why would you have to use multiple things for achieving your goal? Answer - Because there is no silver bullet in programming.","title":"Introduction"},{"location":"#why-multiple-languagestechnologies","text":"Every programming language is awesome only till the time it works for you and it's the worst when it doesn't, but it's really up to you which demon(language) you prefer, there is no ONE best language. Although you can achieve the same results using multiple languages, but often different languages serve a specific purpose and unfortunately as a programmer you will need to understand a couple of them before you can actually make anything fruitful.","title":"Why multiple languages/technologies?"},{"location":"#get-updates","text":"#mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; } /* Add your own Mailchimp form style overrides in your site stylesheet or in this style block. We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. <em>/","title":"Get Updates"},{"location":"#please-consider-a-donation","text":"If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"subscribe/","text":"!function(c,h,i,m,p){m=c.createElement(h),p=c.getElementsByTagName(h)[0],m.async=1,m.src=i,p.parentNode.insertBefore(m,p)}(document,\"script\",\"https://chimpstatic.com/mcjs-connected/js/users/855c4266d070e1fa933eae8f5/5c022d5a7fcf57cb6545f5fce.js\"); #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; } /* Add your own Mailchimp form style overrides in your site stylesheet or in this style block. We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. <em>/ Subscribe indicates required Email Address * First Name Last Name (function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';fnames[3]='ADDRESS';ftypes[3]='address';fnames[4]='PHONE';ftypes[4]='phone';fnames[5]='BIRTHDAY';ftypes[5]='birthday';}(jQuery));var $mcj = jQuery.noConflict(true); Once a week update about new content and articles, thats it!","title":"Subscribe"},{"location":"about/about-me/","text":"About \u00b6 Hi, my name is Anil Kulkarni and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of coding. When I am not coding you can usually find me watching movies \ud83c\udfac Background \u00b6 I have done my Mechanical Engineering and then completed masters in Marketing Management, I was always passionate about creating things, my last venture was making \"Handmade Soaps\" and while creating an e-commerce website for it, the coding bug caught up with me and I have been learning programming ever since. I am still a beginner and try to share whatever I learn. I am open to any new opportunities, you can checkout my profile at - LinkedIn Github You can contact me on - connect [at] octallium (dot) com Motivation \u00b6 As a beginner I really struggled to find the right sources for learning and ended up taking a lot of free and paid online courses, which finally ended up in confusion and frustration. So I decided to write a simple to understand, beginner oriented resources for learning how to code.","title":"About Me"},{"location":"about/about-me/#about","text":"Hi, my name is Anil Kulkarni and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of coding. When I am not coding you can usually find me watching movies \ud83c\udfac","title":"About"},{"location":"about/about-me/#background","text":"I have done my Mechanical Engineering and then completed masters in Marketing Management, I was always passionate about creating things, my last venture was making \"Handmade Soaps\" and while creating an e-commerce website for it, the coding bug caught up with me and I have been learning programming ever since. I am still a beginner and try to share whatever I learn. I am open to any new opportunities, you can checkout my profile at - LinkedIn Github You can contact me on - connect [at] octallium (dot) com","title":"Background"},{"location":"about/about-me/#motivation","text":"As a beginner I really struggled to find the right sources for learning and ended up taking a lot of free and paid online courses, which finally ended up in confusion and frustration. So I decided to write a simple to understand, beginner oriented resources for learning how to code.","title":"Motivation"},{"location":"about/contribution/","text":"Contributing Content \u00b6 The entire project is open source and available on Github, including this website which is using Github Pages. You can star, fork or even better send a pull request, all of the updates would be reviewed and merged as per the schedule. Currently the project is using Mkdocs to generate content, but aims to use Phoenix Framework sometime in the future. No technical skills ? No Problem, you can still contribute by - Generating creative/graphic content. Check for any grammar/spelling mistakes. Letting us know for any broken links, bugs or incorrect content. Sponsoring custom swag like T-Shirts, caps, stickers, etc. Writing social media posts.","title":"Contributing Content"},{"location":"about/contribution/#contributing-content","text":"The entire project is open source and available on Github, including this website which is using Github Pages. You can star, fork or even better send a pull request, all of the updates would be reviewed and merged as per the schedule. Currently the project is using Mkdocs to generate content, but aims to use Phoenix Framework sometime in the future. No technical skills ? No Problem, you can still contribute by - Generating creative/graphic content. Check for any grammar/spelling mistakes. Letting us know for any broken links, bugs or incorrect content. Sponsoring custom swag like T-Shirts, caps, stickers, etc. Writing social media posts.","title":"Contributing Content"},{"location":"about/donate/","text":"Donate \u00b6 Project like this require funding to maintain and generate content. Currently this is my side project and I try to dedicate as much time and efforts possible, but with your help, I could create a lot more content for the community. You can donate by clicking on the link below:","title":"Donate"},{"location":"about/donate/#donate","text":"Project like this require funding to maintain and generate content. Currently this is my side project and I try to dedicate as much time and efforts possible, but with your help, I could create a lot more content for the community. You can donate by clicking on the link below:","title":"Donate"},{"location":"contact/contact/","text":"Contact \u00b6 Its always nice to hear from the community, please feel free to drop a mail to - connect [at] octallium (dot) com I normally try to get back immediately or within 12 hrs of receiving the mail. Or You can always socially connect - Github Youtube Twitter LinkedIn Facebook Instagram","title":"Connect"},{"location":"contact/contact/#contact","text":"Its always nice to hear from the community, please feel free to drop a mail to - connect [at] octallium (dot) com I normally try to get back immediately or within 12 hrs of receiving the mail. Or You can always socially connect - Github Youtube Twitter LinkedIn Facebook Instagram","title":"Contact"},{"location":"tutorials/topics/","text":"Tutorials \u00b6 Choose your topic","title":"Tutorials"},{"location":"tutorials/topics/#tutorials","text":"Choose your topic","title":"Tutorials"},{"location":"tutorials/elixir/basics/basic-operations/","text":"Basic Operations \u00b6 TODO \u00b6","title":"Basic Operations"},{"location":"tutorials/elixir/basics/basic-operations/#basic-operations","text":"","title":"Basic Operations"},{"location":"tutorials/elixir/basics/basic-operations/#todo","text":"","title":"TODO"},{"location":"tutorials/elixir/basics/data-types/","text":"Data Types \u00b6 TODO \u00b6","title":"Data Types"},{"location":"tutorials/elixir/basics/data-types/#data-types","text":"","title":"Data Types"},{"location":"tutorials/elixir/basics/data-types/#todo","text":"","title":"TODO"},{"location":"tutorials/elixir/basics/installation/","text":"Installation \u00b6 Learn how to install Elixir and how to setup your machine for development. At the time of writing, the latest stable version is Elixir 1.10.0, you may have a different version depending when you are reading this tutorial. Mac OS \u00b6 Installing Elixir couldn't be any easy, just make sure you have Brew installed and then type the following in the terminal - 1 brew install elixir Windows \u00b6 On windows you can install Elixir as you would install just about any program, all you need to do is to download the installer and press next till it is installed. Other Platforms \u00b6 Elixir offers excellent support for all other platforms including FreeBSD and other unix derived languages, check out this page for documentation. Checking Installation \u00b6 You can check the installation, by typing the following in your terminal or powershell - 1 elixir -v Output - 1 2 3 Erlang/OTP 22 [ erts-10.6.2 ] [ source ] [ 64 -bit ] [ smp:4:4 ] [ ds:4:4:10 ] [ async-threads:1 ] [ hipe ] [ dtrace ] Elixir 1 .10.0 ( compiled with Erlang/OTP 22 ) Line 3 indicates that Elixir 1.10.0 has been installed and Elixir has been compiled with Erlang 22.0 Setting up your editor \u00b6 Elixir is supported in all the leading editors and IDE's, two of the most commonly used editors are - VS Code \u00b6 You only need to install this plugin. Optionally you can also install this plugin for code formatting. Atom \u00b6 You need to install this plugin. Further, I have read nice reviews for Spacemacs , however I have not tested it personally.","title":"Installation"},{"location":"tutorials/elixir/basics/installation/#installation","text":"Learn how to install Elixir and how to setup your machine for development. At the time of writing, the latest stable version is Elixir 1.10.0, you may have a different version depending when you are reading this tutorial.","title":"Installation"},{"location":"tutorials/elixir/basics/installation/#mac-os","text":"Installing Elixir couldn't be any easy, just make sure you have Brew installed and then type the following in the terminal - 1 brew install elixir","title":"Mac OS"},{"location":"tutorials/elixir/basics/installation/#windows","text":"On windows you can install Elixir as you would install just about any program, all you need to do is to download the installer and press next till it is installed.","title":"Windows"},{"location":"tutorials/elixir/basics/installation/#other-platforms","text":"Elixir offers excellent support for all other platforms including FreeBSD and other unix derived languages, check out this page for documentation.","title":"Other Platforms"},{"location":"tutorials/elixir/basics/installation/#checking-installation","text":"You can check the installation, by typing the following in your terminal or powershell - 1 elixir -v Output - 1 2 3 Erlang/OTP 22 [ erts-10.6.2 ] [ source ] [ 64 -bit ] [ smp:4:4 ] [ ds:4:4:10 ] [ async-threads:1 ] [ hipe ] [ dtrace ] Elixir 1 .10.0 ( compiled with Erlang/OTP 22 ) Line 3 indicates that Elixir 1.10.0 has been installed and Elixir has been compiled with Erlang 22.0","title":"Checking Installation"},{"location":"tutorials/elixir/basics/installation/#setting-up-your-editor","text":"Elixir is supported in all the leading editors and IDE's, two of the most commonly used editors are -","title":"Setting up your editor"},{"location":"tutorials/elixir/basics/installation/#vs-code","text":"You only need to install this plugin. Optionally you can also install this plugin for code formatting.","title":"VS Code"},{"location":"tutorials/elixir/basics/installation/#atom","text":"You need to install this plugin. Further, I have read nice reviews for Spacemacs , however I have not tested it personally.","title":"Atom"},{"location":"tutorials/elixir/basics/introduction/","text":"Introduction \u00b6 Considering Elixir ? Or maybe just curious ? Chances are you already have some experience with programming or if you are a complete beginner, I couldn't be any more happy! Before getting along with actual coding, let's get a couple of things straight, Elixir is not a silver bullet to all your problems, ever heard of Hammer Syndrome ? It implies that, \"If you only have a hammer, every problem looks like a nail!\" , but in the practical world things are very different, problems are various and in different domains. Then where would you use Elixir? Scenario \u00b6 Let's consider this, the world basically works by communication , means communication is required in every aspects of life, products communicate their utility, services communicate their usability, consumer communicate their requirements, etc, and in this world of communication data is constantly being passed from one point to another. Elixir is extremely well suited for these applications, it really shines when data has to be transferred in a highly distributed and fault tolerant manner. Often, data has to be transformed to suit the end users, Elixir with all its eco-system is a perfectly capable system for it. Perhaps, that's why products like WhatsApp, Discord & Telecom sector rely so highly on it. If you are more interested in generating data, analysing data or manipulating data or create really low level applications, then you should consider having a look at other programming languages. Why Erlang/Elixir And Phoenix? \u00b6 There is this typical marketing pitch that Erlang/Elixir really offers excellent distributed concurrency, planet scalability, immutable values and fault tolerant systems, etc etc, but lets keep them aside for a while. The only pitch is, let yourself to be exposed to this really excellent eco-system and then decide your own choice of demon \ud83d\udc32 Chances are that you must have heard about WhatsApp , Discord , Bleacher Report , Pinterest , etc, they runs on Erlang/Elixir and about more than 50% of all telecom providers on the planet. If its so great why haven't I heard about it earlier? Carry on... About Erlang/Elixir \u00b6 We need to give it, other languages did a fantastic job of presenting themself in a much better way, also the amount of marketing, conferences, sponsorships, etc have really shaped them to be much popular and widely used. Erlang/Elixir looks as if it has a cryptic syntax and functional programming makes them look difficult on the surface, but its really not the case, they are really great to work with and specially Elixir is designed to make developers feel happy . Feeling curious, what the hell is all this? Carry on... What is Erlang, Elixir And Phoenix \u00b6 Erlang/OTP is a concurrent functional programming language that forms the basic foundation, it was developed by Ericsson in 1986 and made open source in 1998. Erlang runs on its virtual machine called as the BEAM . OTP simply stands for Open Telecom Platform . Elixir builds on top of Erlang and provides a nice and easy way of interacting with the underlying system. It provides abstraction over Erlang, so that its easier for developers to code and finally it compiles to Erlang byte code. Phoenix Framework is a great set of tooling to create mature and blazing fast web applications, its based on Elixir and offers excellent framework to create highly scalable and concurrent distributed applications. We would be more focused on Elixir & Phoenix , but keep it mind that finally everything is compiled to Erlang byte code and runs on the BEAM. Elixir & Phoenix also has very good set of online documentation and the communities are also generally warm and helpful. Let the force be with you! Code Sample \u00b6 All code will be in the form of following block 1 2 3 4 5 6 7 8 # Elixir code defmodule Hello do def say do :World end end Understanding Elixir \u00b6 Elixir is a functional programming language, the word functional is important as it does not have the concept of Objects or Classes , if you come from a Object Orientated Language then you need to unlearn a lot of concepts in order to understand the functional paradigm. Programming need not only be object oriented, functional programming is a beautiful way of thinking, also it takes away a lot of pain as you don't need to keep a track of the state of objects. How it works? \u00b6 Elixir acts like a thin layer on top of Erlang , under the hood it maps everything to Erlang and also compiles to Erlang byte code. This byte code runs on the Erlang virtual machine called as BEAM . Elixir brings a lot of simplicity and easy to understand syntax, the idea is to make the developer feel happy while coding yet maintain the high performance. Erlang offers more than 30 years of rock solid performance and also the availability of huge eco-system of modules, these modules can be easily used in Elixir. Getting Help \u00b6 Elixir has a set of very nice online documentation and guides . Elixir Forum is an excellent place to post queries and interact with the community.","title":"Introduction"},{"location":"tutorials/elixir/basics/introduction/#introduction","text":"Considering Elixir ? Or maybe just curious ? Chances are you already have some experience with programming or if you are a complete beginner, I couldn't be any more happy! Before getting along with actual coding, let's get a couple of things straight, Elixir is not a silver bullet to all your problems, ever heard of Hammer Syndrome ? It implies that, \"If you only have a hammer, every problem looks like a nail!\" , but in the practical world things are very different, problems are various and in different domains. Then where would you use Elixir?","title":"Introduction"},{"location":"tutorials/elixir/basics/introduction/#scenario","text":"Let's consider this, the world basically works by communication , means communication is required in every aspects of life, products communicate their utility, services communicate their usability, consumer communicate their requirements, etc, and in this world of communication data is constantly being passed from one point to another. Elixir is extremely well suited for these applications, it really shines when data has to be transferred in a highly distributed and fault tolerant manner. Often, data has to be transformed to suit the end users, Elixir with all its eco-system is a perfectly capable system for it. Perhaps, that's why products like WhatsApp, Discord & Telecom sector rely so highly on it. If you are more interested in generating data, analysing data or manipulating data or create really low level applications, then you should consider having a look at other programming languages.","title":"Scenario"},{"location":"tutorials/elixir/basics/introduction/#why-erlangelixir-and-phoenix","text":"There is this typical marketing pitch that Erlang/Elixir really offers excellent distributed concurrency, planet scalability, immutable values and fault tolerant systems, etc etc, but lets keep them aside for a while. The only pitch is, let yourself to be exposed to this really excellent eco-system and then decide your own choice of demon \ud83d\udc32 Chances are that you must have heard about WhatsApp , Discord , Bleacher Report , Pinterest , etc, they runs on Erlang/Elixir and about more than 50% of all telecom providers on the planet. If its so great why haven't I heard about it earlier? Carry on...","title":"Why Erlang/Elixir And Phoenix?"},{"location":"tutorials/elixir/basics/introduction/#about-erlangelixir","text":"We need to give it, other languages did a fantastic job of presenting themself in a much better way, also the amount of marketing, conferences, sponsorships, etc have really shaped them to be much popular and widely used. Erlang/Elixir looks as if it has a cryptic syntax and functional programming makes them look difficult on the surface, but its really not the case, they are really great to work with and specially Elixir is designed to make developers feel happy . Feeling curious, what the hell is all this? Carry on...","title":"About Erlang/Elixir"},{"location":"tutorials/elixir/basics/introduction/#what-is-erlang-elixir-and-phoenix","text":"Erlang/OTP is a concurrent functional programming language that forms the basic foundation, it was developed by Ericsson in 1986 and made open source in 1998. Erlang runs on its virtual machine called as the BEAM . OTP simply stands for Open Telecom Platform . Elixir builds on top of Erlang and provides a nice and easy way of interacting with the underlying system. It provides abstraction over Erlang, so that its easier for developers to code and finally it compiles to Erlang byte code. Phoenix Framework is a great set of tooling to create mature and blazing fast web applications, its based on Elixir and offers excellent framework to create highly scalable and concurrent distributed applications. We would be more focused on Elixir & Phoenix , but keep it mind that finally everything is compiled to Erlang byte code and runs on the BEAM. Elixir & Phoenix also has very good set of online documentation and the communities are also generally warm and helpful. Let the force be with you!","title":"What is Erlang, Elixir And Phoenix"},{"location":"tutorials/elixir/basics/introduction/#code-sample","text":"All code will be in the form of following block 1 2 3 4 5 6 7 8 # Elixir code defmodule Hello do def say do :World end end","title":"Code Sample"},{"location":"tutorials/elixir/basics/introduction/#understanding-elixir","text":"Elixir is a functional programming language, the word functional is important as it does not have the concept of Objects or Classes , if you come from a Object Orientated Language then you need to unlearn a lot of concepts in order to understand the functional paradigm. Programming need not only be object oriented, functional programming is a beautiful way of thinking, also it takes away a lot of pain as you don't need to keep a track of the state of objects.","title":"Understanding Elixir"},{"location":"tutorials/elixir/basics/introduction/#how-it-works","text":"Elixir acts like a thin layer on top of Erlang , under the hood it maps everything to Erlang and also compiles to Erlang byte code. This byte code runs on the Erlang virtual machine called as BEAM . Elixir brings a lot of simplicity and easy to understand syntax, the idea is to make the developer feel happy while coding yet maintain the high performance. Erlang offers more than 30 years of rock solid performance and also the availability of huge eco-system of modules, these modules can be easily used in Elixir.","title":"How it works?"},{"location":"tutorials/elixir/basics/introduction/#getting-help","text":"Elixir has a set of very nice online documentation and guides . Elixir Forum is an excellent place to post queries and interact with the community.","title":"Getting Help"},{"location":"tutorials/elixir/basics/lists/","text":"TODO \u00b6","title":"Lists"},{"location":"tutorials/elixir/basics/lists/#todo","text":"","title":"TODO"},{"location":"tutorials/elixir/basics/pattern-matching/","text":"TODO \u00b6","title":"Pattern Matching"},{"location":"tutorials/elixir/basics/pattern-matching/#todo","text":"","title":"TODO"},{"location":"tutorials/elixir/basics/strings/","text":"TODO \u00b6","title":"Strings"},{"location":"tutorials/elixir/basics/strings/#todo","text":"","title":"TODO"},{"location":"tutorials/python/basics/installation/","text":"Installation \u00b6 Learn how to install Python 3 on your machine. But, before actually installing there are some points that I would like you to note. Python actually comes pre-installed on most operating system these days, but its the old and legacy version Python 2. Python 2 will officially be retiring on Jan 1 st , 2020, so its ideal to straight away get working with Python 3. Check out the installation instructions as per your operating system. Installing on Windows \u00b6 Installing Python 3 on Windows is just as easy as installing any other program, in addition to Python 3, I would highly recommend installing Git Bash , so that you can work with the exact same commands in the tutorial as mine and we need not keeping on switching between operating systems. Ofcouse, I will let you know whenever there are differences. Navigate to following link and download the setup file 1 https://www.python.org/downloads/windows/ Under Stable Releases check out your system and download the setup file accordingly, in most cases your system should be 64 bit, if that's the case you can download the following setup file 1 Windows x86-64 executable installer After downloading you can install it as you would install any other program. The installer will install everything and also setup environment variables. Installing on Mac \u00b6 Navigate to following link and download the setup file 1 https://www.python.org/downloads/mac-osx/ Under Stable Releases you can download the following file 1 macOS 64-bit installer And then install it as any other program, it will automatically setup environment variables for you. Alternatively If you are using brew, then installing Python is very simple, open your terminal and type 1 brew install python By default brew will install python 3 to the following directory - 1 /usr/local/bin/python3 You can check it by typing the following on your terminal 1 which python3 Installing on Linux \u00b6 Installing Python 3.7 on Ubuntu. If you are using Ubuntu 19.04 Disco Dingo then you already have Python 3.7.3 pre-installed, just sit back and you can directly skip to \"Setting Up Alias\" For others, start by updating ubuntu, open your terminal and type the following - 1 2 sudo apt update sudo apt install software-properties-common Add the repository 1 sudo add-apt-repository ppa:deadsnakes/ppa Install Python 3.7 1 sudo apt install python3.7 Checking Version \u00b6 You can check the installed python version. 1 python3 --version Python 3 also installs \"pip3\" by default, it is the package manager for python, you can check its version by 1 pip3 --version Setting Up Alias (Optional) \u00b6 Since Python 2 comes pre-installed on almost all the operating systems, the default python keyword points to Python 2, for using Python 3 we need to type python3 , which for me gets a little boring and unintuitive since Python 2 will be reaching its end of life soon. So, I just setup a alias, which simply means that, I say to my computer, \"Whenever I type python it has to refer to Python 3 and not to Python 2\". To setup a alias open your terminal and navigate to your home directory 1 cd If you are using bash, open the bash_profile, since I am using Visual Studio Code, I can directly open the file by typing 1 code .bash_profile If you are using atom, you can open by 1 atom .bash_profile Or if you are using PyCharm 1 charm .bash_profile Instead of bash if you are using zsh, you can open .zshrc 1 code .zshrc Add the following 2 lines at the end of the file 1 2 alias python='python3' alias pip='pip3' Now close and restart your terminal, to check if its working properly type the following 1 python --version It should show the current Python 3 installed version. Setting up your development environment and code editor \u00b6 (External Links) Excellent environment setup videos by Corey Schafer - For Windows For MacOS Please Consider a Donation \u2764\ufe0f \u00b6 All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Installation"},{"location":"tutorials/python/basics/installation/#installation","text":"Learn how to install Python 3 on your machine. But, before actually installing there are some points that I would like you to note. Python actually comes pre-installed on most operating system these days, but its the old and legacy version Python 2. Python 2 will officially be retiring on Jan 1 st , 2020, so its ideal to straight away get working with Python 3. Check out the installation instructions as per your operating system.","title":"Installation"},{"location":"tutorials/python/basics/installation/#installing-on-windows","text":"Installing Python 3 on Windows is just as easy as installing any other program, in addition to Python 3, I would highly recommend installing Git Bash , so that you can work with the exact same commands in the tutorial as mine and we need not keeping on switching between operating systems. Ofcouse, I will let you know whenever there are differences. Navigate to following link and download the setup file 1 https://www.python.org/downloads/windows/ Under Stable Releases check out your system and download the setup file accordingly, in most cases your system should be 64 bit, if that's the case you can download the following setup file 1 Windows x86-64 executable installer After downloading you can install it as you would install any other program. The installer will install everything and also setup environment variables.","title":"Installing on Windows"},{"location":"tutorials/python/basics/installation/#installing-on-mac","text":"Navigate to following link and download the setup file 1 https://www.python.org/downloads/mac-osx/ Under Stable Releases you can download the following file 1 macOS 64-bit installer And then install it as any other program, it will automatically setup environment variables for you. Alternatively If you are using brew, then installing Python is very simple, open your terminal and type 1 brew install python By default brew will install python 3 to the following directory - 1 /usr/local/bin/python3 You can check it by typing the following on your terminal 1 which python3","title":"Installing on Mac"},{"location":"tutorials/python/basics/installation/#installing-on-linux","text":"Installing Python 3.7 on Ubuntu. If you are using Ubuntu 19.04 Disco Dingo then you already have Python 3.7.3 pre-installed, just sit back and you can directly skip to \"Setting Up Alias\" For others, start by updating ubuntu, open your terminal and type the following - 1 2 sudo apt update sudo apt install software-properties-common Add the repository 1 sudo add-apt-repository ppa:deadsnakes/ppa Install Python 3.7 1 sudo apt install python3.7","title":"Installing on Linux"},{"location":"tutorials/python/basics/installation/#checking-version","text":"You can check the installed python version. 1 python3 --version Python 3 also installs \"pip3\" by default, it is the package manager for python, you can check its version by 1 pip3 --version","title":"Checking Version"},{"location":"tutorials/python/basics/installation/#setting-up-alias-optional","text":"Since Python 2 comes pre-installed on almost all the operating systems, the default python keyword points to Python 2, for using Python 3 we need to type python3 , which for me gets a little boring and unintuitive since Python 2 will be reaching its end of life soon. So, I just setup a alias, which simply means that, I say to my computer, \"Whenever I type python it has to refer to Python 3 and not to Python 2\". To setup a alias open your terminal and navigate to your home directory 1 cd If you are using bash, open the bash_profile, since I am using Visual Studio Code, I can directly open the file by typing 1 code .bash_profile If you are using atom, you can open by 1 atom .bash_profile Or if you are using PyCharm 1 charm .bash_profile Instead of bash if you are using zsh, you can open .zshrc 1 code .zshrc Add the following 2 lines at the end of the file 1 2 alias python='python3' alias pip='pip3' Now close and restart your terminal, to check if its working properly type the following 1 python --version It should show the current Python 3 installed version.","title":"Setting Up Alias (Optional)"},{"location":"tutorials/python/basics/installation/#setting-up-your-development-environment-and-code-editor","text":"(External Links) Excellent environment setup videos by Corey Schafer - For Windows For MacOS","title":"Setting up your development environment and code editor"},{"location":"tutorials/python/basics/installation/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"tutorials/python/basics/introduction/","text":"Introduction to Python 3 \u00b6 What the hell...python ? Isn't it supposed to be a reptile! Well, it also happens to be a really great programming language. If you are just starting your programming journey, Python is the right place to start, it offers nice and clean syntax, vast library, online available content, huge community, etc. Today's software industry has a huge collection of programming languages like C, C++, Java, Javascript, Go, Rust, etc. Each of the language has its own pros and cons, there is no 'One Size Fits All' concept and one has to really consider the project requirements in order to select a language. So, that brings us to the next question, WHY Choose PYTHON ? Why Python? \ud83d\udc0d \u00b6 Simple answer is, because its Amazing! Surely python also has its share of pros and cons, but offers a lot more in return, such as follows - Are you a beginner ? Python is the perfect place to start, it will help you to understand a lot of the basic programming concepts and then you can move on to other languages if required. Python really helps you to be productive, you can achieve a lot more in few lines of code. In addition to it, Python is very robust, performant and provides high scalability. Python offers a simple and clean syntax, no semicolons! Python has a vast library support, you can find a library for almost any functionality you can think off! Web development no problem! Python has robust web frameworks like Django, Flask, Pyramid, etc. Creating command line applications, again no problem! Python is great fit for Machine Learning, Artificial Intelligence, Business Analytics, etc. Need to work with files such as csv, xls, pdf, zip, etc, ...aah just a piece of cake. Python is great for rapid development, you can easily bootstrap a project with the vast eco-system that python provides. Sounds exciting! Let's dive more into it. What is Python? \u00b6 As you already know that python is a programming language, for now just remmember its an interpreted language, i.e the python interpreter acts like an interface between you and the machine. You write in English and python converts it into a language that the machine can understand, simple isn't it? Who's using Python? \u00b6 Almost everyone uses python, from big companies like Google, Facebook, Dropbox, Microsoft, etc to research institutes like CERN, NASA, etc, everyone uses python! What will I learn here? \u00b6 Octallium aims to teach Python 3 right from basics to advanced. Ofcouse, its not possible to cover everything that python has to offer, but it will surely teach you enough to get started on your own. Please Consider a Donation \u2764\ufe0f \u00b6 All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Introduction"},{"location":"tutorials/python/basics/introduction/#introduction-to-python-3","text":"What the hell...python ? Isn't it supposed to be a reptile! Well, it also happens to be a really great programming language. If you are just starting your programming journey, Python is the right place to start, it offers nice and clean syntax, vast library, online available content, huge community, etc. Today's software industry has a huge collection of programming languages like C, C++, Java, Javascript, Go, Rust, etc. Each of the language has its own pros and cons, there is no 'One Size Fits All' concept and one has to really consider the project requirements in order to select a language. So, that brings us to the next question, WHY Choose PYTHON ?","title":"Introduction to Python 3"},{"location":"tutorials/python/basics/introduction/#why-python","text":"Simple answer is, because its Amazing! Surely python also has its share of pros and cons, but offers a lot more in return, such as follows - Are you a beginner ? Python is the perfect place to start, it will help you to understand a lot of the basic programming concepts and then you can move on to other languages if required. Python really helps you to be productive, you can achieve a lot more in few lines of code. In addition to it, Python is very robust, performant and provides high scalability. Python offers a simple and clean syntax, no semicolons! Python has a vast library support, you can find a library for almost any functionality you can think off! Web development no problem! Python has robust web frameworks like Django, Flask, Pyramid, etc. Creating command line applications, again no problem! Python is great fit for Machine Learning, Artificial Intelligence, Business Analytics, etc. Need to work with files such as csv, xls, pdf, zip, etc, ...aah just a piece of cake. Python is great for rapid development, you can easily bootstrap a project with the vast eco-system that python provides. Sounds exciting! Let's dive more into it.","title":"Why Python? \ud83d\udc0d"},{"location":"tutorials/python/basics/introduction/#what-is-python","text":"As you already know that python is a programming language, for now just remmember its an interpreted language, i.e the python interpreter acts like an interface between you and the machine. You write in English and python converts it into a language that the machine can understand, simple isn't it?","title":"What is Python?"},{"location":"tutorials/python/basics/introduction/#whos-using-python","text":"Almost everyone uses python, from big companies like Google, Facebook, Dropbox, Microsoft, etc to research institutes like CERN, NASA, etc, everyone uses python!","title":"Who's using Python?"},{"location":"tutorials/python/basics/introduction/#what-will-i-learn-here","text":"Octallium aims to teach Python 3 right from basics to advanced. Ofcouse, its not possible to cover everything that python has to offer, but it will surely teach you enough to get started on your own.","title":"What will I learn here?"},{"location":"tutorials/python/basics/introduction/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"tutorials/python/basics/variables/","text":"Variables \u00b6 Introduction \u00b6 Let us see how to create variables in Python. In order to understand variables, I'd like you to meet Billy , he is a friendly dinosaur and is currently planning for his birthday party. Billy is very excited about the party and is busy thinking about packaging all the return gifts. Billy has three type of return gifts - Balloons Party Hats Crackers Declaring Variables \u00b6 Let's start by creating a file called as 'variables.py' anywhere on your computer and open it in your code editor and type the following - 1 2 box = 'Baloons' print ( box ) In order to run the file, open the terminal and navigate to the directory which contains the file. Suppose I have created that file on my desktop, then the path on my terminal will be - 1 $ cd /Users/ { your username } /Desktop In order to run the file, type the following in your terminal - 1 $ python3 variables.py Output will be as follows - 1 Baloons Congratulation! You just created a variable and printed its value. Understanding Variables \u00b6 Let us again have a look at the code we wrote above 1 2 box = 'Baloons' print ( box ) You are declaring a variable called box and assigning it a value of Baloons , note the single quote around it, you can also use double quotes as follows and it will give you the same output. 1 2 box = \"Baloons\" print ( box ) Single and double quotes can be used interchangeably, but be sure to use a consistent style all across your code. Printing Values \u00b6 1 2 box = 'Baloons' print ( box ) Line 2 prints the value of the variable 'box' to the terminal, which in our case is 'Baloons'. 1 Baloons print() is a builtin python function which we can easily use to print values. Re-assigning Values \u00b6 Suppose, now Billy wants to pack 'Party Hats' instead of 'Baloons', then we can re-assign a new value to the same variable 'box' 1 2 box = 'Party Hats' print ( box ) You can again check the value by running the file 1 python3 variables.py Output 1 Party Hats Notice that our value has now changed from 'Baloons' to 'Party Hats'. And now finally Billy wants to pack 'Crackers', so we can once again re-assign 'box' to a new value of 'Crackers' 1 2 box = 'Crackers' print ( box ) If you run the file again, this time output will be 1 Crackers Full Code \u00b6 1 2 3 4 5 6 7 8 9 10 # variables.py box = 'Baloons' print ( box ) # prints -> Baloons box = 'Party Hats' print ( box ) # prints -> Party Hats box = 'Crackers' print ( box ) # prints -> Crackers Conclusion \u00b6 As you must have noticed box is just a placeholder, we can assign different values to it from time to time, thus it is know as a variable, i.e values can change but the placeholder remains the same. Please Consider a Donation \u2764\ufe0f \u00b6 All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Variables"},{"location":"tutorials/python/basics/variables/#variables","text":"","title":"Variables"},{"location":"tutorials/python/basics/variables/#introduction","text":"Let us see how to create variables in Python. In order to understand variables, I'd like you to meet Billy , he is a friendly dinosaur and is currently planning for his birthday party. Billy is very excited about the party and is busy thinking about packaging all the return gifts. Billy has three type of return gifts - Balloons Party Hats Crackers","title":"Introduction"},{"location":"tutorials/python/basics/variables/#declaring-variables","text":"Let's start by creating a file called as 'variables.py' anywhere on your computer and open it in your code editor and type the following - 1 2 box = 'Baloons' print ( box ) In order to run the file, open the terminal and navigate to the directory which contains the file. Suppose I have created that file on my desktop, then the path on my terminal will be - 1 $ cd /Users/ { your username } /Desktop In order to run the file, type the following in your terminal - 1 $ python3 variables.py Output will be as follows - 1 Baloons Congratulation! You just created a variable and printed its value.","title":"Declaring Variables"},{"location":"tutorials/python/basics/variables/#understanding-variables","text":"Let us again have a look at the code we wrote above 1 2 box = 'Baloons' print ( box ) You are declaring a variable called box and assigning it a value of Baloons , note the single quote around it, you can also use double quotes as follows and it will give you the same output. 1 2 box = \"Baloons\" print ( box ) Single and double quotes can be used interchangeably, but be sure to use a consistent style all across your code.","title":"Understanding Variables"},{"location":"tutorials/python/basics/variables/#printing-values","text":"1 2 box = 'Baloons' print ( box ) Line 2 prints the value of the variable 'box' to the terminal, which in our case is 'Baloons'. 1 Baloons print() is a builtin python function which we can easily use to print values.","title":"Printing Values"},{"location":"tutorials/python/basics/variables/#re-assigning-values","text":"Suppose, now Billy wants to pack 'Party Hats' instead of 'Baloons', then we can re-assign a new value to the same variable 'box' 1 2 box = 'Party Hats' print ( box ) You can again check the value by running the file 1 python3 variables.py Output 1 Party Hats Notice that our value has now changed from 'Baloons' to 'Party Hats'. And now finally Billy wants to pack 'Crackers', so we can once again re-assign 'box' to a new value of 'Crackers' 1 2 box = 'Crackers' print ( box ) If you run the file again, this time output will be 1 Crackers","title":"Re-assigning Values"},{"location":"tutorials/python/basics/variables/#full-code","text":"1 2 3 4 5 6 7 8 9 10 # variables.py box = 'Baloons' print ( box ) # prints -> Baloons box = 'Party Hats' print ( box ) # prints -> Party Hats box = 'Crackers' print ( box ) # prints -> Crackers","title":"Full Code"},{"location":"tutorials/python/basics/variables/#conclusion","text":"As you must have noticed box is just a placeholder, we can assign different values to it from time to time, thus it is know as a variable, i.e values can change but the placeholder remains the same.","title":"Conclusion"},{"location":"tutorials/python/basics/variables/#please-consider-a-donation","text":"All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"}]}